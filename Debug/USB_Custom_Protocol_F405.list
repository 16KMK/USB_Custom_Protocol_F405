
USB_Custom_Protocol_F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007868  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080079f0  080079f0  000089f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a48  08007a48  0000912c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a48  08007a48  00008a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a50  08007a50  0000912c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08007a58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000912c  2**0
                  CONTENTS
 10 .bss          00002214  2000012c  2000012c  0000912c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002340  20002340  0000912c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013bba  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003616  00000000  00000000  0001cd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00020330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d34  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fbc  00000000  00000000  000221d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166f7  00000000  00000000  00044190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f47  00000000  00000000  0005a887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c7ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004808  00000000  00000000  0011c814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  0012101c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079d8 	.word	0x080079d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	080079d8 	.word	0x080079d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SbW_Protocol_Reply>:
uint8_t RxBuffer[TxRxBufferSize];

extern DataFrame F;

// Transmit data to PC over USB CDC
void SbW_Protocol_Reply(uint8_t *data, uint16_t len) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(data, len);
 8000500:	887b      	ldrh	r3, [r7, #2]
 8000502:	4619      	mov	r1, r3
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f006 fdd1 	bl	80070ac <CDC_Transmit_FS>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <App_User_Callback>:
void CDC_Receive_FS(uint8_t *RxBuffer, uint16_t *Len) {
	SbW_Request_Received_CB(&S, RxBuffer, *Len);
}

//To notify the application layer
void App_User_Callback(SbW_Err_Codes_t Error_Code) {
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	71fb      	strb	r3, [r7, #7]
	// Implement error handling if needed
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_TIM_PeriodElapsedCallback>:

//Sampling timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	F.G[0]++;
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000532:	7d1b      	ldrb	r3, [r3, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800053a:	751a      	strb	r2, [r3, #20]
	SbW_Timer_Callback(&S);
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800053e:	f004 fcaf 	bl	8004ea0 <SbW_Timer_Callback>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000290 	.word	0x20000290
 8000550:	20000000 	.word	0x20000000

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fa42 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f808 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8c2 	bl	80006e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000564:	f006 fcda 	bl	8006f1c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000568:	f000 f86e 	bl	8000648 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <main+0x18>

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	@ 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	@ 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f9f0 	bl	8007964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	@ (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <SystemClock_Config+0xd4>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e0:	2319      	movs	r3, #25
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ff88 	bl	800250c <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000602:	f000 f899 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f9e9 	bl	80029fc <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000630:	f000 f882 	bl	8000738 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000634:	f002 fac8 	bl	8002bc8 <HAL_RCC_EnableCSS>
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	@ 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_TIM1_Init+0x98>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <MX_TIM1_Init+0x9c>)
 8000668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_TIM1_Init+0x98>)
 800066c:	2247      	movs	r2, #71	@ 0x47
 800066e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_TIM1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_TIM1_Init+0x98>)
 8000678:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800067c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_TIM1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_TIM1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_TIM1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000690:	4813      	ldr	r0, [pc, #76]	@ (80006e0 <MX_TIM1_Init+0x98>)
 8000692:	f002 fb92 	bl	8002dba <HAL_TIM_Base_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800069c:	f000 f84c 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	4619      	mov	r1, r3
 80006ac:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <MX_TIM1_Init+0x98>)
 80006ae:	f002 fcc3 	bl	8003038 <HAL_TIM_ConfigClockSource>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006b8:	f000 f83e 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_TIM1_Init+0x98>)
 80006ca:	f002 feeb 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006d4:	f000 f830 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000248 	.word	0x20000248
 80006e4:	40010000 	.word	0x40010000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000734 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <MX_GPIO_Init+0x4c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000758:	6453      	str	r3, [r2, #68]	@ 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_TIM_Base_MspInit+0x48>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d115      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2019      	movs	r0, #25
 80007c8:	f000 fa7b 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007cc:	2019      	movs	r0, #25
 80007ce:	f000 fa94 	bl	8000cfa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40010000 	.word	0x40010000
 80007e0:	40023800 	.word	0x40023800

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007e8:	f002 facc 	bl	8002d84 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <NMI_Handler+0x8>

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <UsageFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f921 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800084c:	4802      	ldr	r0, [pc, #8]	@ (8000858 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800084e:	f002 fb03 	bl	8002e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000248 	.word	0x20000248

0800085c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <OTG_FS_IRQHandler+0x10>)
 8000862:	f000 fd45 	bl	80012f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20001c3c 	.word	0x20001c3c

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f007 f857 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe45 	bl	8000554 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80008d8:	08007a58 	.word	0x08007a58
  ldr r2, =_sbss
 80008dc:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80008e0:	20002340 	.word	0x20002340

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>

080008e6 <fifo_is_empty>:
	f->tail = f->UserTail = 0;
	f->count = 0;
}

// Check if the FIFO is empty
int8_t fifo_is_empty(const fifo_T *f) {
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	return (f->count == 0);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	889b      	ldrh	r3, [r3, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	b25b      	sxtb	r3, r3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <fifo_enqueue>:

// Enqueue data into the FIFO (overwrite oldest element if full)
int16_t fifo_enqueue(fifo_T *f) {
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	f->head = (f->head + 1) % f->Fifo_Size; // Circular wrap-around
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	3301      	adds	r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	88d2      	ldrh	r2, [r2, #6]
 800091e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000922:	fb01 f202 	mul.w	r2, r1, r2
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	b21a      	sxth	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	801a      	strh	r2, [r3, #0]
	// Remainder = write index in the buffer
	f->UserHead = f->head;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	811a      	strh	r2, [r3, #8]
	if (f->count == f->Fifo_Size) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889a      	ldrh	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	88db      	ldrh	r3, [r3, #6]
 8000940:	429a      	cmp	r2, r3
 8000942:	d10e      	bne.n	8000962 <fifo_enqueue+0x58>
		// FIFO is full → Overwrite → Move tail forward
		f->tail = (f->tail + 1) % f->Fifo_Size;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800094a:	3301      	adds	r3, #1
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	88d2      	ldrh	r2, [r2, #6]
 8000950:	fb93 f1f2 	sdiv	r1, r3, r2
 8000954:	fb01 f202 	mul.w	r2, r1, r2
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	b21a      	sxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	805a      	strh	r2, [r3, #2]
 8000960:	e005      	b.n	800096e <fifo_enqueue+0x64>
	} else {
		f->count++;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	889b      	ldrh	r3, [r3, #4]
 8000966:	3301      	adds	r3, #1
 8000968:	b29a      	uxth	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	809a      	strh	r2, [r3, #4]
	}
	return f->UserHead;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <fifo_dequeue>:

// Dequeue data from the FIFO
int16_t fifo_dequeue(fifo_T *f) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(f)) {
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ffac 	bl	80008e6 <fifo_is_empty>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d119      	bne.n	80009c8 <fifo_dequeue+0x48>
		f->UserTail = f->tail;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	815a      	strh	r2, [r3, #10]
		f->count--;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	889b      	ldrh	r3, [r3, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	809a      	strh	r2, [r3, #4]
		f->tail = (f->tail + 1) % f->Fifo_Size; // Circular wrap-around
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009b0:	3301      	adds	r3, #1
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	88d2      	ldrh	r2, [r2, #6]
 80009b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80009ba:	fb01 f202 	mul.w	r2, r1, r2
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	805a      	strh	r2, [r3, #2]
 80009c6:	e003      	b.n	80009d0 <fifo_dequeue+0x50>
	} else {
		f->UserTail = -1; // FIFO is empty
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ce:	815a      	strh	r2, [r3, #10]
	}
	return f->UserTail;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <HAL_Init+0x40>)
 80009ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <HAL_Init+0x40>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_Init+0x40>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f94f 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe96 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f967 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f92f 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000030 	.word	0x20000030
 8000a7c:	20000038 	.word	0x20000038
 8000a80:	20000034 	.word	0x20000034

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000038 	.word	0x20000038
 8000aa8:	20000758 	.word	0x20000758

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000758 	.word	0x20000758

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffde 	bl	8000aac <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000038 	.word	0x20000038

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	@ (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	@ 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e16b      	b.n	8001024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 815a 	bne.w	800101e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80b4 	beq.w	800101e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b60      	ldr	r3, [pc, #384]	@ (800103c <HAL_GPIO_Init+0x30c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	4a5f      	ldr	r2, [pc, #380]	@ (800103c <HAL_GPIO_Init+0x30c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <HAL_GPIO_Init+0x30c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8001040 <HAL_GPIO_Init+0x310>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	@ (8001044 <HAL_GPIO_Init+0x314>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d02b      	beq.n	8000f56 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a51      	ldr	r2, [pc, #324]	@ (8001048 <HAL_GPIO_Init+0x318>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a50      	ldr	r2, [pc, #320]	@ (800104c <HAL_GPIO_Init+0x31c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	@ (8001050 <HAL_GPIO_Init+0x320>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	@ (8001054 <HAL_GPIO_Init+0x324>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	@ (8001058 <HAL_GPIO_Init+0x328>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	@ (800105c <HAL_GPIO_Init+0x32c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	@ (8001060 <HAL_GPIO_Init+0x330>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x20a>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00e      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e00c      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	e00a      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f42:	2305      	movs	r3, #5
 8000f44:	e008      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f46:	2304      	movs	r3, #4
 8000f48:	e006      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e004      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x228>
 8000f56:	2300      	movs	r3, #0
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	4093      	lsls	r3, r2
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f68:	4935      	ldr	r1, [pc, #212]	@ (8001040 <HAL_GPIO_Init+0x310>)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a32      	ldr	r2, [pc, #200]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a27      	ldr	r2, [pc, #156]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fee:	4a1d      	ldr	r2, [pc, #116]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001018:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <HAL_GPIO_Init+0x334>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3301      	adds	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f ae90 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40013800 	.word	0x40013800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40021400 	.word	0x40021400
 800105c:	40021800 	.word	0x40021800
 8001060:	40021c00 	.word	0x40021c00
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e101      	b.n	800127e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d106      	bne.n	800109a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f006 f951 	bl	800733c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2203      	movs	r2, #3
 800109e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a8:	d102      	bne.n	80010b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fb9c 	bl	80037f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7c1a      	ldrb	r2, [r3, #16]
 80010c2:	f88d 2000 	strb.w	r2, [sp]
 80010c6:	3304      	adds	r3, #4
 80010c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ca:	f002 fa7b 	bl	80035c4 <USB_CoreInit>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2202      	movs	r2, #2
 80010d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0ce      	b.n	800127e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fb94 	bl	8003814 <USB_SetCurrentMode>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0bf      	b.n	800127e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e04a      	b.n	800119a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	3315      	adds	r3, #21
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3314      	adds	r3, #20
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	b298      	uxth	r0, r3
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	332e      	adds	r3, #46	@ 0x2e
 8001140:	4602      	mov	r2, r0
 8001142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3318      	adds	r3, #24
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	331c      	adds	r3, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3320      	adds	r3, #32
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3324      	adds	r3, #36	@ 0x24
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3af      	bcc.n	8001104 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e044      	b.n	8001234 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	3301      	adds	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	429a      	cmp	r2, r3
 800123c:	d3b5      	bcc.n	80011aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7c1a      	ldrb	r2, [r3, #16]
 8001246:	f88d 2000 	strb.w	r2, [sp]
 800124a:	3304      	adds	r3, #4
 800124c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800124e:	f002 fb2d 	bl	80038ac <USB_DevInit>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e00c      	b.n	800127e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fb77 	bl	800496a <USB_DevDisconnect>

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_PCD_Start+0x1c>
 800129e:	2302      	movs	r3, #2
 80012a0:	e022      	b.n	80012e8 <HAL_PCD_Start+0x62>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fa7e 	bl	80037d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fb25 	bl	8004928 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b08d      	sub	sp, #52	@ 0x34
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fbe3 	bl	8004ad2 <USB_GetMode>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 848c 	bne.w	8001c2c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fb47 	bl	80049ac <USB_ReadInterrupts>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8482 	beq.w	8001c2a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fb34 	bl	80049ac <USB_ReadInterrupts>
 8001344:	4603      	mov	r3, r0
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d107      	bne.n	800135e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f002 0202 	and.w	r2, r2, #2
 800135c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fb22 	bl	80049ac <USB_ReadInterrupts>
 8001368:	4603      	mov	r3, r0
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b10      	cmp	r3, #16
 8001370:	d161      	bne.n	8001436 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0210 	bic.w	r2, r2, #16
 8001380:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f003 020f 	and.w	r2, r3, #15
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	3304      	adds	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013ac:	d124      	bne.n	80013f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d035      	beq.n	8001426 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	6a38      	ldr	r0, [r7, #32]
 80013ce:	f003 f959 	bl	8004684 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013de:	441a      	add	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	e016      	b.n	8001426 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001402:	d110      	bne.n	8001426 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800140a:	2208      	movs	r2, #8
 800140c:	4619      	mov	r1, r3
 800140e:	6a38      	ldr	r0, [r7, #32]
 8001410:	f003 f938 	bl	8004684 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001420:	441a      	add	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0210 	orr.w	r2, r2, #16
 8001434:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fab6 	bl	80049ac <USB_ReadInterrupts>
 8001440:	4603      	mov	r3, r0
 8001442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001446:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800144a:	f040 80a7 	bne.w	800159c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fabb 	bl	80049d2 <USB_ReadDevAllOutEpInterrupt>
 800145c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800145e:	e099      	b.n	8001594 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 808e 	beq.w	8001588 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fadf 	bl	8004a3a <USB_ReadDevOutEPInterrupt>
 800147c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001494:	461a      	mov	r2, r3
 8001496:	2301      	movs	r3, #1
 8001498:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800149a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fea3 	bl	80021e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014b8:	461a      	mov	r2, r3
 80014ba:	2308      	movs	r3, #8
 80014bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 ff79 	bl	80023b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014dc:	461a      	mov	r2, r3
 80014de:	2310      	movs	r3, #16
 80014e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d030      	beq.n	800154e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f4:	2b80      	cmp	r3, #128	@ 0x80
 80014f6:	d109      	bne.n	800150c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800150c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	3304      	adds	r3, #4
 8001520:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	78db      	ldrb	r3, [r3, #3]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f006 f806 	bl	8007548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001548:	461a      	mov	r2, r3
 800154a:	2302      	movs	r3, #2
 800154c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001564:	461a      	mov	r2, r3
 8001566:	2320      	movs	r3, #32
 8001568:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d009      	beq.n	8001588 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001580:	461a      	mov	r2, r3
 8001582:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001586:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	3301      	adds	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001596:	2b00      	cmp	r3, #0
 8001598:	f47f af62 	bne.w	8001460 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fa03 	bl	80049ac <USB_ReadInterrupts>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015b0:	f040 80db 	bne.w	800176a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fa24 	bl	8004a06 <USB_ReadDevAllInEpInterrupt>
 80015be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015c4:	e0cd      	b.n	8001762 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80c2 	beq.w	8001756 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fa4a 	bl	8004a76 <USB_ReadDevInEPInterrupt>
 80015e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d057      	beq.n	800169e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	2201      	movs	r2, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	69f9      	ldr	r1, [r7, #28]
 800160a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800160e:	4013      	ands	r3, r2
 8001610:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800161e:	461a      	mov	r2, r3
 8001620:	2301      	movs	r3, #1
 8001622:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	799b      	ldrb	r3, [r3, #6]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d132      	bne.n	8001692 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3320      	adds	r3, #32
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4403      	add	r3, r0
 800164c:	331c      	adds	r3, #28
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4419      	add	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4403      	add	r3, r0
 8001660:	3320      	adds	r3, #32
 8001662:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001666:	2b00      	cmp	r3, #0
 8001668:	d113      	bne.n	8001692 <HAL_PCD_IRQHandler+0x3a2>
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3324      	adds	r3, #36	@ 0x24
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800168a:	461a      	mov	r2, r3
 800168c:	2101      	movs	r1, #1
 800168e:	f003 fa51 	bl	8004b34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f005 fed0 	bl	800743e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2308      	movs	r3, #8
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016d0:	461a      	mov	r2, r3
 80016d2:	2310      	movs	r3, #16
 80016d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ec:	461a      	mov	r2, r3
 80016ee:	2340      	movs	r3, #64	@ 0x40
 80016f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016fe:	6a38      	ldr	r0, [r7, #32]
 8001700:	f002 fa38 	bl	8003b74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	3310      	adds	r3, #16
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	3304      	adds	r3, #4
 8001716:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2200      	movs	r2, #0
 8001724:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4619      	mov	r1, r3
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f005 ff1d 	bl	800756c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800173e:	461a      	mov	r2, r3
 8001740:	2302      	movs	r3, #2
 8001742:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800174e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fcbd 	bl	80020d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	3301      	adds	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f af2e 	bne.w	80015c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f91c 	bl	80049ac <USB_ReadInterrupts>
 8001774:	4603      	mov	r3, r0
 8001776:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800177a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800177e:	d122      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017a6:	2100      	movs	r1, #0
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fea3 	bl	80024f4 <HAL_PCDEx_LPM_Callback>
 80017ae:	e002      	b.n	80017b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f005 febb 	bl	800752c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 f8ee 	bl	80049ac <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017da:	d112      	bne.n	8001802 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d102      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f005 fe77 	bl	80074e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001800:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 f8d0 	bl	80049ac <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001816:	f040 80b7 	bne.w	8001988 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2110      	movs	r1, #16
 8001834:	4618      	mov	r0, r3
 8001836:	f002 f99d 	bl	8003b74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800183e:	e046      	b.n	80018ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800184c:	461a      	mov	r2, r3
 800184e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001852:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001864:	0151      	lsls	r1, r2, #5
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	440a      	add	r2, r1
 800186a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800186e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001872:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001880:	461a      	mov	r2, r3
 8001882:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001886:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001898:	0151      	lsls	r1, r2, #5
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	440a      	add	r2, r1
 800189e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b8:	0151      	lsls	r1, r2, #5
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	440a      	add	r2, r1
 80018be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	3301      	adds	r3, #1
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d3b2      	bcc.n	8001840 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7bdb      	ldrb	r3, [r3, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001906:	f043 030b 	orr.w	r3, r3, #11
 800190a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800191c:	f043 030b 	orr.w	r3, r3, #11
 8001920:	6453      	str	r3, [r2, #68]	@ 0x44
 8001922:	e015      	b.n	8001950 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001932:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001936:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800193a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800194a:	f043 030b 	orr.w	r3, r3, #11
 800194e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001962:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001972:	461a      	mov	r2, r3
 8001974:	f003 f8de 	bl	8004b34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f80d 	bl	80049ac <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800199c:	d123      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f8a3 	bl	8004aee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 f95a 	bl	8003c66 <USB_GetDevSpeed>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	f001 f9d5 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 80019c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c8:	461a      	mov	r2, r3
 80019ca:	4620      	mov	r0, r4
 80019cc:	f001 fe5e 	bl	800368c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f005 fd5c 	bl	800748e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 ffde 	bl	80049ac <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d10a      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f005 fd39 	bl	8007472 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f002 0208 	and.w	r2, r2, #8
 8001a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 ffc9 	bl	80049ac <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a20:	2b80      	cmp	r3, #128	@ 0x80
 8001a22:	d123      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a34:	e014      	b.n	8001a60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 fb0a 	bl	800206e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	791b      	ldrb	r3, [r3, #4]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d3e4      	bcc.n	8001a36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 ff9b 	bl	80049ac <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a80:	d13c      	bne.n	8001afc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	e02b      	b.n	8001ae0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d115      	bne.n	8001ada <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001aae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da12      	bge.n	8001ada <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3317      	adds	r3, #23
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 faca 	bl	800206e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	3301      	adds	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d3cd      	bcc.n	8001a88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 ff53 	bl	80049ac <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b10:	d156      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b16:	e045      	b.n	8001ba4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d12e      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da2b      	bge.n	8001b9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d121      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b9a:	6053      	str	r3, [r2, #4]
            break;
 8001b9c:	e008      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	791b      	ldrb	r3, [r3, #4]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d3b3      	bcc.n	8001b18 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fef1 	bl	80049ac <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd4:	d10a      	bne.n	8001bec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f005 fcda 	bl	8007590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fedb 	bl	80049ac <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d115      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f005 fcca 	bl	80075ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	e000      	b.n	8001c2c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c2a:	bf00      	nop
    }
  }
}
 8001c2c:	3734      	adds	r7, #52	@ 0x34
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}

08001c32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_SetAddress+0x1a>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e012      	b.n	8001c72 <HAL_PCD_SetAddress+0x40>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fe3a 	bl	80048dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	4608      	mov	r0, r1
 8001c84:	4611      	mov	r1, r2
 8001c86:	461a      	mov	r2, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	70fb      	strb	r3, [r7, #3]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	803b      	strh	r3, [r7, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da0f      	bge.n	8001cc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	3310      	adds	r3, #16
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	705a      	strb	r2, [r3, #1]
 8001cbe:	e00f      	b.n	8001ce0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	f003 020f 	and.w	r2, r3, #15
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001cec:	883b      	ldrh	r3, [r7, #0]
 8001cee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	78ba      	ldrb	r2, [r7, #2]
 8001cfa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d0e:	78bb      	ldrb	r3, [r7, #2]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_EP_Open+0xae>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e00e      	b.n	8001d46 <HAL_PCD_EP_Open+0xcc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 ffba 	bl	8003cb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d44:	7afb      	ldrb	r3, [r7, #11]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da0f      	bge.n	8001d82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	3310      	adds	r3, #16
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00f      	b.n	8001da2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 020f 	and.w	r2, r3, #15
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_PCD_EP_Close+0x6e>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e00e      	b.n	8001dda <HAL_PCD_EP_Close+0x8c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 fff8 	bl	8003dc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	460b      	mov	r3, r1
 8001df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	f003 020f 	and.w	r2, r3, #15
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2200      	movs	r2, #0
 8001e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	799b      	ldrb	r3, [r3, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	799b      	ldrb	r3, [r3, #6]
 8001e46:	461a      	mov	r2, r3
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	f002 f895 	bl	8003f78 <USB_EPStartXfer>

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 020f 	and.w	r2, r3, #15
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	799b      	ldrb	r3, [r3, #6]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	799b      	ldrb	r3, [r3, #6]
 8001eea:	461a      	mov	r2, r3
 8001eec:	6979      	ldr	r1, [r7, #20]
 8001eee:	f002 f843 	bl	8003f78 <USB_EPStartXfer>

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	7912      	ldrb	r2, [r2, #4]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e04f      	b.n	8001fba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0f      	bge.n	8001f42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3310      	adds	r3, #16
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00d      	b.n	8001f5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_EP_SetStall+0x82>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e01d      	b.n	8001fba <HAL_PCD_EP_SetStall+0xbe>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fbd1 	bl	8004734 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7999      	ldrb	r1, [r3, #6]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001faa:	461a      	mov	r2, r3
 8001fac:	f002 fdc2 	bl	8004b34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	7912      	ldrb	r2, [r2, #4]
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e042      	b.n	8002066 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	da0f      	bge.n	8002008 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	3310      	adds	r3, #16
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	705a      	strb	r2, [r3, #1]
 8002006:	e00f      	b.n	8002028 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_PCD_EP_ClrStall+0x86>
 8002044:	2302      	movs	r3, #2
 8002046:	e00e      	b.n	8002066 <HAL_PCD_EP_ClrStall+0xa4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fbda 	bl	8004810 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800207a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	da0c      	bge.n	800209c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 020f 	and.w	r2, r3, #15
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	3310      	adds	r3, #16
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e00c      	b.n	80020b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 f9f9 	bl	80044b4 <USB_EPStopXfer>
 80020c2:	4603      	mov	r3, r0
 80020c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020c6:	7afb      	ldrb	r3, [r7, #11]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	3310      	adds	r3, #16
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d901      	bls.n	8002108 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e06b      	b.n	80021e0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	429a      	cmp	r2, r3
 800211c:	d902      	bls.n	8002124 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3303      	adds	r3, #3
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800212c:	e02a      	b.n	8002184 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	429a      	cmp	r2, r3
 8002142:	d902      	bls.n	800214a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3303      	adds	r3, #3
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68d9      	ldr	r1, [r3, #12]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4603      	mov	r3, r0
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f002 fa4e 	bl	8004608 <USB_WritePacket>

    ep->xfer_buff  += len;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	441a      	add	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	441a      	add	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	429a      	cmp	r2, r3
 8002198:	d809      	bhi.n	80021ae <PCD_WriteEmptyTxFifo+0xde>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d203      	bcs.n	80021ae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1bf      	bne.n	800212e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d811      	bhi.n	80021de <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	2201      	movs	r2, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021da:	4013      	ands	r3, r2
 80021dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	333c      	adds	r3, #60	@ 0x3c
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	799b      	ldrb	r3, [r3, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d17b      	bne.n	8002316 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d015      	beq.n	8002254 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4a61      	ldr	r2, [pc, #388]	@ (80023b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	f240 80b9 	bls.w	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80b3 	beq.w	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800224a:	461a      	mov	r2, r3
 800224c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002250:	6093      	str	r3, [r2, #8]
 8002252:	e0a7      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226a:	461a      	mov	r2, r3
 800226c:	2320      	movs	r3, #32
 800226e:	6093      	str	r3, [r2, #8]
 8002270:	e098      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 8093 	bne.w	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4a4b      	ldr	r2, [pc, #300]	@ (80023b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d90f      	bls.n	80022a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022a2:	6093      	str	r3, [r2, #8]
 80022a4:	e07e      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	0159      	lsls	r1, r3, #5
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d114      	bne.n	8002308 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022f0:	461a      	mov	r2, r3
 80022f2:	2101      	movs	r1, #1
 80022f4:	f002 fc1e 	bl	8004b34 <USB_EP0_OutStart>
 80022f8:	e006      	b.n	8002308 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	441a      	add	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 f87a 	bl	8007408 <HAL_PCD_DataOutStageCallback>
 8002314:	e046      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d124      	bne.n	8002368 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800233a:	6093      	str	r3, [r2, #8]
 800233c:	e032      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	2320      	movs	r3, #32
 8002358:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 f851 	bl	8007408 <HAL_PCD_DataOutStageCallback>
 8002366:	e01d      	b.n	80023a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <PCD_EP_OutXfrComplete_int+0x1b0>
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002390:	461a      	mov	r2, r3
 8002392:	2100      	movs	r1, #0
 8002394:	f002 fbce 	bl	8004b34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f005 f832 	bl	8007408 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	4f54300a 	.word	0x4f54300a
 80023b4:	4f54310a 	.word	0x4f54310a

080023b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	333c      	adds	r3, #60	@ 0x3c
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d90e      	bls.n	800240c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002404:	461a      	mov	r2, r3
 8002406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800240a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f004 ffe9 	bl	80073e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <PCD_EP_OutSetupPacket_int+0x88>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d90c      	bls.n	8002434 <PCD_EP_OutSetupPacket_int+0x7c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	799b      	ldrb	r3, [r3, #6]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d108      	bne.n	8002434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800242c:	461a      	mov	r2, r3
 800242e:	2101      	movs	r1, #1
 8002430:	f002 fb80 	bl	8004b34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	4f54300a 	.word	0x4f54300a

08002444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
 8002450:	4613      	mov	r3, r2
 8002452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	0419      	lsls	r1, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	430a      	orrs	r2, r1
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002470:	e028      	b.n	80024c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4413      	add	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e00d      	b.n	80024a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	3340      	adds	r3, #64	@ 0x40
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4413      	add	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3301      	adds	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d3ec      	bcc.n	8002486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ac:	883b      	ldrh	r3, [r7, #0]
 80024ae:	0418      	lsls	r0, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	4302      	orrs	r2, r0
 80024bc:	3340      	adds	r3, #64	@ 0x40
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e267      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d075      	beq.n	8002616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800252a:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d00c      	beq.n	8002550 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b85      	ldr	r3, [pc, #532]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253e:	2b08      	cmp	r3, #8
 8002540:	d112      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002542:	4b82      	ldr	r3, [pc, #520]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	4b7e      	ldr	r3, [pc, #504]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05b      	beq.n	8002614 <HAL_RCC_OscConfig+0x108>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d157      	bne.n	8002614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e242      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
 8002572:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a75      	ldr	r2, [pc, #468]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b70      	ldr	r3, [pc, #448]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6f      	ldr	r2, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6c      	ldr	r2, [pc, #432]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 80025a4:	4b69      	ldr	r3, [pc, #420]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a68      	ldr	r2, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a65      	ldr	r2, [pc, #404]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fa72 	bl	8000aac <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fa6e 	bl	8000aac <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e207      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xc0>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fa5e 	bl	8000aac <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fa5a 	bl	8000aac <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1f3      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b51      	ldr	r3, [pc, #324]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0xe8>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002622:	4b4a      	ldr	r3, [pc, #296]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263a:	4b44      	ldr	r3, [pc, #272]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1c7      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4937      	ldr	r1, [pc, #220]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <HAL_RCC_OscConfig+0x244>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fa13 	bl	8000aac <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fa0f 	bl	8000aac <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1a8      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4925      	ldr	r1, [pc, #148]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <HAL_RCC_OscConfig+0x244>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe f9f2 	bl	8000aac <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe f9ee 	bl	8000aac <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e187      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d036      	beq.n	8002764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_RCC_OscConfig+0x248>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe f9d2 	bl	8000aac <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe f9ce 	bl	8000aac <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e167      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_OscConfig+0x240>)
 8002720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
 800272a:	e01b      	b.n	8002764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_OscConfig+0x248>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe f9bb 	bl	8000aac <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	e00e      	b.n	8002758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe f9b7 	bl	8000aac <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d907      	bls.n	8002758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e150      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
 800274c:	40023800 	.word	0x40023800
 8002750:	42470000 	.word	0x42470000
 8002754:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800275a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ea      	bne.n	800273a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8097 	beq.w	80028a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b81      	ldr	r3, [pc, #516]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b7d      	ldr	r3, [pc, #500]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a7c      	ldr	r2, [pc, #496]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b7a      	ldr	r3, [pc, #488]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b77      	ldr	r3, [pc, #476]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b74      	ldr	r3, [pc, #464]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a73      	ldr	r2, [pc, #460]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe f977 	bl	8000aac <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe f973 	bl	8000aac <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e10c      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002980 <HAL_RCC_OscConfig+0x474>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2ea>
 80027e8:	4b64      	ldr	r3, [pc, #400]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a63      	ldr	r2, [pc, #396]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x324>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x30c>
 80027fe:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	4a5e      	ldr	r2, [pc, #376]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	@ 0x70
 800280a:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a5b      	ldr	r2, [pc, #364]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x324>
 8002818:	4b58      	ldr	r3, [pc, #352]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	4a57      	ldr	r2, [pc, #348]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	@ 0x70
 8002824:	4b55      	ldr	r3, [pc, #340]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	4a54      	ldr	r2, [pc, #336]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe f938 	bl	8000aac <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe f934 	bl	8000aac <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e0cb      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b49      	ldr	r3, [pc, #292]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe f922 	bl	8000aac <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe f91e 	bl	8000aac <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b5      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	4b3e      	ldr	r3, [pc, #248]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b39      	ldr	r3, [pc, #228]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	4a38      	ldr	r2, [pc, #224]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a1 	beq.w	80029ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028aa:	4b34      	ldr	r3, [pc, #208]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d05c      	beq.n	8002970 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d141      	bne.n	8002942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe f8f2 	bl	8000aac <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe f8ee 	bl	8000aac <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e087      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	491b      	ldr	r1, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe f8c7 	bl	8000aac <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe f8c3 	bl	8000aac <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e05c      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x416>
 8002940:	e054      	b.n	80029ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCC_OscConfig+0x478>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe f8b0 	bl	8000aac <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe f8ac 	bl	8000aac <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e045      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_OscConfig+0x470>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x444>
 800296e:	e03d      	b.n	80029ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e038      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
 8002984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x4ec>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d028      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d121      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11a      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	3b01      	subs	r3, #1
 80029d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cc      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b68      	ldr	r3, [pc, #416]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d90c      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b65      	ldr	r3, [pc, #404]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a58      	ldr	r2, [pc, #352]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	494d      	ldr	r1, [pc, #308]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d044      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d003      	beq.n	8002aba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e067      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b37      	ldr	r3, [pc, #220]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4934      	ldr	r1, [pc, #208]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fd ffde 	bl	8000aac <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fd ffda 	bl	8000aac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e04f      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d20c      	bcs.n	8002b44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e032      	b.n	8002baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4916      	ldr	r1, [pc, #88]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6e:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b82:	f000 f82d 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	490a      	ldr	r1, [pc, #40]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	5ccb      	ldrb	r3, [r1, r3]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd ff3e 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	08007a38 	.word	0x08007a38
 8002bc0:	20000030 	.word	0x20000030
 8002bc4:	20000034 	.word	0x20000034

08002bc8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	@ (8002bdc <HAL_RCC_EnableCSS+0x14>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	4247004c 	.word	0x4247004c

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be4:	b090      	sub	sp, #64	@ 0x40
 8002be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf8:	4b59      	ldr	r3, [pc, #356]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d00d      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x40>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	f200 80a1 	bhi.w	8002d4c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c12:	e09b      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b53      	ldr	r3, [pc, #332]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c18:	e09b      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1a:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c1e:	e098      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c20:	4b4f      	ldr	r3, [pc, #316]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d028      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c4c:	fb03 f201 	mul.w	r2, r3, r1
 8002c50:	2300      	movs	r3, #0
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	4a43      	ldr	r2, [pc, #268]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c60:	460a      	mov	r2, r1
 8002c62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c66:	4413      	add	r3, r2
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	61fa      	str	r2, [r7, #28]
 8002c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c7a:	f7fd faa5 	bl	80001c8 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4613      	mov	r3, r2
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c86:	e053      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c88:	4b35      	ldr	r3, [pc, #212]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	2200      	movs	r2, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	617a      	str	r2, [r7, #20]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c9a:	f04f 0b00 	mov.w	fp, #0
 8002c9e:	4652      	mov	r2, sl
 8002ca0:	465b      	mov	r3, fp
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	0159      	lsls	r1, r3, #5
 8002cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb0:	0150      	lsls	r0, r2, #5
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	ebb2 080a 	subs.w	r8, r2, sl
 8002cba:	eb63 090b 	sbc.w	r9, r3, fp
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002cd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	00eb      	lsls	r3, r5, #3
 8002ce4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce8:	00e2      	lsls	r2, r4, #3
 8002cea:	4614      	mov	r4, r2
 8002cec:	461d      	mov	r5, r3
 8002cee:	eb14 030a 	adds.w	r3, r4, sl
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	eb45 030b 	adc.w	r3, r5, fp
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d06:	4629      	mov	r1, r5
 8002d08:	028b      	lsls	r3, r1, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d10:	4621      	mov	r1, r4
 8002d12:	028a      	lsls	r2, r1, #10
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	60fa      	str	r2, [r7, #12]
 8002d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d24:	f7fd fa50 	bl	80001c8 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3740      	adds	r7, #64	@ 0x40
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	017d7840 	.word	0x017d7840

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000030 	.word	0x20000030

08002d84 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d90:	2b80      	cmp	r3, #128	@ 0x80
 8002d92:	d104      	bne.n	8002d9e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002d94:	f000 f80a 	bl	8002dac <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	701a      	strb	r2, [r3, #0]
  }
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	4002380e 	.word	0x4002380e

08002dac <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e041      	b.n	8002e50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fd fcd7 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f000 fa0d 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d020      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0202 	mvn.w	r2, #2
 8002e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f999 	bl	80031da <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f98b 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f99c 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d020      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0204 	mvn.w	r2, #4
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f973 	bl	80031da <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f965 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f976 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0208 	mvn.w	r2, #8
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f94d 	bl	80031da <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f93f 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f950 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d020      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0210 	mvn.w	r2, #16
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2208      	movs	r2, #8
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f927 	bl	80031da <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f919 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f92a 	bl	80031ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0201 	mvn.w	r2, #1
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fab2 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fae4 	bl	80035b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8fb 	bl	8003202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0220 	mvn.w	r2, #32
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fab6 	bl	800359c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_TIM_ConfigClockSource+0x1c>
 8003050:	2302      	movs	r3, #2
 8003052:	e0b4      	b.n	80031be <HAL_TIM_ConfigClockSource+0x186>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800307a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800308c:	d03e      	beq.n	800310c <HAL_TIM_ConfigClockSource+0xd4>
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003092:	f200 8087 	bhi.w	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800309a:	f000 8086 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x172>
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030a2:	d87f      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b70      	cmp	r3, #112	@ 0x70
 80030a6:	d01a      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xa6>
 80030a8:	2b70      	cmp	r3, #112	@ 0x70
 80030aa:	d87b      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b60      	cmp	r3, #96	@ 0x60
 80030ae:	d050      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x11a>
 80030b0:	2b60      	cmp	r3, #96	@ 0x60
 80030b2:	d877      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b50      	cmp	r3, #80	@ 0x50
 80030b6:	d03c      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xfa>
 80030b8:	2b50      	cmp	r3, #80	@ 0x50
 80030ba:	d873      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b40      	cmp	r3, #64	@ 0x40
 80030be:	d058      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x13a>
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	d86f      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b30      	cmp	r3, #48	@ 0x30
 80030c6:	d064      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	2b30      	cmp	r3, #48	@ 0x30
 80030ca:	d86b      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d060      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d867      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05c      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d05a      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030dc:	e062      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ee:	f000 f9b9 	bl	8003464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	609a      	str	r2, [r3, #8]
      break;
 800310a:	e04f      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	f000 f9a2 	bl	8003464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800312e:	609a      	str	r2, [r3, #8]
      break;
 8003130:	e03c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313e:	461a      	mov	r2, r3
 8003140:	f000 f916 	bl	8003370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2150      	movs	r1, #80	@ 0x50
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f96f 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 8003150:	e02c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315e:	461a      	mov	r2, r3
 8003160:	f000 f935 	bl	80033ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2160      	movs	r1, #96	@ 0x60
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f95f 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 8003170:	e01c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317e:	461a      	mov	r2, r3
 8003180:	f000 f8f6 	bl	8003370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2140      	movs	r1, #64	@ 0x40
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f94f 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 8003190:	e00c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f000 f946 	bl	800342e <TIM_ITRx_SetConfig>
      break;
 80031a2:	e003      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      break;
 80031a8:	e000      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a46      	ldr	r2, [pc, #280]	@ (8003344 <TIM_Base_SetConfig+0x12c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003236:	d00f      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a43      	ldr	r2, [pc, #268]	@ (8003348 <TIM_Base_SetConfig+0x130>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00b      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a42      	ldr	r2, [pc, #264]	@ (800334c <TIM_Base_SetConfig+0x134>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d007      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a41      	ldr	r2, [pc, #260]	@ (8003350 <TIM_Base_SetConfig+0x138>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d003      	beq.n	8003258 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a40      	ldr	r2, [pc, #256]	@ (8003354 <TIM_Base_SetConfig+0x13c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d108      	bne.n	800326a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800325e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a35      	ldr	r2, [pc, #212]	@ (8003344 <TIM_Base_SetConfig+0x12c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02b      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003278:	d027      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <TIM_Base_SetConfig+0x130>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d023      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a31      	ldr	r2, [pc, #196]	@ (800334c <TIM_Base_SetConfig+0x134>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a30      	ldr	r2, [pc, #192]	@ (8003350 <TIM_Base_SetConfig+0x138>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01b      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2f      	ldr	r2, [pc, #188]	@ (8003354 <TIM_Base_SetConfig+0x13c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d017      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2e      	ldr	r2, [pc, #184]	@ (8003358 <TIM_Base_SetConfig+0x140>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <TIM_Base_SetConfig+0x144>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <TIM_Base_SetConfig+0x148>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <TIM_Base_SetConfig+0x14c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003368 <TIM_Base_SetConfig+0x150>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a29      	ldr	r2, [pc, #164]	@ (800336c <TIM_Base_SetConfig+0x154>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a10      	ldr	r2, [pc, #64]	@ (8003344 <TIM_Base_SetConfig+0x12c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0xf8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a12      	ldr	r2, [pc, #72]	@ (8003354 <TIM_Base_SetConfig+0x13c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]
  }
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40010400 	.word	0x40010400
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800
 8003364:	40001800 	.word	0x40001800
 8003368:	40001c00 	.word	0x40001c00
 800336c:	40002000 	.word	0x40002000

08003370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 030a 	bic.w	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 0210 	bic.w	r2, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	031b      	lsls	r3, r3, #12
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800340a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	f043 0307 	orr.w	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800347e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	431a      	orrs	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4313      	orrs	r3, r2
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e05a      	b.n	8003572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d022      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003508:	d01d      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d018      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1a      	ldr	r2, [pc, #104]	@ (800358c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00e      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10c      	bne.n	8003560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800354c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	4313      	orrs	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40010400 	.word	0x40010400
 8003594:	40014000 	.word	0x40014000
 8003598:	40001800 	.word	0x40001800

0800359c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035c4:	b084      	sub	sp, #16
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	f107 001c 	add.w	r0, r7, #28
 80035d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d123      	bne.n	8003626 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80035f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800360a:	2b01      	cmp	r3, #1
 800360c:	d105      	bne.n	800361a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f001 fae8 	bl	8004bf0 <USB_CoreReset>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	e01b      	b.n	800365e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f001 fadc 	bl	8004bf0 <USB_CoreReset>
 8003638:	4603      	mov	r3, r0
 800363a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800363c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003650:	e005      	b.n	800365e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800365e:	7fbb      	ldrb	r3, [r7, #30]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10b      	bne.n	800367c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f043 0206 	orr.w	r2, r3, #6
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003688:	b004      	add	sp, #16
 800368a:	4770      	bx	lr

0800368c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d165      	bne.n	800376c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4a41      	ldr	r2, [pc, #260]	@ (80037a8 <USB_SetTurnaroundTime+0x11c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d906      	bls.n	80036b6 <USB_SetTurnaroundTime+0x2a>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4a40      	ldr	r2, [pc, #256]	@ (80037ac <USB_SetTurnaroundTime+0x120>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d202      	bcs.n	80036b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036b0:	230f      	movs	r3, #15
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e062      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4a3c      	ldr	r2, [pc, #240]	@ (80037ac <USB_SetTurnaroundTime+0x120>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d306      	bcc.n	80036cc <USB_SetTurnaroundTime+0x40>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4a3b      	ldr	r2, [pc, #236]	@ (80037b0 <USB_SetTurnaroundTime+0x124>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d202      	bcs.n	80036cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036c6:	230e      	movs	r3, #14
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e057      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4a38      	ldr	r2, [pc, #224]	@ (80037b0 <USB_SetTurnaroundTime+0x124>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d306      	bcc.n	80036e2 <USB_SetTurnaroundTime+0x56>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4a37      	ldr	r2, [pc, #220]	@ (80037b4 <USB_SetTurnaroundTime+0x128>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d202      	bcs.n	80036e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036dc:	230d      	movs	r3, #13
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e04c      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4a33      	ldr	r2, [pc, #204]	@ (80037b4 <USB_SetTurnaroundTime+0x128>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d306      	bcc.n	80036f8 <USB_SetTurnaroundTime+0x6c>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4a32      	ldr	r2, [pc, #200]	@ (80037b8 <USB_SetTurnaroundTime+0x12c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d802      	bhi.n	80036f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036f2:	230c      	movs	r3, #12
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e041      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a2f      	ldr	r2, [pc, #188]	@ (80037b8 <USB_SetTurnaroundTime+0x12c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d906      	bls.n	800370e <USB_SetTurnaroundTime+0x82>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4a2e      	ldr	r2, [pc, #184]	@ (80037bc <USB_SetTurnaroundTime+0x130>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d802      	bhi.n	800370e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003708:	230b      	movs	r3, #11
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e036      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <USB_SetTurnaroundTime+0x130>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d906      	bls.n	8003724 <USB_SetTurnaroundTime+0x98>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4a29      	ldr	r2, [pc, #164]	@ (80037c0 <USB_SetTurnaroundTime+0x134>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d802      	bhi.n	8003724 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800371e:	230a      	movs	r3, #10
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e02b      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4a26      	ldr	r2, [pc, #152]	@ (80037c0 <USB_SetTurnaroundTime+0x134>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d906      	bls.n	800373a <USB_SetTurnaroundTime+0xae>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a25      	ldr	r2, [pc, #148]	@ (80037c4 <USB_SetTurnaroundTime+0x138>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d202      	bcs.n	800373a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003734:	2309      	movs	r3, #9
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e020      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4a21      	ldr	r2, [pc, #132]	@ (80037c4 <USB_SetTurnaroundTime+0x138>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d306      	bcc.n	8003750 <USB_SetTurnaroundTime+0xc4>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a20      	ldr	r2, [pc, #128]	@ (80037c8 <USB_SetTurnaroundTime+0x13c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d802      	bhi.n	8003750 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800374a:	2308      	movs	r3, #8
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e015      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <USB_SetTurnaroundTime+0x13c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d906      	bls.n	8003766 <USB_SetTurnaroundTime+0xda>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4a1c      	ldr	r2, [pc, #112]	@ (80037cc <USB_SetTurnaroundTime+0x140>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d202      	bcs.n	8003766 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003760:	2307      	movs	r3, #7
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e00a      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003766:	2306      	movs	r3, #6
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e007      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003772:	2309      	movs	r3, #9
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e001      	b.n	800377c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003778:	2309      	movs	r3, #9
 800377a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	029b      	lsls	r3, r3, #10
 8003790:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	00d8acbf 	.word	0x00d8acbf
 80037ac:	00e4e1c0 	.word	0x00e4e1c0
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	01067380 	.word	0x01067380
 80037b8:	011a499f 	.word	0x011a499f
 80037bc:	01312cff 	.word	0x01312cff
 80037c0:	014ca43f 	.word	0x014ca43f
 80037c4:	016e3600 	.word	0x016e3600
 80037c8:	01a6ab1f 	.word	0x01a6ab1f
 80037cc:	01e84800 	.word	0x01e84800

080037d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0201 	bic.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d115      	bne.n	8003862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003842:	200a      	movs	r0, #10
 8003844:	f7fd f93e 	bl	8000ac4 <HAL_Delay>
      ms += 10U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	330a      	adds	r3, #10
 800384c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f001 f93f 	bl	8004ad2 <USB_GetMode>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d01e      	beq.n	8003898 <USB_SetCurrentMode+0x84>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2bc7      	cmp	r3, #199	@ 0xc7
 800385e:	d9f0      	bls.n	8003842 <USB_SetCurrentMode+0x2e>
 8003860:	e01a      	b.n	8003898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003874:	200a      	movs	r0, #10
 8003876:	f7fd f925 	bl	8000ac4 <HAL_Delay>
      ms += 10U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	330a      	adds	r3, #10
 800387e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 f926 	bl	8004ad2 <USB_GetMode>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <USB_SetCurrentMode+0x84>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003890:	d9f0      	bls.n	8003874 <USB_SetCurrentMode+0x60>
 8003892:	e001      	b.n	8003898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e005      	b.n	80038a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2bc8      	cmp	r3, #200	@ 0xc8
 800389c:	d101      	bne.n	80038a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038ac:	b084      	sub	sp, #16
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e009      	b.n	80038e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3340      	adds	r3, #64	@ 0x40
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3301      	adds	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0e      	cmp	r3, #14
 80038e4:	d9f2      	bls.n	80038cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11c      	bne.n	8003928 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003912:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	639a      	str	r2, [r3, #56]	@ 0x38
 8003926:	e00b      	b.n	8003940 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003946:	461a      	mov	r2, r3
 8003948:	2300      	movs	r3, #0
 800394a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800394c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10d      	bne.n	8003970 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800395c:	2100      	movs	r1, #0
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f968 	bl	8003c34 <USB_SetDevSpeed>
 8003964:	e008      	b.n	8003978 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003966:	2101      	movs	r1, #1
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f963 	bl	8003c34 <USB_SetDevSpeed>
 800396e:	e003      	b.n	8003978 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003970:	2103      	movs	r1, #3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f95e 	bl	8003c34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003978:	2110      	movs	r1, #16
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8fa 	bl	8003b74 <USB_FlushTxFifo>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f924 	bl	8003bd8 <USB_FlushRxFifo>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a0:	461a      	mov	r2, r3
 80039a2:	2300      	movs	r3, #0
 80039a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ac:	461a      	mov	r2, r3
 80039ae:	2300      	movs	r3, #0
 80039b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b8:	461a      	mov	r2, r3
 80039ba:	2300      	movs	r3, #0
 80039bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e043      	b.n	8003a4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039da:	d118      	bne.n	8003a0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ee:	461a      	mov	r2, r3
 80039f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e013      	b.n	8003a20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e008      	b.n	8003a20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a50:	461a      	mov	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d3b5      	bcc.n	80039c4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e043      	b.n	8003ae6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a74:	d118      	bne.n	8003aa8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e013      	b.n	8003aba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e008      	b.n	8003aba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ade:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aea:	461a      	mov	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d3b5      	bcc.n	8003a5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f043 0210 	orr.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	4b10      	ldr	r3, [pc, #64]	@ (8003b70 <USB_DevInit+0x2c4>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f043 0208 	orr.w	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6c:	b004      	add	sp, #16
 8003b6e:	4770      	bx	lr
 8003b70:	803c3800 	.word	0x803c3800

08003b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b8e:	d901      	bls.n	8003b94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e01b      	b.n	8003bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	daf2      	bge.n	8003b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	019b      	lsls	r3, r3, #6
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bb8:	d901      	bls.n	8003bbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e006      	b.n	8003bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d0f0      	beq.n	8003bac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bf0:	d901      	bls.n	8003bf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e018      	b.n	8003c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	daf2      	bge.n	8003be4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2210      	movs	r2, #16
 8003c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c14:	d901      	bls.n	8003c1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e006      	b.n	8003c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d0f0      	beq.n	8003c08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0306 	and.w	r3, r3, #6
 8003c7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
 8003c8a:	e00a      	b.n	8003ca2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d002      	beq.n	8003c98 <USB_GetDevSpeed+0x32>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d102      	bne.n	8003c9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	75fb      	strb	r3, [r7, #23]
 8003c9c:	e001      	b.n	8003ca2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c9e:	230f      	movs	r3, #15
 8003ca0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d13a      	bne.n	8003d42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d155      	bne.n	8003db0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	059b      	lsls	r3, r3, #22
 8003d26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e036      	b.n	8003db0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d11a      	bne.n	8003db0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	791b      	ldrb	r3, [r3, #4]
 8003d94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d96:	430b      	orrs	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d161      	bne.n	8003ea0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003df2:	d11f      	bne.n	8003e34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e54:	4013      	ands	r3, r2
 8003e56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	0159      	lsls	r1, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	440b      	add	r3, r1
 8003e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e96:	4619      	mov	r1, r3
 8003e98:	4b35      	ldr	r3, [pc, #212]	@ (8003f70 <USB_DeactivateEndpoint+0x1b0>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
 8003e9e:	e060      	b.n	8003f62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eb6:	d11f      	bne.n	8003ef8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ed6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ef2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	43db      	mvns	r3, r3
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f18:	4013      	ands	r3, r2
 8003f1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	0159      	lsls	r1, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	440b      	add	r3, r1
 8003f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <USB_DeactivateEndpoint+0x1b4>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	ec337800 	.word	0xec337800
 8003f74:	eff37800 	.word	0xeff37800

08003f78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	@ 0x28
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	785b      	ldrb	r3, [r3, #1]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 817f 	bne.w	8004298 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d132      	bne.n	8004008 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	0151      	lsls	r1, r2, #5
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	440a      	add	r2, r1
 8003fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fbc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fc0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004000:	0cdb      	lsrs	r3, r3, #19
 8004002:	04db      	lsls	r3, r3, #19
 8004004:	6113      	str	r3, [r2, #16]
 8004006:	e097      	b.n	8004138 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004022:	0cdb      	lsrs	r3, r3, #19
 8004024:	04db      	lsls	r3, r3, #19
 8004026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004042:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004046:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800404a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11a      	bne.n	8004088 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d903      	bls.n	8004066 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004080:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004084:	6113      	str	r3, [r2, #16]
 8004086:	e044      	b.n	8004112 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4413      	add	r3, r2
 8004092:	1e5a      	subs	r2, r3, #1
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	8afb      	ldrh	r3, [r7, #22]
 80040ae:	04d9      	lsls	r1, r3, #19
 80040b0:	4ba4      	ldr	r3, [pc, #656]	@ (8004344 <USB_EPStartXfer+0x3cc>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	0148      	lsls	r0, r1, #5
 80040b8:	69f9      	ldr	r1, [r7, #28]
 80040ba:	4401      	add	r1, r0
 80040bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040c0:	4313      	orrs	r3, r2
 80040c2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	791b      	ldrb	r3, [r3, #4]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d122      	bne.n	8004112 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040e6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80040ea:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	8afb      	ldrh	r3, [r7, #22]
 80040fc:	075b      	lsls	r3, r3, #29
 80040fe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	0148      	lsls	r0, r1, #5
 8004106:	69f9      	ldr	r1, [r7, #28]
 8004108:	4401      	add	r1, r0
 800410a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	0148      	lsls	r0, r1, #5
 800412c:	69f9      	ldr	r1, [r7, #28]
 800412e:	4401      	add	r1, r0
 8004130:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d14b      	bne.n	80041d6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	791b      	ldrb	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d128      	bne.n	80041b4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d110      	bne.n	8004194 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800418c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e00f      	b.n	80041b4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	e166      	b.n	80044a4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041f4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	791b      	ldrb	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d015      	beq.n	800422a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 814e 	beq.w	80044a4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f303 	lsl.w	r3, r1, r3
 800421e:	69f9      	ldr	r1, [r7, #28]
 8004220:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004224:	4313      	orrs	r3, r2
 8004226:	634b      	str	r3, [r1, #52]	@ 0x34
 8004228:	e13c      	b.n	80044a4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d110      	bne.n	800425c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004254:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00f      	b.n	800427c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68d9      	ldr	r1, [r3, #12]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	b298      	uxth	r0, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4603      	mov	r3, r0
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f9b9 	bl	8004608 <USB_WritePacket>
 8004296:	e105      	b.n	80044a4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b2:	0cdb      	lsrs	r3, r3, #19
 80042b4:	04db      	lsls	r3, r3, #19
 80042b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80042d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80042da:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d132      	bne.n	8004348 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	0148      	lsls	r0, r1, #5
 8004314:	69f9      	ldr	r1, [r7, #28]
 8004316:	4401      	add	r1, r0
 8004318:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800431c:	4313      	orrs	r3, r2
 800431e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800433a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800433e:	6113      	str	r3, [r2, #16]
 8004340:	e062      	b.n	8004408 <USB_EPStartXfer+0x490>
 8004342:	bf00      	nop
 8004344:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d123      	bne.n	8004398 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	0148      	lsls	r0, r1, #5
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	4401      	add	r1, r0
 800436e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004372:	4313      	orrs	r3, r2
 8004374:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004390:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004394:	6113      	str	r3, [r2, #16]
 8004396:	e037      	b.n	8004408 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	1e5a      	subs	r2, r3, #1
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	8afa      	ldrh	r2, [r7, #22]
 80043b4:	fb03 f202 	mul.w	r2, r3, r2
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	8afb      	ldrh	r3, [r7, #22]
 80043cc:	04d9      	lsls	r1, r3, #19
 80043ce:	4b38      	ldr	r3, [pc, #224]	@ (80044b0 <USB_EPStartXfer+0x538>)
 80043d0:	400b      	ands	r3, r1
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	0148      	lsls	r0, r1, #5
 80043d6:	69f9      	ldr	r1, [r7, #28]
 80043d8:	4401      	add	r1, r0
 80043da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	0148      	lsls	r0, r1, #5
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	4401      	add	r1, r0
 8004400:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004404:	4313      	orrs	r3, r2
 8004406:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d10d      	bne.n	800442a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68d9      	ldr	r1, [r3, #12]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004426:	460a      	mov	r2, r1
 8004428:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	791b      	ldrb	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d128      	bne.n	8004484 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d110      	bne.n	8004464 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800445c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00f      	b.n	8004484 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004482:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800449e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80044a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	1ff80000 	.word	0x1ff80000

080044b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d14a      	bne.n	8004568 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ea:	f040 8086 	bne.w	80045fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	7812      	ldrb	r2, [r2, #0]
 8004502:	0151      	lsls	r1, r2, #5
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	440a      	add	r2, r1
 8004508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800450c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004510:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004534:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3301      	adds	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004542:	4293      	cmp	r3, r2
 8004544:	d902      	bls.n	800454c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
          break;
 800454a:	e056      	b.n	80045fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004564:	d0e7      	beq.n	8004536 <USB_EPStopXfer+0x82>
 8004566:	e048      	b.n	80045fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800457c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004580:	d13b      	bne.n	80045fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d902      	bls.n	80045e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
          break;
 80045de:	e00c      	b.n	80045fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045f8:	d0e7      	beq.n	80045ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	@ 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	460b      	mov	r3, r1
 8004618:	71fb      	strb	r3, [r7, #7]
 800461a:	4613      	mov	r3, r2
 800461c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d123      	bne.n	8004676 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800462e:	88bb      	ldrh	r3, [r7, #4]
 8004630:	3303      	adds	r3, #3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e018      	b.n	800466e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	031a      	lsls	r2, r3, #12
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4413      	add	r3, r2
 8004644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004648:	461a      	mov	r2, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	3301      	adds	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3301      	adds	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3301      	adds	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	3301      	adds	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d3e2      	bcc.n	800463c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3724      	adds	r7, #36	@ 0x24
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004684:	b480      	push	{r7}
 8004686:	b08b      	sub	sp, #44	@ 0x2c
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	b29b      	uxth	r3, r3
 80046a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	623b      	str	r3, [r7, #32]
 80046ae:	e014      	b.n	80046da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	3301      	adds	r3, #1
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	3301      	adds	r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	3301      	adds	r3, #1
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	3301      	adds	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	3301      	adds	r3, #1
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3e6      	bcc.n	80046b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80046e2:	8bfb      	ldrh	r3, [r7, #30]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01e      	beq.n	8004726 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f2:	461a      	mov	r2, r3
 80046f4:	f107 0310 	add.w	r3, r7, #16
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
 8004708:	b2da      	uxtb	r2, r3
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	701a      	strb	r2, [r3, #0]
      i++;
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	3301      	adds	r3, #1
 8004712:	623b      	str	r3, [r7, #32]
      pDest++;
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	3301      	adds	r3, #1
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800471a:	8bfb      	ldrh	r3, [r7, #30]
 800471c:	3b01      	subs	r3, #1
 800471e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ea      	bne.n	80046fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004728:	4618      	mov	r0, r3
 800472a:	372c      	adds	r7, #44	@ 0x2c
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d12c      	bne.n	80047aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	db12      	blt.n	8004788 <USB_EPSetStall+0x54>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00f      	beq.n	8004788 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004782:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004786:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e02b      	b.n	8004802 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	db12      	blt.n	80047e2 <USB_EPSetStall+0xae>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00f      	beq.n	80047e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d128      	bne.n	800487e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	440a      	add	r2, r1
 8004842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004846:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800484a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	791b      	ldrb	r3, [r3, #4]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d003      	beq.n	800485c <USB_EPClearStall+0x4c>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d138      	bne.n	80048ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e027      	b.n	80048ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004898:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800489c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d003      	beq.n	80048ae <USB_EPClearStall+0x9e>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d10f      	bne.n	80048ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004956:	f023 0302 	bic.w	r3, r3, #2
 800495a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004984:	f023 0303 	bic.w	r3, r3, #3
 8004988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	0c1b      	lsrs	r3, r3, #16
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	b29b      	uxth	r3, r3
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4013      	ands	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a68:	68bb      	ldr	r3, [r7, #8]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b087      	sub	sp, #28
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	01db      	lsls	r3, r3, #7
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0301 	and.w	r3, r3, #1
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b0c:	f023 0307 	bic.w	r3, r3, #7
 8004b10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	333c      	adds	r3, #60	@ 0x3c
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4a26      	ldr	r2, [pc, #152]	@ (8004bec <USB_EP0_OutStart+0xb8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d90a      	bls.n	8004b6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b68:	d101      	bne.n	8004b6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e037      	b.n	8004bde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b9c:	f043 0318 	orr.w	r3, r3, #24
 8004ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004bb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bb6:	7afb      	ldrb	r3, [r7, #11]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10f      	bne.n	8004bdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004bda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	4f54300a 	.word	0x4f54300a

08004bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c08:	d901      	bls.n	8004c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e01b      	b.n	8004c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	daf2      	bge.n	8004bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f043 0201 	orr.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c32:	d901      	bls.n	8004c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d0f0      	beq.n	8004c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <CRC16>:
 * Computes the CRC value of a certain data frame and returns it
 * @param data ptr to the data buffer
 * @param len number of bytes for the CRC to be calculated for
 * @return CRC byte value
 */
static uint16_t CRC16(uint8_t *data, uint16_t len) {
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
	uint16_t CRC = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004c62:	2300      	movs	r3, #0
 8004c64:	81bb      	strh	r3, [r7, #12]
 8004c66:	e00a      	b.n	8004c7e <CRC16+0x2c>
		CRC += data[x];
 8004c68:	89bb      	ldrh	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	4413      	add	r3, r2
 8004c76:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004c78:	89bb      	ldrh	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	81bb      	strh	r3, [r7, #12]
 8004c7e:	89ba      	ldrh	r2, [r7, #12]
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3f0      	bcc.n	8004c68 <CRC16+0x16>
	}
	return CRC;
 8004c86:	89fb      	ldrh	r3, [r7, #14]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <SbW_Request_Received_CB>:
	S->MessageFifo.Fifo_Size = S->Fifo_Buffer_Size / S->Frame_Len;
	fifo_init(&S->MessageFifo);
	S->Mutex = 0; //ensures that the Mutex flag starts in the unlocked state (0)
}

void SbW_Request_Received_CB(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
	uint8_t NoReply = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
	uint16_t CRC_Result = CRC16(data, len - 2);
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	3b02      	subs	r3, #2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4619      	mov	r1, r3
 8004cae:	68b8      	ldr	r0, [r7, #8]
 8004cb0:	f7ff ffcf 	bl	8004c52 <CRC16>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	82bb      	strh	r3, [r7, #20]
	if (S->RemainingFrames) {
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 80e8 	bne.w	8004e94 <SbW_Request_Received_CB+0x200>
		return;
	}
	// Check the data integrity
	if (CRC_Result
			!= (((uint16_t) data[len - 1] << 8) | (uint16_t) data[len - 2])) {
 8004cc4:	8aba      	ldrh	r2, [r7, #20]
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	440b      	add	r3, r1
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	88f9      	ldrh	r1, [r7, #6]
 8004cd4:	3902      	subs	r1, #2
 8004cd6:	68b8      	ldr	r0, [r7, #8]
 8004cd8:	4401      	add	r1, r0
 8004cda:	7809      	ldrb	r1, [r1, #0]
 8004cdc:	430b      	orrs	r3, r1
	if (CRC_Result
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d003      	beq.n	8004cea <SbW_Request_Received_CB+0x56>
		S->HW_Interface_t.User_Callback(SbW_ERROR_CRC);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	4798      	blx	r3
		// SbW_ERROR_CRC // Ignoring this frame
	}
	// SbW_ERROR_NoERROR
	S->R_W = data[1] >> 7;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3301      	adds	r3, #1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	b2d9      	uxtb	r1, r3
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	7913      	ldrb	r3, [r2, #4]
 8004cfe:	f361 0300 	bfi	r3, r1, #0, #1
 8004d02:	7113      	strb	r3, [r2, #4]
	S->CMD = data[1] & 0b01111111;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3301      	adds	r3, #1
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	715a      	strb	r2, [r3, #5]

	switch (S->CMD) {
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	795b      	ldrb	r3, [r3, #5]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	f200 80bc 	bhi.w	8004e98 <SbW_Request_Received_CB+0x204>
 8004d20:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <SbW_Request_Received_CB+0x94>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d41 	.word	0x08004d41
 8004d2c:	08004dad 	.word	0x08004dad
 8004d30:	08004e99 	.word	0x08004e99
 8004d34:	08004ddb 	.word	0x08004ddb
 8004d38:	08004e99 	.word	0x08004e99
 8004d3c:	08004e01 	.word	0x08004e01
	case 0x01: // Get or Set Sampling Frequency
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	2000      	movs	r0, #0
 8004d46:	4798      	blx	r3
		if (S->R_W) {
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d014      	beq.n	8004d80 <SbW_Request_Received_CB+0xec>
			len = 7;
 8004d56:	2307      	movs	r3, #7
 8004d58:	80fb      	strh	r3, [r7, #6]
			data[2] = 2; // data length =2
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	2202      	movs	r2, #2
 8004d60:	701a      	strb	r2, [r3, #0]
			data[3] = (uint8_t) (S->SamplingFreq >> 8);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	885b      	ldrh	r3, [r3, #2]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3303      	adds	r3, #3
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) S->SamplingFreq;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	885a      	ldrh	r2, [r3, #2]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
		} else {
			len = 5;
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
			data[2] = 0;
		}
		break;
 8004d7e:	e066      	b.n	8004e4e <SbW_Request_Received_CB+0x1ba>
			len = 5;
 8004d80:	2305      	movs	r3, #5
 8004d82:	80fb      	strh	r3, [r7, #6]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	3303      	adds	r3, #3
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b21b      	sxth	r3, r3
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	3304      	adds	r3, #4
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b21b      	sxth	r3, r3
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	805a      	strh	r2, [r3, #2]
			data[2] = 0;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	3302      	adds	r3, #2
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
		break;
 8004daa:	e050      	b.n	8004e4e <SbW_Request_Received_CB+0x1ba>

	case 0x02: // Get or Set Frame Length
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	2000      	movs	r0, #0
 8004db2:	4798      	blx	r3
		if (S->R_W) {
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	791b      	ldrb	r3, [r3, #4]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d040      	beq.n	8004e44 <SbW_Request_Received_CB+0x1b0>
			len = 6;
 8004dc2:	2306      	movs	r3, #6
 8004dc4:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // data length =1
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3302      	adds	r3, #2
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
			data[3] = S->Frame_Len; // Get Frame Length
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3303      	adds	r3, #3
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	7992      	ldrb	r2, [r2, #6]
 8004dd6:	701a      	strb	r2, [r3, #0]
			// data[4]|data[5] for CRC_Result
		}
		break;
 8004dd8:	e034      	b.n	8004e44 <SbW_Request_Received_CB+0x1b0>

	case 0x04: // Get Frames from the frame buffer
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dde:	2000      	movs	r0, #0
 8004de0:	4798      	blx	r3
		if (!S->R_W) {
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d12b      	bne.n	8004e48 <SbW_Request_Received_CB+0x1b4>
			NoReply = 1; // means do not issue a standard reply
 8004df0:	2301      	movs	r3, #1
 8004df2:	75fb      	strb	r3, [r7, #23]
			S->RemainingFrames = data[3];
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	78da      	ldrb	r2, [r3, #3]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			// SbW_TxFrame_processor(S);
		}
		break;
 8004dfe:	e023      	b.n	8004e48 <SbW_Request_Received_CB+0x1b4>

	case 0x06: // Get the frame buffer depth
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	2000      	movs	r0, #0
 8004e06:	4798      	blx	r3
		if (S->R_W) {
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	791b      	ldrb	r3, [r3, #4]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01a      	beq.n	8004e4c <SbW_Request_Received_CB+0x1b8>
			len = 7;
 8004e16:	2307      	movs	r3, #7
 8004e18:	80fb      	strh	r3, [r7, #6]
			uint16_t FrameBufferDepth = S->Fifo_Buffer_Size / S->Frame_Len;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8b9b      	ldrh	r3, [r3, #28]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	799b      	ldrb	r3, [r3, #6]
 8004e24:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e28:	827b      	strh	r3, [r7, #18]
			data[3] = (uint8_t) (FrameBufferDepth >> 8);
 8004e2a:	8a7b      	ldrh	r3, [r7, #18]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3303      	adds	r3, #3
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) FrameBufferDepth;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	8a7a      	ldrh	r2, [r7, #18]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004e42:	e003      	b.n	8004e4c <SbW_Request_Received_CB+0x1b8>
		break;
 8004e44:	bf00      	nop
 8004e46:	e002      	b.n	8004e4e <SbW_Request_Received_CB+0x1ba>
		break;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <SbW_Request_Received_CB+0x1ba>
		break;
 8004e4c:	bf00      	nop

	default:
		return;
	}

	if (!NoReply) {
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d122      	bne.n	8004e9a <SbW_Request_Received_CB+0x206>
		CRC_Result = CRC16(data, len - 2);
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	3b02      	subs	r3, #2
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	68b8      	ldr	r0, [r7, #8]
 8004e5e:	f7ff fef8 	bl	8004c52 <CRC16>
 8004e62:	4603      	mov	r3, r0
 8004e64:	82bb      	strh	r3, [r7, #20]
		data[len - 2] = (uint8_t) (CRC_Result >> 8);
 8004e66:	8abb      	ldrh	r3, [r7, #20]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	b299      	uxth	r1, r3
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	3b02      	subs	r3, #2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	4413      	add	r3, r2
 8004e74:	b2ca      	uxtb	r2, r1
 8004e76:	701a      	strb	r2, [r3, #0]
		data[len - 1] = (uint8_t) (CRC_Result);
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	4413      	add	r3, r2
 8004e80:	8aba      	ldrh	r2, [r7, #20]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
		S->HW_Interface_t.Send_Reply(data, len);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	4798      	blx	r3
 8004e92:	e002      	b.n	8004e9a <SbW_Request_Received_CB+0x206>
		return;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <SbW_Request_Received_CB+0x206>
		return;
 8004e98:	bf00      	nop
	}
}
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <SbW_Timer_Callback>:
void SbW_Reply_Transmit(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {

}

void SbW_Timer_Callback(SbW_Protocol_t *S) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	int16_t Head = fifo_enqueue(&S->MessageFifo);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fd2c 	bl	800090a <fifo_enqueue>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	81fb      	strh	r3, [r7, #14]
	//implement the enqueue operation
	memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	7989      	ldrb	r1, [r1, #6]
 8004ec2:	fb01 f202 	mul.w	r2, r1, r2
 8004ec6:	1898      	adds	r0, r3, r2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6899      	ldr	r1, [r3, #8]
			S->Frame_Len);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	799b      	ldrb	r3, [r3, #6]
	memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f002 fd73 	bl	80079bc <memcpy>
	SbW_TxFrame_processor(S);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f804 	bl	8004ee4 <SbW_TxFrame_processor>
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <SbW_TxFrame_processor>:

void SbW_TxFrame_processor(SbW_Protocol_t *S) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(&S->MessageFifo) && S->RemainingFrames != 0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fcf8 	bl	80008e6 <fifo_is_empty>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d138      	bne.n	8004f6e <SbW_TxFrame_processor+0x8a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d033      	beq.n	8004f6e <SbW_TxFrame_processor+0x8a>
			&& !S->Mutex) {
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d12e      	bne.n	8004f6e <SbW_TxFrame_processor+0x8a>
		S->Mutex = 1;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		int16_t H = fifo_dequeue(&S->MessageFifo);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb fd2f 	bl	8000980 <fifo_dequeue>
 8004f22:	4603      	mov	r3, r0
 8004f24:	81fb      	strh	r3, [r7, #14]
		S->RemainingFrames--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a18      	ldr	r0, [r3, #32]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	7989      	ldrb	r1, [r1, #6]
 8004f46:	fb01 f202 	mul.w	r2, r1, r2
 8004f4a:	1899      	adds	r1, r3, r2
				S->Frame_Len);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	799b      	ldrb	r3, [r3, #6]
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 8004f50:	461a      	mov	r2, r3
 8004f52:	f002 fd33 	bl	80079bc <memcpy>
		S->HW_Interface_t.Send_Reply(S->P_TXBuffer, S->Frame_Len);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6a10      	ldr	r0, [r2, #32]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	7992      	ldrb	r2, [r2, #6]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4798      	blx	r3
		S->Mutex = 0;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004f88:	f002 fca8 	bl	80078dc <USBD_static_malloc>
 8004f8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	32b0      	adds	r2, #176	@ 0xb0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0d4      	b.n	8005152 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004fa8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004fac:	2100      	movs	r1, #0
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f002 fcd8 	bl	8007964 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	32b0      	adds	r2, #176	@ 0xb0
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	32b0      	adds	r2, #176	@ 0xb0
 8004fce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7c1b      	ldrb	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d138      	bne.n	8005052 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800515c <USBD_CDC_Init+0x1e4>)
 8004fe2:	7819      	ldrb	r1, [r3, #0]
 8004fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fe8:	2202      	movs	r2, #2
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f002 fb53 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800515c <USBD_CDC_Init+0x1e4>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f003 020f 	and.w	r2, r3, #15
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3324      	adds	r3, #36	@ 0x24
 8005006:	2201      	movs	r2, #1
 8005008:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800500a:	4b55      	ldr	r3, [pc, #340]	@ (8005160 <USBD_CDC_Init+0x1e8>)
 800500c:	7819      	ldrb	r1, [r3, #0]
 800500e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005012:	2202      	movs	r2, #2
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f002 fb3e 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800501a:	4b51      	ldr	r3, [pc, #324]	@ (8005160 <USBD_CDC_Init+0x1e8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005032:	2201      	movs	r2, #1
 8005034:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005036:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <USBD_CDC_Init+0x1ec>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3326      	adds	r3, #38	@ 0x26
 800504c:	2210      	movs	r2, #16
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e035      	b.n	80050be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005052:	4b42      	ldr	r3, [pc, #264]	@ (800515c <USBD_CDC_Init+0x1e4>)
 8005054:	7819      	ldrb	r1, [r3, #0]
 8005056:	2340      	movs	r3, #64	@ 0x40
 8005058:	2202      	movs	r2, #2
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f002 fb1b 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005060:	4b3e      	ldr	r3, [pc, #248]	@ (800515c <USBD_CDC_Init+0x1e4>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	3324      	adds	r3, #36	@ 0x24
 8005076:	2201      	movs	r2, #1
 8005078:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <USBD_CDC_Init+0x1e8>)
 800507c:	7819      	ldrb	r1, [r3, #0]
 800507e:	2340      	movs	r3, #64	@ 0x40
 8005080:	2202      	movs	r2, #2
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f002 fb07 	bl	8007696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005088:	4b35      	ldr	r3, [pc, #212]	@ (8005160 <USBD_CDC_Init+0x1e8>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80050a0:	2201      	movs	r2, #1
 80050a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005164 <USBD_CDC_Init+0x1ec>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3326      	adds	r3, #38	@ 0x26
 80050ba:	2210      	movs	r2, #16
 80050bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050be:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <USBD_CDC_Init+0x1ec>)
 80050c0:	7819      	ldrb	r1, [r3, #0]
 80050c2:	2308      	movs	r3, #8
 80050c4:	2203      	movs	r2, #3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f002 fae5 	bl	8007696 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050cc:	4b25      	ldr	r3, [pc, #148]	@ (8005164 <USBD_CDC_Init+0x1ec>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	f003 020f 	and.w	r2, r3, #15
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	3324      	adds	r3, #36	@ 0x24
 80050e2:	2201      	movs	r2, #1
 80050e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	33b0      	adds	r3, #176	@ 0xb0
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800511c:	2302      	movs	r3, #2
 800511e:	e018      	b.n	8005152 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7c1b      	ldrb	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005128:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <USBD_CDC_Init+0x1e8>)
 800512a:	7819      	ldrb	r1, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f002 fb9c 	bl	8007874 <USBD_LL_PrepareReceive>
 800513c:	e008      	b.n	8005150 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <USBD_CDC_Init+0x1e8>)
 8005140:	7819      	ldrb	r1, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005148:	2340      	movs	r3, #64	@ 0x40
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f002 fb92 	bl	8007874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	200000c3 	.word	0x200000c3
 8005160:	200000c4 	.word	0x200000c4
 8005164:	200000c5 	.word	0x200000c5

08005168 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005174:	4b3a      	ldr	r3, [pc, #232]	@ (8005260 <USBD_CDC_DeInit+0xf8>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f002 fab1 	bl	80076e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005180:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <USBD_CDC_DeInit+0xf8>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 020f 	and.w	r2, r3, #15
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	3324      	adds	r3, #36	@ 0x24
 8005196:	2200      	movs	r2, #0
 8005198:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800519a:	4b32      	ldr	r3, [pc, #200]	@ (8005264 <USBD_CDC_DeInit+0xfc>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f002 fa9e 	bl	80076e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80051a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005264 <USBD_CDC_DeInit+0xfc>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 020f 	and.w	r2, r3, #15
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051be:	2200      	movs	r2, #0
 80051c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80051c2:	4b29      	ldr	r3, [pc, #164]	@ (8005268 <USBD_CDC_DeInit+0x100>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f002 fa8a 	bl	80076e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051ce:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <USBD_CDC_DeInit+0x100>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3324      	adds	r3, #36	@ 0x24
 80051e4:	2200      	movs	r2, #0
 80051e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005268 <USBD_CDC_DeInit+0x100>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3326      	adds	r3, #38	@ 0x26
 80051fe:	2200      	movs	r2, #0
 8005200:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	32b0      	adds	r2, #176	@ 0xb0
 800520c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01f      	beq.n	8005254 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	33b0      	adds	r3, #176	@ 0xb0
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	32b0      	adds	r2, #176	@ 0xb0
 8005232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005236:	4618      	mov	r0, r3
 8005238:	f002 fb5e 	bl	80078f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	32b0      	adds	r2, #176	@ 0xb0
 8005246:	2100      	movs	r1, #0
 8005248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	200000c3 	.word	0x200000c3
 8005264:	200000c4 	.word	0x200000c4
 8005268:	200000c5 	.word	0x200000c5

0800526c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	32b0      	adds	r2, #176	@ 0xb0
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005298:	2303      	movs	r3, #3
 800529a:	e0bf      	b.n	800541c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d050      	beq.n	800534a <USBD_CDC_Setup+0xde>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	f040 80af 	bne.w	800540c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	88db      	ldrh	r3, [r3, #6]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d03a      	beq.n	800532c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b25b      	sxtb	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da1b      	bge.n	80052f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	33b0      	adds	r3, #176	@ 0xb0
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	88d2      	ldrh	r2, [r2, #6]
 80052dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	88db      	ldrh	r3, [r3, #6]
 80052e2:	2b07      	cmp	r3, #7
 80052e4:	bf28      	it	cs
 80052e6:	2307      	movcs	r3, #7
 80052e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	89fa      	ldrh	r2, [r7, #14]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fd93 	bl	8006e1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80052f6:	e090      	b.n	800541a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	785a      	ldrb	r2, [r3, #1]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	88db      	ldrh	r3, [r3, #6]
 8005306:	2b3f      	cmp	r3, #63	@ 0x3f
 8005308:	d803      	bhi.n	8005312 <USBD_CDC_Setup+0xa6>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	88db      	ldrh	r3, [r3, #6]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	e000      	b.n	8005314 <USBD_CDC_Setup+0xa8>
 8005312:	2240      	movs	r2, #64	@ 0x40
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800531a:	6939      	ldr	r1, [r7, #16]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005322:	461a      	mov	r2, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fda5 	bl	8006e74 <USBD_CtlPrepareRx>
      break;
 800532a:	e076      	b.n	800541a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	33b0      	adds	r3, #176	@ 0xb0
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	7850      	ldrb	r0, [r2, #1]
 8005342:	2200      	movs	r2, #0
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	4798      	blx	r3
      break;
 8005348:	e067      	b.n	800541a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b0b      	cmp	r3, #11
 8005350:	d851      	bhi.n	80053f6 <USBD_CDC_Setup+0x18a>
 8005352:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <USBD_CDC_Setup+0xec>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	08005389 	.word	0x08005389
 800535c:	08005405 	.word	0x08005405
 8005360:	080053f7 	.word	0x080053f7
 8005364:	080053f7 	.word	0x080053f7
 8005368:	080053f7 	.word	0x080053f7
 800536c:	080053f7 	.word	0x080053f7
 8005370:	080053f7 	.word	0x080053f7
 8005374:	080053f7 	.word	0x080053f7
 8005378:	080053f7 	.word	0x080053f7
 800537c:	080053f7 	.word	0x080053f7
 8005380:	080053b3 	.word	0x080053b3
 8005384:	080053dd 	.word	0x080053dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b03      	cmp	r3, #3
 8005392:	d107      	bne.n	80053a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005394:	f107 030a 	add.w	r3, r7, #10
 8005398:	2202      	movs	r2, #2
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fd3d 	bl	8006e1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053a2:	e032      	b.n	800540a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 fcbb 	bl	8006d22 <USBD_CtlError>
            ret = USBD_FAIL;
 80053ac:	2303      	movs	r3, #3
 80053ae:	75fb      	strb	r3, [r7, #23]
          break;
 80053b0:	e02b      	b.n	800540a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053be:	f107 030d 	add.w	r3, r7, #13
 80053c2:	2201      	movs	r2, #1
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 fd28 	bl	8006e1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053cc:	e01d      	b.n	800540a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 fca6 	bl	8006d22 <USBD_CtlError>
            ret = USBD_FAIL;
 80053d6:	2303      	movs	r3, #3
 80053d8:	75fb      	strb	r3, [r7, #23]
          break;
 80053da:	e016      	b.n	800540a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d00f      	beq.n	8005408 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 fc99 	bl	8006d22 <USBD_CtlError>
            ret = USBD_FAIL;
 80053f0:	2303      	movs	r3, #3
 80053f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053f4:	e008      	b.n	8005408 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 fc92 	bl	8006d22 <USBD_CtlError>
          ret = USBD_FAIL;
 80053fe:	2303      	movs	r3, #3
 8005400:	75fb      	strb	r3, [r7, #23]
          break;
 8005402:	e002      	b.n	800540a <USBD_CDC_Setup+0x19e>
          break;
 8005404:	bf00      	nop
 8005406:	e008      	b.n	800541a <USBD_CDC_Setup+0x1ae>
          break;
 8005408:	bf00      	nop
      }
      break;
 800540a:	e006      	b.n	800541a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fc87 	bl	8006d22 <USBD_CtlError>
      ret = USBD_FAIL;
 8005414:	2303      	movs	r3, #3
 8005416:	75fb      	strb	r3, [r7, #23]
      break;
 8005418:	bf00      	nop
  }

  return (uint8_t)ret;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005436:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	32b0      	adds	r2, #176	@ 0xb0
 8005442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800544a:	2303      	movs	r3, #3
 800544c:	e065      	b.n	800551a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	32b0      	adds	r2, #176	@ 0xb0
 8005458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3318      	adds	r3, #24
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02f      	beq.n	80054d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 020f 	and.w	r2, r3, #15
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3318      	adds	r3, #24
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	f003 010f 	and.w	r1, r3, #15
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	460b      	mov	r3, r1
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	440b      	add	r3, r1
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4403      	add	r3, r0
 80054a0:	331c      	adds	r3, #28
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d112      	bne.n	80054d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	3318      	adds	r3, #24
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054ca:	78f9      	ldrb	r1, [r7, #3]
 80054cc:	2300      	movs	r3, #0
 80054ce:	2200      	movs	r2, #0
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f002 f9ae 	bl	8007832 <USBD_LL_Transmit>
 80054d6:	e01f      	b.n	8005518 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	33b0      	adds	r3, #176	@ 0xb0
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	33b0      	adds	r3, #176	@ 0xb0
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005514:	78fa      	ldrb	r2, [r7, #3]
 8005516:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	32b0      	adds	r2, #176	@ 0xb0
 8005538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	32b0      	adds	r2, #176	@ 0xb0
 8005548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005550:	2303      	movs	r3, #3
 8005552:	e01a      	b.n	800558a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f002 f9ac 	bl	80078b6 <USBD_LL_GetRxDataSize>
 800555e:	4602      	mov	r2, r0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	33b0      	adds	r3, #176	@ 0xb0
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005584:	4611      	mov	r1, r2
 8005586:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	32b0      	adds	r2, #176	@ 0xb0
 80055a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e024      	b.n	80055fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	33b0      	adds	r3, #176	@ 0xb0
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d019      	beq.n	80055fc <USBD_CDC_EP0_RxReady+0x6a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055ce:	2bff      	cmp	r3, #255	@ 0xff
 80055d0:	d014      	beq.n	80055fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	33b0      	adds	r3, #176	@ 0xb0
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80055ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	22ff      	movs	r2, #255	@ 0xff
 80055f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005610:	2182      	movs	r1, #130	@ 0x82
 8005612:	4818      	ldr	r0, [pc, #96]	@ (8005674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005614:	f000 fd4f 	bl	80060b6 <USBD_GetEpDesc>
 8005618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800561a:	2101      	movs	r1, #1
 800561c:	4815      	ldr	r0, [pc, #84]	@ (8005674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800561e:	f000 fd4a 	bl	80060b6 <USBD_GetEpDesc>
 8005622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005624:	2181      	movs	r1, #129	@ 0x81
 8005626:	4813      	ldr	r0, [pc, #76]	@ (8005674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005628:	f000 fd45 	bl	80060b6 <USBD_GetEpDesc>
 800562c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2210      	movs	r2, #16
 8005638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2200      	movs	r2, #0
 8005644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005648:	711a      	strb	r2, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d006      	beq.n	8005662 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800565c:	711a      	strb	r2, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2243      	movs	r2, #67	@ 0x43
 8005666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005668:	4b02      	ldr	r3, [pc, #8]	@ (8005674 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000080 	.word	0x20000080

08005678 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005680:	2182      	movs	r1, #130	@ 0x82
 8005682:	4818      	ldr	r0, [pc, #96]	@ (80056e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005684:	f000 fd17 	bl	80060b6 <USBD_GetEpDesc>
 8005688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800568a:	2101      	movs	r1, #1
 800568c:	4815      	ldr	r0, [pc, #84]	@ (80056e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800568e:	f000 fd12 	bl	80060b6 <USBD_GetEpDesc>
 8005692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005694:	2181      	movs	r1, #129	@ 0x81
 8005696:	4813      	ldr	r0, [pc, #76]	@ (80056e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005698:	f000 fd0d 	bl	80060b6 <USBD_GetEpDesc>
 800569c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2210      	movs	r2, #16
 80056a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d006      	beq.n	80056be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2200      	movs	r2, #0
 80056b4:	711a      	strb	r2, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f042 0202 	orr.w	r2, r2, #2
 80056bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d006      	beq.n	80056d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	711a      	strb	r2, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f042 0202 	orr.w	r2, r2, #2
 80056d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2243      	movs	r2, #67	@ 0x43
 80056d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056d8:	4b02      	ldr	r3, [pc, #8]	@ (80056e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000080 	.word	0x20000080

080056e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056f0:	2182      	movs	r1, #130	@ 0x82
 80056f2:	4818      	ldr	r0, [pc, #96]	@ (8005754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056f4:	f000 fcdf 	bl	80060b6 <USBD_GetEpDesc>
 80056f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056fa:	2101      	movs	r1, #1
 80056fc:	4815      	ldr	r0, [pc, #84]	@ (8005754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056fe:	f000 fcda 	bl	80060b6 <USBD_GetEpDesc>
 8005702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005704:	2181      	movs	r1, #129	@ 0x81
 8005706:	4813      	ldr	r0, [pc, #76]	@ (8005754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005708:	f000 fcd5 	bl	80060b6 <USBD_GetEpDesc>
 800570c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2210      	movs	r2, #16
 8005718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2200      	movs	r2, #0
 8005724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005728:	711a      	strb	r2, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800573c:	711a      	strb	r2, [r3, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2243      	movs	r2, #67	@ 0x43
 8005746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005748:	4b02      	ldr	r3, [pc, #8]	@ (8005754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000080 	.word	0x20000080

08005758 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	220a      	movs	r2, #10
 8005764:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005766:	4b03      	ldr	r3, [pc, #12]	@ (8005774 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	2000003c 	.word	0x2000003c

08005778 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005788:	2303      	movs	r3, #3
 800578a:	e009      	b.n	80057a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	33b0      	adds	r3, #176	@ 0xb0
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	32b0      	adds	r2, #176	@ 0xb0
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e008      	b.n	80057e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	32b0      	adds	r2, #176	@ 0xb0
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	e004      	b.n	800581e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	32b0      	adds	r2, #176	@ 0xb0
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800584e:	2303      	movs	r3, #3
 8005850:	e025      	b.n	800589e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11f      	bne.n	800589c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2201      	movs	r2, #1
 8005860:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005864:	4b10      	ldr	r3, [pc, #64]	@ (80058a8 <USBD_CDC_TransmitPacket+0x7c>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4403      	add	r3, r0
 800587e:	3318      	adds	r3, #24
 8005880:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <USBD_CDC_TransmitPacket+0x7c>)
 8005884:	7819      	ldrb	r1, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 ffcd 	bl	8007832 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200000c3 	.word	0x200000c3

080058ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	32b0      	adds	r2, #176	@ 0xb0
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	32b0      	adds	r2, #176	@ 0xb0
 80058ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e018      	b.n	800590c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7c1b      	ldrb	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <USBD_CDC_ReceivePacket+0x68>)
 80058e4:	7819      	ldrb	r1, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 ffbf 	bl	8007874 <USBD_LL_PrepareReceive>
 80058f6:	e008      	b.n	800590a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <USBD_CDC_ReceivePacket+0x68>)
 80058fa:	7819      	ldrb	r1, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005902:	2340      	movs	r3, #64	@ 0x40
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 ffb5 	bl	8007874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200000c4 	.word	0x200000c4

08005918 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	e01f      	b.n	8005970 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	79fa      	ldrb	r2, [r7, #7]
 8005962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f001 fe2f 	bl	80075c8 <USBD_LL_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	e025      	b.n	80059dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	32ae      	adds	r2, #174	@ 0xae
 80059a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00f      	beq.n	80059cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	32ae      	adds	r2, #174	@ 0xae
 80059b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	f107 020e 	add.w	r2, r7, #14
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	4602      	mov	r2, r0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fe37 	bl	8007660 <USBD_LL_Start>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d009      	beq.n	8005a40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	4611      	mov	r1, r2
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	4798      	blx	r3
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	4611      	mov	r1, r2
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 f90c 	bl	8006cae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d01a      	beq.n	8005af0 <USBD_LL_SetupStage+0x72>
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d822      	bhi.n	8005b04 <USBD_LL_SetupStage+0x86>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <USBD_LL_SetupStage+0x4a>
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00a      	beq.n	8005adc <USBD_LL_SetupStage+0x5e>
 8005ac6:	e01d      	b.n	8005b04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fb63 	bl	800619c <USBD_StdDevReq>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8005ada:	e020      	b.n	8005b1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbcb 	bl	8006280 <USBD_StdItfReq>
 8005aea:	4603      	mov	r3, r0
 8005aec:	73fb      	strb	r3, [r7, #15]
      break;
 8005aee:	e016      	b.n	8005b1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fc2d 	bl	8006358 <USBD_StdEPReq>
 8005afe:	4603      	mov	r3, r0
 8005b00:	73fb      	strb	r3, [r7, #15]
      break;
 8005b02:	e00c      	b.n	8005b1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fe04 	bl	8007720 <USBD_LL_StallEP>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1c:	bf00      	nop
  }

  return ret;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	460b      	mov	r3, r1
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d16e      	bne.n	8005c1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005b46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	f040 8098 	bne.w	8005c84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d913      	bls.n	8005b88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	1ad2      	subs	r2, r2, r3
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bf28      	it	cs
 8005b7a:	4613      	movcs	r3, r2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f001 f994 	bl	8006eae <USBD_CtlContinueRx>
 8005b86:	e07d      	b.n	8005c84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d014      	beq.n	8005bc0 <USBD_LL_DataOutStage+0x98>
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d81d      	bhi.n	8005bd6 <USBD_LL_DataOutStage+0xae>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <USBD_LL_DataOutStage+0x7c>
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d003      	beq.n	8005baa <USBD_LL_DataOutStage+0x82>
 8005ba2:	e018      	b.n	8005bd6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ba8:	e018      	b.n	8005bdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fa64 	bl	8006082 <USBD_CoreFindIF>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75bb      	strb	r3, [r7, #22]
            break;
 8005bbe:	e00d      	b.n	8005bdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fa66 	bl	800609c <USBD_CoreFindEP>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	75bb      	strb	r3, [r7, #22]
            break;
 8005bd4:	e002      	b.n	8005bdc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	75bb      	strb	r3, [r7, #22]
            break;
 8005bda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bdc:	7dbb      	ldrb	r3, [r7, #22]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d119      	bne.n	8005c16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d113      	bne.n	8005c16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005bee:	7dba      	ldrb	r2, [r7, #22]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	32ae      	adds	r2, #174	@ 0xae
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005bfe:	7dba      	ldrb	r2, [r7, #22]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c06:	7dba      	ldrb	r2, [r7, #22]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	32ae      	adds	r2, #174	@ 0xae
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f001 f95a 	bl	8006ed0 <USBD_CtlSendStatus>
 8005c1c:	e032      	b.n	8005c84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fa37 	bl	800609c <USBD_CoreFindEP>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c32:	7dbb      	ldrb	r3, [r7, #22]
 8005c34:	2bff      	cmp	r3, #255	@ 0xff
 8005c36:	d025      	beq.n	8005c84 <USBD_LL_DataOutStage+0x15c>
 8005c38:	7dbb      	ldrb	r3, [r7, #22]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d122      	bne.n	8005c84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d117      	bne.n	8005c7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c4a:	7dba      	ldrb	r2, [r7, #22]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	32ae      	adds	r2, #174	@ 0xae
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00f      	beq.n	8005c7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c5a:	7dba      	ldrb	r2, [r7, #22]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c62:	7dba      	ldrb	r2, [r7, #22]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	32ae      	adds	r2, #174	@ 0xae
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	7afa      	ldrb	r2, [r7, #11]
 8005c70:	4611      	mov	r1, r2
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	4798      	blx	r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	e000      	b.n	8005c86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	460b      	mov	r3, r1
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c9c:	7afb      	ldrb	r3, [r7, #11]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d16f      	bne.n	8005d82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d15a      	bne.n	8005d68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d914      	bls.n	8005ce8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f001 f8bc 	bl	8006e52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f001 fdc7 	bl	8007874 <USBD_LL_PrepareReceive>
 8005ce6:	e03f      	b.n	8005d68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d11c      	bne.n	8005d2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d316      	bcc.n	8005d2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d20f      	bcs.n	8005d2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f001 f89d 	bl	8006e52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d20:	2300      	movs	r3, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	2100      	movs	r1, #0
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f001 fda4 	bl	8007874 <USBD_LL_PrepareReceive>
 8005d2c:	e01c      	b.n	8005d68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d10f      	bne.n	8005d5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d5a:	2180      	movs	r1, #128	@ 0x80
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f001 fcdf 	bl	8007720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f001 f8c7 	bl	8006ef6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d03a      	beq.n	8005de8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fe42 	bl	80059fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005d80:	e032      	b.n	8005de8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f985 	bl	800609c <USBD_CoreFindEP>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2bff      	cmp	r3, #255	@ 0xff
 8005d9a:	d025      	beq.n	8005de8 <USBD_LL_DataInStage+0x15a>
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d122      	bne.n	8005de8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d11c      	bne.n	8005de8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dae:	7dfa      	ldrb	r2, [r7, #23]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	32ae      	adds	r2, #174	@ 0xae
 8005db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d014      	beq.n	8005de8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005dbe:	7dfa      	ldrb	r2, [r7, #23]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005dc6:	7dfa      	ldrb	r2, [r7, #23]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	32ae      	adds	r2, #174	@ 0xae
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	7afa      	ldrb	r2, [r7, #11]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	4798      	blx	r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005dde:	7dbb      	ldrb	r3, [r7, #22]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005de4:	7dbb      	ldrb	r3, [r7, #22]
 8005de6:	e000      	b.n	8005dea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d014      	beq.n	8005e58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6852      	ldr	r2, [r2, #4]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	4611      	mov	r1, r2
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e58:	2340      	movs	r3, #64	@ 0x40
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fc19 	bl	8007696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2240      	movs	r2, #64	@ 0x40
 8005e70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e74:	2340      	movs	r3, #64	@ 0x40
 8005e76:	2200      	movs	r2, #0
 8005e78:	2180      	movs	r1, #128	@ 0x80
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fc0b 	bl	8007696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2240      	movs	r2, #64	@ 0x40
 8005e8a:	621a      	str	r2, [r3, #32]

  return ret;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d006      	beq.n	8005ed8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2204      	movs	r2, #4
 8005edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d106      	bne.n	8005f10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d110      	bne.n	8005f54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	32ae      	adds	r2, #174	@ 0xae
 8005f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e01c      	b.n	8005fba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d115      	bne.n	8005fb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32ae      	adds	r2, #174	@ 0xae
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32ae      	adds	r2, #174	@ 0xae
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	32ae      	adds	r2, #174	@ 0xae
 8005fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e01c      	b.n	800601e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d115      	bne.n	800601c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	32ae      	adds	r2, #174	@ 0xae
 8005ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	32ae      	adds	r2, #174	@ 0xae
 800600e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	78fa      	ldrb	r2, [r7, #3]
 8006016:	4611      	mov	r1, r2
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6852      	ldr	r2, [r2, #4]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	4611      	mov	r1, r2
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	4798      	blx	r3
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006074:	2303      	movs	r3, #3
 8006076:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800608e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	885b      	ldrh	r3, [r3, #2]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	4293      	cmp	r3, r2
 80060da:	d91f      	bls.n	800611c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060e2:	e013      	b.n	800610c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060e4:	f107 030a 	add.w	r3, r7, #10
 80060e8:	4619      	mov	r1, r3
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f000 f81b 	bl	8006126 <USBD_GetNextDesc>
 80060f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d108      	bne.n	800610c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	789b      	ldrb	r3, [r3, #2]
 8006102:	78fa      	ldrb	r2, [r7, #3]
 8006104:	429a      	cmp	r2, r3
 8006106:	d008      	beq.n	800611a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	885b      	ldrh	r3, [r3, #2]
 8006110:	b29a      	uxth	r2, r3
 8006112:	897b      	ldrh	r3, [r7, #10]
 8006114:	429a      	cmp	r2, r3
 8006116:	d8e5      	bhi.n	80060e4 <USBD_GetEpDesc+0x2e>
 8006118:	e000      	b.n	800611c <USBD_GetEpDesc+0x66>
          break;
 800611a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800611c:	693b      	ldr	r3, [r7, #16]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	4413      	add	r3, r2
 800613e:	b29a      	uxth	r2, r3
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4413      	add	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800617c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	b21a      	sxth	r2, r3
 8006184:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006188:	4313      	orrs	r3, r2
 800618a:	b21b      	sxth	r3, r3
 800618c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800618e:	89fb      	ldrh	r3, [r7, #14]
}
 8006190:	4618      	mov	r0, r3
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061b2:	2b40      	cmp	r3, #64	@ 0x40
 80061b4:	d005      	beq.n	80061c2 <USBD_StdDevReq+0x26>
 80061b6:	2b40      	cmp	r3, #64	@ 0x40
 80061b8:	d857      	bhi.n	800626a <USBD_StdDevReq+0xce>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00f      	beq.n	80061de <USBD_StdDevReq+0x42>
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d153      	bne.n	800626a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	32ae      	adds	r2, #174	@ 0xae
 80061cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e04a      	b.n	8006274 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d83b      	bhi.n	800625e <USBD_StdDevReq+0xc2>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <USBD_StdDevReq+0x50>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006241 	.word	0x08006241
 80061f0:	08006255 	.word	0x08006255
 80061f4:	0800625f 	.word	0x0800625f
 80061f8:	0800624b 	.word	0x0800624b
 80061fc:	0800625f 	.word	0x0800625f
 8006200:	0800621f 	.word	0x0800621f
 8006204:	08006215 	.word	0x08006215
 8006208:	0800625f 	.word	0x0800625f
 800620c:	08006237 	.word	0x08006237
 8006210:	08006229 	.word	0x08006229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa3c 	bl	8006694 <USBD_GetDescriptor>
          break;
 800621c:	e024      	b.n	8006268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fba1 	bl	8006968 <USBD_SetAddress>
          break;
 8006226:	e01f      	b.n	8006268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fbe0 	bl	80069f0 <USBD_SetConfig>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]
          break;
 8006234:	e018      	b.n	8006268 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fc83 	bl	8006b44 <USBD_GetConfig>
          break;
 800623e:	e013      	b.n	8006268 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fcb4 	bl	8006bb0 <USBD_GetStatus>
          break;
 8006248:	e00e      	b.n	8006268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fce3 	bl	8006c18 <USBD_SetFeature>
          break;
 8006252:	e009      	b.n	8006268 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd07 	bl	8006c6a <USBD_ClrFeature>
          break;
 800625c:	e004      	b.n	8006268 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fd5e 	bl	8006d22 <USBD_CtlError>
          break;
 8006266:	bf00      	nop
      }
      break;
 8006268:	e004      	b.n	8006274 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fd58 	bl	8006d22 <USBD_CtlError>
      break;
 8006272:	bf00      	nop
  }

  return ret;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop

08006280 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006296:	2b40      	cmp	r3, #64	@ 0x40
 8006298:	d005      	beq.n	80062a6 <USBD_StdItfReq+0x26>
 800629a:	2b40      	cmp	r3, #64	@ 0x40
 800629c:	d852      	bhi.n	8006344 <USBD_StdItfReq+0xc4>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <USBD_StdItfReq+0x26>
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d14e      	bne.n	8006344 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d840      	bhi.n	8006336 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	889b      	ldrh	r3, [r3, #4]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d836      	bhi.n	800632c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	889b      	ldrh	r3, [r3, #4]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff fedb 	bl	8006082 <USBD_CoreFindIF>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2bff      	cmp	r3, #255	@ 0xff
 80062d4:	d01d      	beq.n	8006312 <USBD_StdItfReq+0x92>
 80062d6:	7bbb      	ldrb	r3, [r7, #14]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d11a      	bne.n	8006312 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062dc:	7bba      	ldrb	r2, [r7, #14]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32ae      	adds	r2, #174	@ 0xae
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80062ec:	7bba      	ldrb	r2, [r7, #14]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062f4:	7bba      	ldrb	r2, [r7, #14]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32ae      	adds	r2, #174	@ 0xae
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800630a:	e004      	b.n	8006316 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800630c:	2303      	movs	r3, #3
 800630e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006310:	e001      	b.n	8006316 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d110      	bne.n	8006340 <USBD_StdItfReq+0xc0>
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10d      	bne.n	8006340 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fdd3 	bl	8006ed0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800632a:	e009      	b.n	8006340 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fcf7 	bl	8006d22 <USBD_CtlError>
          break;
 8006334:	e004      	b.n	8006340 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fcf2 	bl	8006d22 <USBD_CtlError>
          break;
 800633e:	e000      	b.n	8006342 <USBD_StdItfReq+0xc2>
          break;
 8006340:	bf00      	nop
      }
      break;
 8006342:	e004      	b.n	800634e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fceb 	bl	8006d22 <USBD_CtlError>
      break;
 800634c:	bf00      	nop
  }

  return ret;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	889b      	ldrh	r3, [r3, #4]
 800636a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	d007      	beq.n	8006388 <USBD_StdEPReq+0x30>
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	f200 817f 	bhi.w	800667c <USBD_StdEPReq+0x324>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d02a      	beq.n	80063d8 <USBD_StdEPReq+0x80>
 8006382:	2b20      	cmp	r3, #32
 8006384:	f040 817a 	bne.w	800667c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fe85 	bl	800609c <USBD_CoreFindEP>
 8006392:	4603      	mov	r3, r0
 8006394:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006396:	7b7b      	ldrb	r3, [r7, #13]
 8006398:	2bff      	cmp	r3, #255	@ 0xff
 800639a:	f000 8174 	beq.w	8006686 <USBD_StdEPReq+0x32e>
 800639e:	7b7b      	ldrb	r3, [r7, #13]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 8170 	bne.w	8006686 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063a6:	7b7a      	ldrb	r2, [r7, #13]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063ae:	7b7a      	ldrb	r2, [r7, #13]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	32ae      	adds	r2, #174	@ 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8163 	beq.w	8006686 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063c0:	7b7a      	ldrb	r2, [r7, #13]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32ae      	adds	r2, #174	@ 0xae
 80063c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	4798      	blx	r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063d6:	e156      	b.n	8006686 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d008      	beq.n	80063f2 <USBD_StdEPReq+0x9a>
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	f300 8145 	bgt.w	8006670 <USBD_StdEPReq+0x318>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 809b 	beq.w	8006522 <USBD_StdEPReq+0x1ca>
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d03c      	beq.n	800646a <USBD_StdEPReq+0x112>
 80063f0:	e13e      	b.n	8006670 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d002      	beq.n	8006404 <USBD_StdEPReq+0xac>
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d016      	beq.n	8006430 <USBD_StdEPReq+0xd8>
 8006402:	e02c      	b.n	800645e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00d      	beq.n	8006426 <USBD_StdEPReq+0xce>
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b80      	cmp	r3, #128	@ 0x80
 800640e:	d00a      	beq.n	8006426 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 f983 	bl	8007720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800641a:	2180      	movs	r1, #128	@ 0x80
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f97f 	bl	8007720 <USBD_LL_StallEP>
 8006422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006424:	e020      	b.n	8006468 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fc7a 	bl	8006d22 <USBD_CtlError>
              break;
 800642e:	e01b      	b.n	8006468 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	885b      	ldrh	r3, [r3, #2]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10e      	bne.n	8006456 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <USBD_StdEPReq+0xfe>
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	2b80      	cmp	r3, #128	@ 0x80
 8006442:	d008      	beq.n	8006456 <USBD_StdEPReq+0xfe>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	88db      	ldrh	r3, [r3, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 f965 	bl	8007720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fd3a 	bl	8006ed0 <USBD_CtlSendStatus>

              break;
 800645c:	e004      	b.n	8006468 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fc5e 	bl	8006d22 <USBD_CtlError>
              break;
 8006466:	bf00      	nop
          }
          break;
 8006468:	e107      	b.n	800667a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d002      	beq.n	800647c <USBD_StdEPReq+0x124>
 8006476:	2b03      	cmp	r3, #3
 8006478:	d016      	beq.n	80064a8 <USBD_StdEPReq+0x150>
 800647a:	e04b      	b.n	8006514 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <USBD_StdEPReq+0x146>
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b80      	cmp	r3, #128	@ 0x80
 8006486:	d00a      	beq.n	800649e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f947 	bl	8007720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006492:	2180      	movs	r1, #128	@ 0x80
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 f943 	bl	8007720 <USBD_LL_StallEP>
 800649a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800649c:	e040      	b.n	8006520 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc3e 	bl	8006d22 <USBD_CtlError>
              break;
 80064a6:	e03b      	b.n	8006520 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	885b      	ldrh	r3, [r3, #2]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d136      	bne.n	800651e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 f94d 	bl	800775e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fd03 	bl	8006ed0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff fde4 	bl	800609c <USBD_CoreFindEP>
 80064d4:	4603      	mov	r3, r0
 80064d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064d8:	7b7b      	ldrb	r3, [r7, #13]
 80064da:	2bff      	cmp	r3, #255	@ 0xff
 80064dc:	d01f      	beq.n	800651e <USBD_StdEPReq+0x1c6>
 80064de:	7b7b      	ldrb	r3, [r7, #13]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11c      	bne.n	800651e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064e4:	7b7a      	ldrb	r2, [r7, #13]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80064ec:	7b7a      	ldrb	r2, [r7, #13]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	32ae      	adds	r2, #174	@ 0xae
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064fc:	7b7a      	ldrb	r2, [r7, #13]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32ae      	adds	r2, #174	@ 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006512:	e004      	b.n	800651e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fc03 	bl	8006d22 <USBD_CtlError>
              break;
 800651c:	e000      	b.n	8006520 <USBD_StdEPReq+0x1c8>
              break;
 800651e:	bf00      	nop
          }
          break;
 8006520:	e0ab      	b.n	800667a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d002      	beq.n	8006534 <USBD_StdEPReq+0x1dc>
 800652e:	2b03      	cmp	r3, #3
 8006530:	d032      	beq.n	8006598 <USBD_StdEPReq+0x240>
 8006532:	e097      	b.n	8006664 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <USBD_StdEPReq+0x1f2>
 800653a:	7bbb      	ldrb	r3, [r7, #14]
 800653c:	2b80      	cmp	r3, #128	@ 0x80
 800653e:	d004      	beq.n	800654a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fbed 	bl	8006d22 <USBD_CtlError>
                break;
 8006548:	e091      	b.n	800666e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800654a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800654e:	2b00      	cmp	r3, #0
 8006550:	da0b      	bge.n	800656a <USBD_StdEPReq+0x212>
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	3310      	adds	r3, #16
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	3304      	adds	r3, #4
 8006568:	e00b      	b.n	8006582 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2202      	movs	r2, #2
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc43 	bl	8006e1c <USBD_CtlSendData>
              break;
 8006596:	e06a      	b.n	800666e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800659c:	2b00      	cmp	r3, #0
 800659e:	da11      	bge.n	80065c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	f003 020f 	and.w	r2, r3, #15
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	3324      	adds	r3, #36	@ 0x24
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d117      	bne.n	80065ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fbb0 	bl	8006d22 <USBD_CtlError>
                  break;
 80065c2:	e054      	b.n	800666e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	f003 020f 	and.w	r2, r3, #15
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fb9d 	bl	8006d22 <USBD_CtlError>
                  break;
 80065e8:	e041      	b.n	800666e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da0b      	bge.n	800660a <USBD_StdEPReq+0x2b2>
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	3310      	adds	r3, #16
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	3304      	adds	r3, #4
 8006608:	e00b      	b.n	8006622 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	3304      	adds	r3, #4
 8006622:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <USBD_StdEPReq+0x2d8>
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b80      	cmp	r3, #128	@ 0x80
 800662e:	d103      	bne.n	8006638 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e00e      	b.n	8006656 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 f8ad 	bl	800779c <USBD_LL_IsStallEP>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2201      	movs	r2, #1
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e002      	b.n	8006656 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2202      	movs	r2, #2
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fbdd 	bl	8006e1c <USBD_CtlSendData>
              break;
 8006662:	e004      	b.n	800666e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fb5b 	bl	8006d22 <USBD_CtlError>
              break;
 800666c:	bf00      	nop
          }
          break;
 800666e:	e004      	b.n	800667a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fb55 	bl	8006d22 <USBD_CtlError>
          break;
 8006678:	bf00      	nop
      }
      break;
 800667a:	e005      	b.n	8006688 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fb4f 	bl	8006d22 <USBD_CtlError>
      break;
 8006684:	e000      	b.n	8006688 <USBD_StdEPReq+0x330>
      break;
 8006686:	bf00      	nop
  }

  return ret;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	885b      	ldrh	r3, [r3, #2]
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	f200 8128 	bhi.w	800690a <USBD_GetDescriptor+0x276>
 80066ba:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <USBD_GetDescriptor+0x2c>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066dd 	.word	0x080066dd
 80066c4:	080066f5 	.word	0x080066f5
 80066c8:	08006735 	.word	0x08006735
 80066cc:	0800690b 	.word	0x0800690b
 80066d0:	0800690b 	.word	0x0800690b
 80066d4:	080068ab 	.word	0x080068ab
 80066d8:	080068d7 	.word	0x080068d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
      break;
 80066f2:	e112      	b.n	800691a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10d      	bne.n	8006718 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006704:	f107 0208 	add.w	r2, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	2202      	movs	r2, #2
 8006714:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006716:	e100      	b.n	800691a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	f107 0208 	add.w	r2, r7, #8
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	2202      	movs	r2, #2
 8006730:	701a      	strb	r2, [r3, #0]
      break;
 8006732:	e0f2      	b.n	800691a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	885b      	ldrh	r3, [r3, #2]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b05      	cmp	r3, #5
 800673c:	f200 80ac 	bhi.w	8006898 <USBD_GetDescriptor+0x204>
 8006740:	a201      	add	r2, pc, #4	@ (adr r2, 8006748 <USBD_GetDescriptor+0xb4>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	08006761 	.word	0x08006761
 800674c:	08006795 	.word	0x08006795
 8006750:	080067c9 	.word	0x080067c9
 8006754:	080067fd 	.word	0x080067fd
 8006758:	08006831 	.word	0x08006831
 800675c:	08006865 	.word	0x08006865
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7c12      	ldrb	r2, [r2, #16]
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006782:	e091      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 facb 	bl	8006d22 <USBD_CtlError>
            err++;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	3301      	adds	r3, #1
 8006790:	72fb      	strb	r3, [r7, #11]
          break;
 8006792:	e089      	b.n	80068a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	7c12      	ldrb	r2, [r2, #16]
 80067ac:	f107 0108 	add.w	r1, r7, #8
 80067b0:	4610      	mov	r0, r2
 80067b2:	4798      	blx	r3
 80067b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b6:	e077      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fab1 	bl	8006d22 <USBD_CtlError>
            err++;
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	3301      	adds	r3, #1
 80067c4:	72fb      	strb	r3, [r7, #11]
          break;
 80067c6:	e06f      	b.n	80068a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	7c12      	ldrb	r2, [r2, #16]
 80067e0:	f107 0108 	add.w	r1, r7, #8
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ea:	e05d      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa97 	bl	8006d22 <USBD_CtlError>
            err++;
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	3301      	adds	r3, #1
 80067f8:	72fb      	strb	r3, [r7, #11]
          break;
 80067fa:	e055      	b.n	80068a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	7c12      	ldrb	r2, [r2, #16]
 8006814:	f107 0108 	add.w	r1, r7, #8
 8006818:	4610      	mov	r0, r2
 800681a:	4798      	blx	r3
 800681c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800681e:	e043      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa7d 	bl	8006d22 <USBD_CtlError>
            err++;
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	3301      	adds	r3, #1
 800682c:	72fb      	strb	r3, [r7, #11]
          break;
 800682e:	e03b      	b.n	80068a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	7c12      	ldrb	r2, [r2, #16]
 8006848:	f107 0108 	add.w	r1, r7, #8
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006852:	e029      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fa63 	bl	8006d22 <USBD_CtlError>
            err++;
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	3301      	adds	r3, #1
 8006860:	72fb      	strb	r3, [r7, #11]
          break;
 8006862:	e021      	b.n	80068a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	7c12      	ldrb	r2, [r2, #16]
 800687c:	f107 0108 	add.w	r1, r7, #8
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
 8006884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006886:	e00f      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa49 	bl	8006d22 <USBD_CtlError>
            err++;
 8006890:	7afb      	ldrb	r3, [r7, #11]
 8006892:	3301      	adds	r3, #1
 8006894:	72fb      	strb	r3, [r7, #11]
          break;
 8006896:	e007      	b.n	80068a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa41 	bl	8006d22 <USBD_CtlError>
          err++;
 80068a0:	7afb      	ldrb	r3, [r7, #11]
 80068a2:	3301      	adds	r3, #1
 80068a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068a6:	bf00      	nop
      }
      break;
 80068a8:	e037      	b.n	800691a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7c1b      	ldrb	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ba:	f107 0208 	add.w	r2, r7, #8
 80068be:	4610      	mov	r0, r2
 80068c0:	4798      	blx	r3
 80068c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068c4:	e029      	b.n	800691a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa2a 	bl	8006d22 <USBD_CtlError>
        err++;
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	3301      	adds	r3, #1
 80068d2:	72fb      	strb	r3, [r7, #11]
      break;
 80068d4:	e021      	b.n	800691a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7c1b      	ldrb	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e6:	f107 0208 	add.w	r2, r7, #8
 80068ea:	4610      	mov	r0, r2
 80068ec:	4798      	blx	r3
 80068ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	2207      	movs	r2, #7
 80068f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068f8:	e00f      	b.n	800691a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa10 	bl	8006d22 <USBD_CtlError>
        err++;
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	3301      	adds	r3, #1
 8006906:	72fb      	strb	r3, [r7, #11]
      break;
 8006908:	e007      	b.n	800691a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa08 	bl	8006d22 <USBD_CtlError>
      err++;
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	3301      	adds	r3, #1
 8006916:	72fb      	strb	r3, [r7, #11]
      break;
 8006918:	bf00      	nop
  }

  if (err != 0U)
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d11e      	bne.n	800695e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	88db      	ldrh	r3, [r3, #6]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d016      	beq.n	8006956 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006928:	893b      	ldrh	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00e      	beq.n	800694c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	88da      	ldrh	r2, [r3, #6]
 8006932:	893b      	ldrh	r3, [r7, #8]
 8006934:	4293      	cmp	r3, r2
 8006936:	bf28      	it	cs
 8006938:	4613      	movcs	r3, r2
 800693a:	b29b      	uxth	r3, r3
 800693c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800693e:	893b      	ldrh	r3, [r7, #8]
 8006940:	461a      	mov	r2, r3
 8006942:	68f9      	ldr	r1, [r7, #12]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa69 	bl	8006e1c <USBD_CtlSendData>
 800694a:	e009      	b.n	8006960 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9e7 	bl	8006d22 <USBD_CtlError>
 8006954:	e004      	b.n	8006960 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 faba 	bl	8006ed0 <USBD_CtlSendStatus>
 800695c:	e000      	b.n	8006960 <USBD_GetDescriptor+0x2cc>
    return;
 800695e:	bf00      	nop
  }
}
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop

08006968 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	889b      	ldrh	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d131      	bne.n	80069de <USBD_SetAddress+0x76>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	88db      	ldrh	r3, [r3, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d12d      	bne.n	80069de <USBD_SetAddress+0x76>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	2b7f      	cmp	r3, #127	@ 0x7f
 8006988:	d829      	bhi.n	80069de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006994:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d104      	bne.n	80069ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f9bc 	bl	8006d22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	e01d      	b.n	80069e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7bfa      	ldrb	r2, [r7, #15]
 80069b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 ff1b 	bl	80077f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa86 	bl	8006ed0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d2:	e009      	b.n	80069e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069dc:	e004      	b.n	80069e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f99e 	bl	8006d22 <USBD_CtlError>
  }
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	885b      	ldrh	r3, [r3, #2]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	4b4e      	ldr	r3, [pc, #312]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a08:	4b4d      	ldr	r3, [pc, #308]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d905      	bls.n	8006a1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f985 	bl	8006d22 <USBD_CtlError>
    return USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e08c      	b.n	8006b36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d002      	beq.n	8006a2e <USBD_SetConfig+0x3e>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d029      	beq.n	8006a80 <USBD_SetConfig+0x90>
 8006a2c:	e075      	b.n	8006b1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a2e:	4b44      	ldr	r3, [pc, #272]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d020      	beq.n	8006a78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a36:	4b42      	ldr	r3, [pc, #264]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a40:	4b3f      	ldr	r3, [pc, #252]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fe ffe3 	bl	8005a12 <USBD_SetClassConfig>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f962 	bl	8006d22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a66:	e065      	b.n	8006b34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa31 	bl	8006ed0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2203      	movs	r2, #3
 8006a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006a76:	e05d      	b.n	8006b34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa29 	bl	8006ed0 <USBD_CtlSendStatus>
      break;
 8006a7e:	e059      	b.n	8006b34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a80:	4b2f      	ldr	r3, [pc, #188]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d112      	bne.n	8006aae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006a90:	4b2b      	ldr	r3, [pc, #172]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a9a:	4b29      	ldr	r3, [pc, #164]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fe ffd2 	bl	8005a4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa12 	bl	8006ed0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006aac:	e042      	b.n	8006b34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006aae:	4b24      	ldr	r3, [pc, #144]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d02a      	beq.n	8006b12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fe ffc0 	bl	8005a4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006aca:	4b1d      	ldr	r3, [pc, #116]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fe ff99 	bl	8005a12 <USBD_SetClassConfig>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00f      	beq.n	8006b0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f918 	bl	8006d22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe ffa5 	bl	8005a4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006b08:	e014      	b.n	8006b34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9e0 	bl	8006ed0 <USBD_CtlSendStatus>
      break;
 8006b10:	e010      	b.n	8006b34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9dc 	bl	8006ed0 <USBD_CtlSendStatus>
      break;
 8006b18:	e00c      	b.n	8006b34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f900 	bl	8006d22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b22:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <USBD_SetConfig+0x150>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fe ff8e 	bl	8005a4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
      break;
 8006b32:	bf00      	nop
  }

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	2000075c 	.word	0x2000075c

08006b44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	88db      	ldrh	r3, [r3, #6]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d004      	beq.n	8006b60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8e2 	bl	8006d22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b5e:	e023      	b.n	8006ba8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	dc02      	bgt.n	8006b72 <USBD_GetConfig+0x2e>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dc03      	bgt.n	8006b78 <USBD_GetConfig+0x34>
 8006b70:	e015      	b.n	8006b9e <USBD_GetConfig+0x5a>
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d00b      	beq.n	8006b8e <USBD_GetConfig+0x4a>
 8006b76:	e012      	b.n	8006b9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3308      	adds	r3, #8
 8006b82:	2201      	movs	r2, #1
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f948 	bl	8006e1c <USBD_CtlSendData>
        break;
 8006b8c:	e00c      	b.n	8006ba8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3304      	adds	r3, #4
 8006b92:	2201      	movs	r2, #1
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f940 	bl	8006e1c <USBD_CtlSendData>
        break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f8be 	bl	8006d22 <USBD_CtlError>
        break;
 8006ba6:	bf00      	nop
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d81e      	bhi.n	8006c06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	88db      	ldrh	r3, [r3, #6]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d004      	beq.n	8006bda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f8a5 	bl	8006d22 <USBD_CtlError>
        break;
 8006bd8:	e01a      	b.n	8006c10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f043 0202 	orr.w	r2, r3, #2
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f90c 	bl	8006e1c <USBD_CtlSendData>
      break;
 8006c04:	e004      	b.n	8006c10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f88a 	bl	8006d22 <USBD_CtlError>
      break;
 8006c0e:	bf00      	nop
  }
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	885b      	ldrh	r3, [r3, #2]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d107      	bne.n	8006c3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f94c 	bl	8006ed0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c38:	e013      	b.n	8006c62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d10b      	bne.n	8006c5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	889b      	ldrh	r3, [r3, #4]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f93c 	bl	8006ed0 <USBD_CtlSendStatus>
}
 8006c58:	e003      	b.n	8006c62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f860 	bl	8006d22 <USBD_CtlError>
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d80b      	bhi.n	8006c9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d10c      	bne.n	8006ca4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f91c 	bl	8006ed0 <USBD_CtlSendStatus>
      }
      break;
 8006c98:	e004      	b.n	8006ca4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f840 	bl	8006d22 <USBD_CtlError>
      break;
 8006ca2:	e000      	b.n	8006ca6 <USBD_ClrFeature+0x3c>
      break;
 8006ca4:	bf00      	nop
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff fa40 	bl	800615e <SWAPBYTE>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff fa33 	bl	800615e <SWAPBYTE>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff fa26 	bl	800615e <SWAPBYTE>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	80da      	strh	r2, [r3, #6]
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d2c:	2180      	movs	r1, #128	@ 0x80
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fcf6 	bl	8007720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d34:	2100      	movs	r1, #0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fcf2 	bl	8007720 <USBD_LL_StallEP>
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d042      	beq.n	8006de0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006d5e:	6938      	ldr	r0, [r7, #16]
 8006d60:	f000 f842 	bl	8006de8 <USBD_GetLen>
 8006d64:	4603      	mov	r3, r0
 8006d66:	3301      	adds	r3, #1
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6e:	d808      	bhi.n	8006d82 <USBD_GetString+0x3e>
 8006d70:	6938      	ldr	r0, [r7, #16]
 8006d72:	f000 f839 	bl	8006de8 <USBD_GetLen>
 8006d76:	4603      	mov	r3, r0
 8006d78:	3301      	adds	r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	e001      	b.n	8006d86 <USBD_GetString+0x42>
 8006d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	4413      	add	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	2203      	movs	r2, #3
 8006da4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	3301      	adds	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dac:	e013      	b.n	8006dd6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	4413      	add	r3, r2
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
    idx++;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4413      	add	r3, r2
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e7      	bne.n	8006dae <USBD_GetString+0x6a>
 8006dde:	e000      	b.n	8006de2 <USBD_GetString+0x9e>
    return;
 8006de0:	bf00      	nop
  }
}
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006df8:	e005      	b.n	8006e06 <USBD_GetLen+0x1e>
  {
    len++;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f5      	bne.n	8006dfa <USBD_GetLen+0x12>
  }

  return len;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fcf5 	bl	8007832 <USBD_LL_Transmit>

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	2100      	movs	r1, #0
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fce4 	bl	8007832 <USBD_LL_Transmit>

  return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2203      	movs	r2, #3
 8006e84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fce8 	bl	8007874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fcd7 	bl	8007874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2204      	movs	r2, #4
 8006edc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fca3 	bl	8007832 <USBD_LL_Transmit>

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2205      	movs	r2, #5
 8006f02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f06:	2300      	movs	r3, #0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fcb1 	bl	8007874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f20:	2200      	movs	r2, #0
 8006f22:	4912      	ldr	r1, [pc, #72]	@ (8006f6c <MX_USB_DEVICE_Init+0x50>)
 8006f24:	4812      	ldr	r0, [pc, #72]	@ (8006f70 <MX_USB_DEVICE_Init+0x54>)
 8006f26:	f7fe fcf7 	bl	8005918 <USBD_Init>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f30:	f7f9 fc02 	bl	8000738 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f34:	490f      	ldr	r1, [pc, #60]	@ (8006f74 <MX_USB_DEVICE_Init+0x58>)
 8006f36:	480e      	ldr	r0, [pc, #56]	@ (8006f70 <MX_USB_DEVICE_Init+0x54>)
 8006f38:	f7fe fd1e 	bl	8005978 <USBD_RegisterClass>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f42:	f7f9 fbf9 	bl	8000738 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f46:	490c      	ldr	r1, [pc, #48]	@ (8006f78 <MX_USB_DEVICE_Init+0x5c>)
 8006f48:	4809      	ldr	r0, [pc, #36]	@ (8006f70 <MX_USB_DEVICE_Init+0x54>)
 8006f4a:	f7fe fc15 	bl	8005778 <USBD_CDC_RegisterInterface>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f54:	f7f9 fbf0 	bl	8000738 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f58:	4805      	ldr	r0, [pc, #20]	@ (8006f70 <MX_USB_DEVICE_Init+0x54>)
 8006f5a:	f7fe fd43 	bl	80059e4 <USBD_Start>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f64:	f7f9 fbe8 	bl	8000738 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f68:	bf00      	nop
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200000dc 	.word	0x200000dc
 8006f70:	20000760 	.word	0x20000760
 8006f74:	20000048 	.word	0x20000048
 8006f78:	200000c8 	.word	0x200000c8

08006f7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f80:	2200      	movs	r2, #0
 8006f82:	4905      	ldr	r1, [pc, #20]	@ (8006f98 <CDC_Init_FS+0x1c>)
 8006f84:	4805      	ldr	r0, [pc, #20]	@ (8006f9c <CDC_Init_FS+0x20>)
 8006f86:	f7fe fc11 	bl	80057ac <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f8a:	4905      	ldr	r1, [pc, #20]	@ (8006fa0 <CDC_Init_FS+0x24>)
 8006f8c:	4803      	ldr	r0, [pc, #12]	@ (8006f9c <CDC_Init_FS+0x20>)
 8006f8e:	f7fe fc2f 	bl	80057f0 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8006f92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	2000123c 	.word	0x2000123c
 8006f9c:	20000760 	.word	0x20000760
 8006fa0:	20000a3c 	.word	0x20000a3c

08006fa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8006fa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	71fb      	strb	r3, [r7, #7]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	2b23      	cmp	r3, #35	@ 0x23
 8006fc8:	d84a      	bhi.n	8007060 <CDC_Control_FS+0xac>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <CDC_Control_FS+0x1c>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08007061 	.word	0x08007061
 8006fd4:	08007061 	.word	0x08007061
 8006fd8:	08007061 	.word	0x08007061
 8006fdc:	08007061 	.word	0x08007061
 8006fe0:	08007061 	.word	0x08007061
 8006fe4:	08007061 	.word	0x08007061
 8006fe8:	08007061 	.word	0x08007061
 8006fec:	08007061 	.word	0x08007061
 8006ff0:	08007061 	.word	0x08007061
 8006ff4:	08007061 	.word	0x08007061
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08007061 	.word	0x08007061
 8007000:	08007061 	.word	0x08007061
 8007004:	08007061 	.word	0x08007061
 8007008:	08007061 	.word	0x08007061
 800700c:	08007061 	.word	0x08007061
 8007010:	08007061 	.word	0x08007061
 8007014:	08007061 	.word	0x08007061
 8007018:	08007061 	.word	0x08007061
 800701c:	08007061 	.word	0x08007061
 8007020:	08007061 	.word	0x08007061
 8007024:	08007061 	.word	0x08007061
 8007028:	08007061 	.word	0x08007061
 800702c:	08007061 	.word	0x08007061
 8007030:	08007061 	.word	0x08007061
 8007034:	08007061 	.word	0x08007061
 8007038:	08007061 	.word	0x08007061
 800703c:	08007061 	.word	0x08007061
 8007040:	08007061 	.word	0x08007061
 8007044:	08007061 	.word	0x08007061
 8007048:	08007061 	.word	0x08007061
 800704c:	08007061 	.word	0x08007061
 8007050:	08007061 	.word	0x08007061
 8007054:	08007061 	.word	0x08007061
 8007058:	08007061 	.word	0x08007061
 800705c:	08007061 	.word	0x08007061
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007060:	bf00      	nop
	}

	return (USBD_OK);
 8007062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SbW_Request_Received_CB(&S, Buf, (uint16_t) (*Len));
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4807      	ldr	r0, [pc, #28]	@ (80070a4 <CDC_Receive_FS+0x34>)
 8007086:	f7fd fe05 	bl	8004c94 <SbW_Request_Received_CB>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	4806      	ldr	r0, [pc, #24]	@ (80070a8 <CDC_Receive_FS+0x38>)
 800708e:	f7fe fbaf 	bl	80057f0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007092:	4805      	ldr	r0, [pc, #20]	@ (80070a8 <CDC_Receive_FS+0x38>)
 8007094:	f7fe fc0a 	bl	80058ac <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007098:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000000 	.word	0x20000000
 80070a8:	20000760 	.word	0x20000760

080070ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 80070bc:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <CDC_Transmit_FS+0x48>)
 80070be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070c2:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e00b      	b.n	80070ea <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80070d2:	887b      	ldrh	r3, [r7, #2]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4806      	ldr	r0, [pc, #24]	@ (80070f4 <CDC_Transmit_FS+0x48>)
 80070da:	f7fe fb67 	bl	80057ac <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070de:	4805      	ldr	r0, [pc, #20]	@ (80070f4 <CDC_Transmit_FS+0x48>)
 80070e0:	f7fe fba4 	bl	800582c <USBD_CDC_TransmitPacket>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000760 	.word	0x20000760

080070f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800710a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2212      	movs	r2, #18
 800712c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800712e:	4b03      	ldr	r3, [pc, #12]	@ (800713c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	200000f8 	.word	0x200000f8

08007140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2204      	movs	r2, #4
 8007150:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007152:	4b03      	ldr	r3, [pc, #12]	@ (8007160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	2000010c 	.word	0x2000010c

08007164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	6039      	str	r1, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4907      	ldr	r1, [pc, #28]	@ (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
 800717a:	4808      	ldr	r0, [pc, #32]	@ (800719c <USBD_FS_ProductStrDescriptor+0x38>)
 800717c:	f7ff fde2 	bl	8006d44 <USBD_GetString>
 8007180:	e004      	b.n	800718c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	4904      	ldr	r1, [pc, #16]	@ (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
 8007186:	4805      	ldr	r0, [pc, #20]	@ (800719c <USBD_FS_ProductStrDescriptor+0x38>)
 8007188:	f7ff fddc 	bl	8006d44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800718c:	4b02      	ldr	r3, [pc, #8]	@ (8007198 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20001a3c 	.word	0x20001a3c
 800719c:	080079f0 	.word	0x080079f0

080071a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	4904      	ldr	r1, [pc, #16]	@ (80071c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071b0:	4804      	ldr	r0, [pc, #16]	@ (80071c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071b2:	f7ff fdc7 	bl	8006d44 <USBD_GetString>
  return USBD_StrDesc;
 80071b6:	4b02      	ldr	r3, [pc, #8]	@ (80071c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20001a3c 	.word	0x20001a3c
 80071c4:	08007a08 	.word	0x08007a08

080071c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	221a      	movs	r2, #26
 80071d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071da:	f000 f843 	bl	8007264 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071de:	4b02      	ldr	r3, [pc, #8]	@ (80071e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000110 	.word	0x20000110

080071ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4907      	ldr	r1, [pc, #28]	@ (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007202:	4808      	ldr	r0, [pc, #32]	@ (8007224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007204:	f7ff fd9e 	bl	8006d44 <USBD_GetString>
 8007208:	e004      	b.n	8007214 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4904      	ldr	r1, [pc, #16]	@ (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
 800720e:	4805      	ldr	r0, [pc, #20]	@ (8007224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007210:	f7ff fd98 	bl	8006d44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007214:	4b02      	ldr	r3, [pc, #8]	@ (8007220 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20001a3c 	.word	0x20001a3c
 8007224:	08007a1c 	.word	0x08007a1c

08007228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4907      	ldr	r1, [pc, #28]	@ (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800723e:	4808      	ldr	r0, [pc, #32]	@ (8007260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007240:	f7ff fd80 	bl	8006d44 <USBD_GetString>
 8007244:	e004      	b.n	8007250 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	4904      	ldr	r1, [pc, #16]	@ (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800724a:	4805      	ldr	r0, [pc, #20]	@ (8007260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800724c:	f7ff fd7a 	bl	8006d44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	@ (800725c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20001a3c 	.word	0x20001a3c
 8007260:	08007a28 	.word	0x08007a28

08007264 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800726a:	4b0f      	ldr	r3, [pc, #60]	@ (80072a8 <Get_SerialNum+0x44>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007270:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <Get_SerialNum+0x48>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007276:	4b0e      	ldr	r3, [pc, #56]	@ (80072b0 <Get_SerialNum+0x4c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800728a:	2208      	movs	r2, #8
 800728c:	4909      	ldr	r1, [pc, #36]	@ (80072b4 <Get_SerialNum+0x50>)
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f814 	bl	80072bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007294:	2204      	movs	r2, #4
 8007296:	4908      	ldr	r1, [pc, #32]	@ (80072b8 <Get_SerialNum+0x54>)
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f000 f80f 	bl	80072bc <IntToUnicode>
  }
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	1fff7a10 	.word	0x1fff7a10
 80072ac:	1fff7a14 	.word	0x1fff7a14
 80072b0:	1fff7a18 	.word	0x1fff7a18
 80072b4:	20000112 	.word	0x20000112
 80072b8:	20000122 	.word	0x20000122

080072bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
 80072d2:	e027      	b.n	8007324 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	0f1b      	lsrs	r3, r3, #28
 80072d8:	2b09      	cmp	r3, #9
 80072da:	d80b      	bhi.n	80072f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	0f1b      	lsrs	r3, r3, #28
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4619      	mov	r1, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	440b      	add	r3, r1
 80072ec:	3230      	adds	r2, #48	@ 0x30
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e00a      	b.n	800730a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0f1b      	lsrs	r3, r3, #28
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4619      	mov	r1, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	440b      	add	r3, r1
 8007304:	3237      	adds	r2, #55	@ 0x37
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	3301      	adds	r3, #1
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	3301      	adds	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
 8007324:	7dfa      	ldrb	r2, [r7, #23]
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	429a      	cmp	r2, r3
 800732a:	d3d3      	bcc.n	80072d4 <IntToUnicode+0x18>
  }
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	@ 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800735c:	d13a      	bne.n	80073d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	4b1e      	ldr	r3, [pc, #120]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007366:	4a1d      	ldr	r2, [pc, #116]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6313      	str	r3, [r2, #48]	@ 0x30
 800736e:	4b1b      	ldr	r3, [pc, #108]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800737a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800737e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007380:	2302      	movs	r3, #2
 8007382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007388:	2303      	movs	r3, #3
 800738a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800738c:	230a      	movs	r3, #10
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4619      	mov	r1, r3
 8007396:	4812      	ldr	r0, [pc, #72]	@ (80073e0 <HAL_PCD_MspInit+0xa4>)
 8007398:	f7f9 fcca 	bl	8000d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800739c:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 800739e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a0:	4a0e      	ldr	r2, [pc, #56]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 80073a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 80073ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b0:	4a0a      	ldr	r2, [pc, #40]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 80073b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80073b8:	4b08      	ldr	r3, [pc, #32]	@ (80073dc <HAL_PCD_MspInit+0xa0>)
 80073ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073c4:	2200      	movs	r2, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	2043      	movs	r0, #67	@ 0x43
 80073ca:	f7f9 fc7a 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073ce:	2043      	movs	r0, #67	@ 0x43
 80073d0:	f7f9 fc93 	bl	8000cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073d4:	bf00      	nop
 80073d6:	3728      	adds	r7, #40	@ 0x28
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40023800 	.word	0x40023800
 80073e0:	40020000 	.word	0x40020000

080073e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fe fb3f 	bl	8005a7e <USBD_LL_SetupStage>
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	4619      	mov	r1, r3
 8007432:	f7fe fb79 	bl	8005b28 <USBD_LL_DataOutStage>
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	3320      	adds	r3, #32
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	4619      	mov	r1, r3
 8007466:	f7fe fc12 	bl	8005c8e <USBD_LL_DataInStage>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fd4c 	bl	8005f1e <USBD_LL_SOF>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	79db      	ldrb	r3, [r3, #7]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e008      	b.n	80074ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	79db      	ldrb	r3, [r3, #7]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d102      	bne.n	80074b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	e001      	b.n	80074ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80074b6:	f7f9 f93f 	bl	8000738 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074c0:	7bfa      	ldrb	r2, [r7, #15]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe fce6 	bl	8005e96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fc8e 	bl	8005df2 <USBD_LL_Reset>
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fce1 	bl	8005eb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007506:	f043 0301 	orr.w	r3, r3, #1
 800750a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7adb      	ldrb	r3, [r3, #11]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007514:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <HAL_PCD_SuspendCallback+0x48>)
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	4a03      	ldr	r2, [pc, #12]	@ (8007528 <HAL_PCD_SuspendCallback+0x48>)
 800751a:	f043 0306 	orr.w	r3, r3, #6
 800751e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed00 	.word	0xe000ed00

0800752c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fcd7 	bl	8005eee <USBD_LL_Resume>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fd2f 	bl	8005fc2 <USBD_LL_IsoOUTIncomplete>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fceb 	bl	8005f5e <USBD_LL_IsoINIncomplete>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd41 	bl	8006026 <USBD_LL_DevConnected>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fd3e 	bl	800603c <USBD_LL_DevDisconnected>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d13c      	bne.n	8007652 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075d8:	4a20      	ldr	r2, [pc, #128]	@ (800765c <USBD_LL_Init+0x94>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1e      	ldr	r2, [pc, #120]	@ (800765c <USBD_LL_Init+0x94>)
 80075e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075e8:	4b1c      	ldr	r3, [pc, #112]	@ (800765c <USBD_LL_Init+0x94>)
 80075ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80075ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075f0:	4b1a      	ldr	r3, [pc, #104]	@ (800765c <USBD_LL_Init+0x94>)
 80075f2:	2204      	movs	r2, #4
 80075f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075f6:	4b19      	ldr	r3, [pc, #100]	@ (800765c <USBD_LL_Init+0x94>)
 80075f8:	2202      	movs	r2, #2
 80075fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075fc:	4b17      	ldr	r3, [pc, #92]	@ (800765c <USBD_LL_Init+0x94>)
 80075fe:	2200      	movs	r2, #0
 8007600:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007602:	4b16      	ldr	r3, [pc, #88]	@ (800765c <USBD_LL_Init+0x94>)
 8007604:	2202      	movs	r2, #2
 8007606:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007608:	4b14      	ldr	r3, [pc, #80]	@ (800765c <USBD_LL_Init+0x94>)
 800760a:	2200      	movs	r2, #0
 800760c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800760e:	4b13      	ldr	r3, [pc, #76]	@ (800765c <USBD_LL_Init+0x94>)
 8007610:	2200      	movs	r2, #0
 8007612:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007614:	4b11      	ldr	r3, [pc, #68]	@ (800765c <USBD_LL_Init+0x94>)
 8007616:	2200      	movs	r2, #0
 8007618:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800761a:	4b10      	ldr	r3, [pc, #64]	@ (800765c <USBD_LL_Init+0x94>)
 800761c:	2200      	movs	r2, #0
 800761e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007620:	4b0e      	ldr	r3, [pc, #56]	@ (800765c <USBD_LL_Init+0x94>)
 8007622:	2200      	movs	r2, #0
 8007624:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007626:	480d      	ldr	r0, [pc, #52]	@ (800765c <USBD_LL_Init+0x94>)
 8007628:	f7f9 fd1e 	bl	8001068 <HAL_PCD_Init>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007632:	f7f9 f881 	bl	8000738 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007636:	2180      	movs	r1, #128	@ 0x80
 8007638:	4808      	ldr	r0, [pc, #32]	@ (800765c <USBD_LL_Init+0x94>)
 800763a:	f7fa ff4a 	bl	80024d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800763e:	2240      	movs	r2, #64	@ 0x40
 8007640:	2100      	movs	r1, #0
 8007642:	4806      	ldr	r0, [pc, #24]	@ (800765c <USBD_LL_Init+0x94>)
 8007644:	f7fa fefe 	bl	8002444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007648:	2280      	movs	r2, #128	@ 0x80
 800764a:	2101      	movs	r1, #1
 800764c:	4803      	ldr	r0, [pc, #12]	@ (800765c <USBD_LL_Init+0x94>)
 800764e:	f7fa fef9 	bl	8002444 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20001c3c 	.word	0x20001c3c

08007660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007676:	4618      	mov	r0, r3
 8007678:	f7f9 fe05 	bl	8001286 <HAL_PCD_Start>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f942 	bl	800790c <USBD_Get_USB_Status>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800768c:	7bbb      	ldrb	r3, [r7, #14]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	461a      	mov	r2, r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	70fb      	strb	r3, [r7, #3]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70bb      	strb	r3, [r7, #2]
 80076ac:	4613      	mov	r3, r2
 80076ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80076be:	78bb      	ldrb	r3, [r7, #2]
 80076c0:	883a      	ldrh	r2, [r7, #0]
 80076c2:	78f9      	ldrb	r1, [r7, #3]
 80076c4:	f7fa fad9 	bl	8001c7a <HAL_PCD_EP_Open>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f91c 	bl	800790c <USBD_Get_USB_Status>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	460b      	mov	r3, r1
 80076ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076fc:	78fa      	ldrb	r2, [r7, #3]
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f7fa fb24 	bl	8001d4e <HAL_PCD_EP_Close>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f8fd 	bl	800790c <USBD_Get_USB_Status>
 8007712:	4603      	mov	r3, r0
 8007714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007716:	7bbb      	ldrb	r3, [r7, #14]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7fa fbdc 	bl	8001efc <HAL_PCD_EP_SetStall>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f8de 	bl	800790c <USBD_Get_USB_Status>
 8007750:	4603      	mov	r3, r0
 8007752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007754:	7bbb      	ldrb	r3, [r7, #14]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fa fc20 	bl	8001fc2 <HAL_PCD_EP_ClrStall>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f8bf 	bl	800790c <USBD_Get_USB_Status>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007792:	7bbb      	ldrb	r3, [r7, #14]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da0b      	bge.n	80077d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	4613      	mov	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	3316      	adds	r3, #22
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	e00b      	b.n	80077e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80077e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fa fa0d 	bl	8001c32 <HAL_PCD_SetAddress>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f874 	bl	800790c <USBD_Get_USB_Status>
 8007824:	4603      	mov	r3, r0
 8007826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007828:	7bbb      	ldrb	r3, [r7, #14]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	460b      	mov	r3, r1
 8007840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007850:	7af9      	ldrb	r1, [r7, #11]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	f7fa fb17 	bl	8001e88 <HAL_PCD_EP_Transmit>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f853 	bl	800790c <USBD_Get_USB_Status>
 8007866:	4603      	mov	r3, r0
 8007868:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800786a:	7dbb      	ldrb	r3, [r7, #22]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	460b      	mov	r3, r1
 8007882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007892:	7af9      	ldrb	r1, [r7, #11]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	f7fa faa3 	bl	8001de2 <HAL_PCD_EP_Receive>
 800789c:	4603      	mov	r3, r0
 800789e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f832 	bl	800790c <USBD_Get_USB_Status>
 80078a8:	4603      	mov	r3, r0
 80078aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fa fac3 	bl	8001e58 <HAL_PCD_EP_GetRxCount>
 80078d2:	4603      	mov	r3, r0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078e4:	4b03      	ldr	r3, [pc, #12]	@ (80078f4 <USBD_static_malloc+0x18>)
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20002120 	.word	0x20002120

080078f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d817      	bhi.n	8007950 <USBD_Get_USB_Status+0x44>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <USBD_Get_USB_Status+0x1c>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007939 	.word	0x08007939
 800792c:	0800793f 	.word	0x0800793f
 8007930:	08007945 	.word	0x08007945
 8007934:	0800794b 	.word	0x0800794b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
    break;
 800793c:	e00b      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800793e:	2303      	movs	r3, #3
 8007940:	73fb      	strb	r3, [r7, #15]
    break;
 8007942:	e008      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007944:	2301      	movs	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e005      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e002      	b.n	8007956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	bf00      	nop
  }
  return usb_status;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <memset>:
 8007964:	4402      	add	r2, r0
 8007966:	4603      	mov	r3, r0
 8007968:	4293      	cmp	r3, r2
 800796a:	d100      	bne.n	800796e <memset+0xa>
 800796c:	4770      	bx	lr
 800796e:	f803 1b01 	strb.w	r1, [r3], #1
 8007972:	e7f9      	b.n	8007968 <memset+0x4>

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	@ (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	@ (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	@ (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	@ (80079b8 <__libc_init_array+0x44>)
 8007988:	f000 f826 	bl	80079d8 <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	08007a50 	.word	0x08007a50
 80079b0:	08007a50 	.word	0x08007a50
 80079b4:	08007a50 	.word	0x08007a50
 80079b8:	08007a54 	.word	0x08007a54

080079bc <memcpy>:
 80079bc:	440a      	add	r2, r1
 80079be:	4291      	cmp	r1, r2
 80079c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c4:	d100      	bne.n	80079c8 <memcpy+0xc>
 80079c6:	4770      	bx	lr
 80079c8:	b510      	push	{r4, lr}
 80079ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d2:	4291      	cmp	r1, r2
 80079d4:	d1f9      	bne.n	80079ca <memcpy+0xe>
 80079d6:	bd10      	pop	{r4, pc}

080079d8 <_init>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr

080079e4 <_fini>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr
