
USB_Custom_Protocol_F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007c68  08007c68  00008c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc0  08007cc0  0000914c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc8  08007cc8  0000914c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc8  08007cc8  00008cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ccc  08007ccc  00008ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08007cd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000914c  2**0
                  CONTENTS
 10 .bss          0000238c  2000014c  2000014c  0000914c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200024d8  200024d8  0000914c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a80  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035d8  00000000  00000000  0001cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  000201d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d28  00000000  00000000  00021338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fbc  00000000  00000000  00022060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179bf  00000000  00000000  0004401c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f41  00000000  00000000  0005b9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d91c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047bc  00000000  00000000  0011d960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  0012211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000014c 	.word	0x2000014c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c50 	.word	0x08007c50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000150 	.word	0x20000150
 80001c4:	08007c50 	.word	0x08007c50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SbW_Protocol_Reply>:
uint8_t TxBuffer[TxRxBufferSize];
uint8_t RxBuffer[TxRxBufferSize];

extern DataFrame F;

void SbW_Protocol_Reply(uint8_t *data, uint16_t len) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(data, len);
 8000500:	887b      	ldrh	r3, [r7, #2]
 8000502:	4619      	mov	r1, r3
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f006 ff0b 	bl	8007320 <CDC_Transmit_FS>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <App_User_Callback>:

void App_User_Callback(SbW_Err_Codes_t Error_Code) {
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	71fb      	strb	r3, [r7, #7]
	// Implement error handling if needed
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	//F.G[0]++;
	SbW_Timer_Callback(&S);
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000532:	f004 fdd7 	bl	80050e4 <SbW_Timer_Callback>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020

08000544 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000548:	f000 fa6a 	bl	8000a20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800054c:	f000 f812 	bl	8000574 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000550:	f000 f8cc 	bl	80006ec <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000554:	f006 fe1c 	bl	8007190 <MX_USB_DEVICE_Init>
	MX_TIM1_Init();
 8000558:	f000 f878 	bl	800064c <MX_TIM1_Init>

	 // Initialize the FIFO before using*/
	//fifo_init(&S.MessageFifo);

	// Simulate periodic callback that queues the frame
	SbW_Init(&S);
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <main+0x28>)
 800055e:	f004 fc69 	bl	8004e34 <SbW_Init>
	HAL_TIM_Base_Start_IT(&htim1);
 8000562:	4803      	ldr	r0, [pc, #12]	@ (8000570 <main+0x2c>)
 8000564:	f002 fcd8 	bl	8002f18 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <main+0x24>
 800056c:	20000020 	.word	0x20000020
 8000570:	20000268 	.word	0x20000268

08000574 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f007 fb2a 	bl	8007bdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a28      	ldr	r2, [pc, #160]	@ (8000644 <SystemClock_Config+0xd0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <SystemClock_Config+0xd4>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80005e8:	23a8      	movs	r3, #168	@ 0xa8
 80005ea:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 ffa7 	bl	800254c <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x94>
		Error_Handler();
 8000604:	f000 f89a 	bl	800073c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000614:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000618:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2105      	movs	r1, #5
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa08 	bl	8002a3c <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc2>
		Error_Handler();
 8000632:	f000 f883 	bl	800073c <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000636:	f002 fae7 	bl	8002c08 <HAL_RCC_EnableCSS>
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_TIM1_Init+0x98>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <MX_TIM1_Init+0x9c>)
 800066c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000670:	2253      	movs	r2, #83	@ 0x53
 8000672:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_TIM1_Init+0x98>)
 800067c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000680:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000688:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_TIM1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_TIM1_Init+0x98>)
 8000696:	f002 fbf0 	bl	8002e7a <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x58>
		Error_Handler();
 80006a0:	f000 f84c 	bl	800073c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_TIM1_Init+0x98>)
 80006b2:	f002 fd91 	bl	80031d8 <HAL_TIM_ConfigClockSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x74>
		Error_Handler();
 80006bc:	f000 f83e 	bl	800073c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_TIM1_Init+0x98>)
 80006ce:	f002 ffb9 	bl	8003644 <HAL_TIMEx_MasterConfigSynchronization>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80006d8:	f000 f830 	bl	800073c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000268 	.word	0x20000268
 80006e8:	40010000 	.word	0x40010000

080006ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_GPIO_Init+0x4c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <MX_GPIO_Init+0x4c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_GPIO_Init+0x4c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <MX_GPIO_Init+0x4c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_GPIO_Init+0x4c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <HAL_MspInit+0x4c>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075c:	6453      	str	r3, [r2, #68]	@ 0x44
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_MspInit+0x4c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	@ 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <HAL_TIM_Base_MspInit+0x48>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d115      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_TIM_Base_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <HAL_TIM_Base_MspInit+0x4c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_TIM_Base_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2019      	movs	r0, #25
 80007cc:	f000 fa99 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007d0:	2019      	movs	r0, #25
 80007d2:	f000 fab2 	bl	8000d3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010000 	.word	0x40010000
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007ec:	f002 fb2a 	bl	8002e44 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x8>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000842:	f000 f93f 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000850:	4802      	ldr	r0, [pc, #8]	@ (800085c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000852:	f002 fbd1 	bl	8002ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000268 	.word	0x20000268

08000860 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000864:	4802      	ldr	r0, [pc, #8]	@ (8000870 <OTG_FS_IRQHandler+0x10>)
 8000866:	f000 fd63 	bl	8001330 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20001dd4 	.word	0x20001dd4

08000874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800089c:	f7ff ffea 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	@ (80008e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f007 f991 	bl	8007bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fe3b 	bl	8000544 <main>
  bx  lr    
 80008ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80008dc:	08007cd0 	.word	0x08007cd0
  ldr r2, =_sbss
 80008e0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80008e4:	200024d8 	.word	0x200024d8

080008e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC_IRQHandler>

080008ea <fifo_init>:
#include "FIFO.h"

// Initialize the FIFO
void fifo_init(fifo_T *f) {
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	f->head = f->UserHead = -1; // Outside the buffer
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008f8:	811a      	strh	r2, [r3, #8]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	801a      	strh	r2, [r3, #0]
	f->tail = f->UserTail = 0;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	815a      	strh	r2, [r3, #10]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	805a      	strh	r2, [r3, #2]
	f->count = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	809a      	strh	r2, [r3, #4]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <fifo_is_empty>:

// Check if the FIFO is empty
int8_t fifo_is_empty(const fifo_T *f) {
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
	return (f->count == 0);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf0c      	ite	eq
 8000936:	2301      	moveq	r3, #1
 8000938:	2300      	movne	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	b25b      	sxtb	r3, r3
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <fifo_enqueue>:

// Enqueue data into the FIFO (overwrite oldest element if full)
int16_t fifo_enqueue(fifo_T *f) {
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	f->head = (f->head + 1) % f->Fifo_Size; // Circular wrap-around
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000958:	3301      	adds	r3, #1
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	88d2      	ldrh	r2, [r2, #6]
 800095e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000962:	fb01 f202 	mul.w	r2, r1, r2
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	b21a      	sxth	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	801a      	strh	r2, [r3, #0]
	// Remainder = write index in the buffer
	f->UserHead = f->head;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	811a      	strh	r2, [r3, #8]
	if (f->count == f->Fifo_Size) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	889a      	ldrh	r2, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	88db      	ldrh	r3, [r3, #6]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10e      	bne.n	80009a2 <fifo_enqueue+0x58>
		// FIFO is full → Overwrite → Move tail forward
		f->tail = (f->tail + 1) % f->Fifo_Size;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800098a:	3301      	adds	r3, #1
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	88d2      	ldrh	r2, [r2, #6]
 8000990:	fb93 f1f2 	sdiv	r1, r3, r2
 8000994:	fb01 f202 	mul.w	r2, r1, r2
 8000998:	1a9b      	subs	r3, r3, r2
 800099a:	b21a      	sxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	805a      	strh	r2, [r3, #2]
 80009a0:	e005      	b.n	80009ae <fifo_enqueue+0x64>
	} else {
		f->count++;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	889b      	ldrh	r3, [r3, #4]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	809a      	strh	r2, [r3, #4]
	}
	return f->UserHead;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <fifo_dequeue>:

// Dequeue data from the FIFO
int16_t fifo_dequeue(fifo_T *f) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(f)) {
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ffac 	bl	8000926 <fifo_is_empty>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d119      	bne.n	8000a08 <fifo_dequeue+0x48>
		f->UserTail = f->tail;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	815a      	strh	r2, [r3, #10]
		f->count--;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	809a      	strh	r2, [r3, #4]
		f->tail = (f->tail + 1) % f->Fifo_Size; // Circular wrap-around
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009f0:	3301      	adds	r3, #1
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	88d2      	ldrh	r2, [r2, #6]
 80009f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80009fa:	fb01 f202 	mul.w	r2, r1, r2
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	805a      	strh	r2, [r3, #2]
 8000a06:	e003      	b.n	8000a10 <fifo_dequeue+0x50>
	} else {
		f->UserTail = -1; // FIFO is empty
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a0e:	815a      	strh	r2, [r3, #10]
	}
	return f->UserTail;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f94f 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fe78 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f967 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000050 	.word	0x20000050
 8000abc:	20000058 	.word	0x20000058
 8000ac0:	20000054 	.word	0x20000054

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000058 	.word	0x20000058
 8000ae8:	200008f0 	.word	0x200008f0

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200008f0 	.word	0x200008f0

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff ffee 	bl	8000aec <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffde 	bl	8000aec <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000058 	.word	0x20000058

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	@ (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff29 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff3e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff31 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e16b      	b.n	8001064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 815a 	bne.w	800105e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80b4 	beq.w	800105e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b60      	ldr	r3, [pc, #384]	@ (800107c <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a5f      	ldr	r2, [pc, #380]	@ (800107c <HAL_GPIO_Init+0x30c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a5b      	ldr	r2, [pc, #364]	@ (8001080 <HAL_GPIO_Init+0x310>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a52      	ldr	r2, [pc, #328]	@ (8001084 <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	@ (8001088 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	@ (800108c <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	@ (8001090 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	@ (8001094 <HAL_GPIO_Init+0x324>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	@ (8001098 <HAL_GPIO_Init+0x328>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	@ (80010a0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x20a>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00e      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	@ (8001080 <HAL_GPIO_Init+0x310>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae90 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e101      	b.n	80012be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f006 fa6d 	bl	80075b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e8:	d102      	bne.n	80010f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fc4c 	bl	8003992 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7c1a      	ldrb	r2, [r3, #16]
 8001102:	f88d 2000 	strb.w	r2, [sp]
 8001106:	3304      	adds	r3, #4
 8001108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800110a:	f002 fb2b 	bl	8003764 <USB_CoreInit>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0ce      	b.n	80012be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fc44 	bl	80039b4 <USB_SetCurrentMode>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2202      	movs	r2, #2
 8001136:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0bf      	b.n	80012be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e04a      	b.n	80011da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3315      	adds	r3, #21
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3314      	adds	r3, #20
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	b298      	uxth	r0, r3
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	332e      	adds	r3, #46	@ 0x2e
 8001180:	4602      	mov	r2, r0
 8001182:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	3318      	adds	r3, #24
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	331c      	adds	r3, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	3320      	adds	r3, #32
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3324      	adds	r3, #36	@ 0x24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	3301      	adds	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3af      	bcc.n	8001144 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e044      	b.n	8001274 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	3301      	adds	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3b5      	bcc.n	80011ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7c1a      	ldrb	r2, [r3, #16]
 8001286:	f88d 2000 	strb.w	r2, [sp]
 800128a:	3304      	adds	r3, #4
 800128c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800128e:	f002 fbdd 	bl	8003a4c <USB_DevInit>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e00c      	b.n	80012be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fc27 	bl	8004b0a <USB_DevDisconnect>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_Start+0x1c>
 80012de:	2302      	movs	r3, #2
 80012e0:	e022      	b.n	8001328 <HAL_PCD_Start+0x62>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001302:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fb2e 	bl	8003970 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fbd5 	bl	8004ac8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b08d      	sub	sp, #52	@ 0x34
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fc93 	bl	8004c72 <USB_GetMode>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 848c 	bne.w	8001c6c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fbf7 	bl	8004b4c <USB_ReadInterrupts>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8482 	beq.w	8001c6a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fbe4 	bl	8004b4c <USB_ReadInterrupts>
 8001384:	4603      	mov	r3, r0
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b02      	cmp	r3, #2
 800138c:	d107      	bne.n	800139e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f002 0202 	and.w	r2, r2, #2
 800139c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fbd2 	bl	8004b4c <USB_ReadInterrupts>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d161      	bne.n	8001476 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0210 	bic.w	r2, r2, #16
 80013c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f003 020f 	and.w	r2, r3, #15
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	3304      	adds	r3, #4
 80013e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013ec:	d124      	bne.n	8001438 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d035      	beq.n	8001466 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001408:	b29b      	uxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	6a38      	ldr	r0, [r7, #32]
 800140e:	f003 fa09 	bl	8004824 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141e:	441a      	add	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001430:	441a      	add	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	e016      	b.n	8001466 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800143e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001442:	d110      	bne.n	8001466 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800144a:	2208      	movs	r2, #8
 800144c:	4619      	mov	r1, r3
 800144e:	6a38      	ldr	r0, [r7, #32]
 8001450:	f003 f9e8 	bl	8004824 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001460:	441a      	add	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0210 	orr.w	r2, r2, #16
 8001474:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fb66 	bl	8004b4c <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001486:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800148a:	f040 80a7 	bne.w	80015dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fb6b 	bl	8004b72 <USB_ReadDevAllOutEpInterrupt>
 800149c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800149e:	e099      	b.n	80015d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 808e 	beq.w	80015c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fb8f 	bl	8004bda <USB_ReadDevOutEPInterrupt>
 80014bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00c      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d4:	461a      	mov	r2, r3
 80014d6:	2301      	movs	r3, #1
 80014d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fea3 	bl	8002228 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00c      	beq.n	8001506 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f8:	461a      	mov	r2, r3
 80014fa:	2308      	movs	r3, #8
 80014fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 ff79 	bl	80023f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	2310      	movs	r3, #16
 8001520:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d030      	beq.n	800158e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001534:	2b80      	cmp	r3, #128	@ 0x80
 8001536:	d109      	bne.n	800154c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800154c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	3304      	adds	r3, #4
 8001560:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	78db      	ldrb	r3, [r3, #3]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d108      	bne.n	800157c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2200      	movs	r2, #0
 800156e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f006 f922 	bl	80077c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001588:	461a      	mov	r2, r3
 800158a:	2302      	movs	r3, #2
 800158c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015a4:	461a      	mov	r2, r3
 80015a6:	2320      	movs	r3, #32
 80015a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d009      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015c0:	461a      	mov	r2, r3
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	3301      	adds	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f47f af62 	bne.w	80014a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fab3 	bl	8004b4c <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015f0:	f040 80db 	bne.w	80017aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fad4 	bl	8004ba6 <USB_ReadDevAllInEpInterrupt>
 80015fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001604:	e0cd      	b.n	80017a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80c2 	beq.w	8001796 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fafa 	bl	8004c16 <USB_ReadDevInEPInterrupt>
 8001622:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d057      	beq.n	80016de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	2201      	movs	r2, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43db      	mvns	r3, r3
 8001648:	69f9      	ldr	r1, [r7, #28]
 800164a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800164e:	4013      	ands	r3, r2
 8001650:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800165e:	461a      	mov	r2, r3
 8001660:	2301      	movs	r3, #1
 8001662:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	799b      	ldrb	r3, [r3, #6]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d132      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3320      	adds	r3, #32
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4403      	add	r3, r0
 800168c:	331c      	adds	r3, #28
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4419      	add	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4403      	add	r3, r0
 80016a0:	3320      	adds	r3, #32
 80016a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d113      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x3a2>
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3324      	adds	r3, #36	@ 0x24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016ca:	461a      	mov	r2, r3
 80016cc:	2101      	movs	r1, #1
 80016ce:	f003 fb01 	bl	8004cd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f005 ffec 	bl	80076b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016f4:	461a      	mov	r2, r3
 80016f6:	2308      	movs	r3, #8
 80016f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001710:	461a      	mov	r2, r3
 8001712:	2310      	movs	r3, #16
 8001714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800172c:	461a      	mov	r2, r3
 800172e:	2340      	movs	r3, #64	@ 0x40
 8001730:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800173c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800173e:	6a38      	ldr	r0, [r7, #32]
 8001740:	f002 fae8 	bl	8003d14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	3310      	adds	r3, #16
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	78db      	ldrb	r3, [r3, #3]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d108      	bne.n	8001772 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2200      	movs	r2, #0
 8001764:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f006 f839 	bl	80077e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800177e:	461a      	mov	r2, r3
 8001780:	2302      	movs	r3, #2
 8001782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800178e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fcbd 	bl	8002110 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	3301      	adds	r3, #1
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f af2e 	bne.w	8001606 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 f9cc 	bl	8004b4c <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017be:	d122      	bne.n	8001806 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017e6:	2100      	movs	r1, #0
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fea3 	bl	8002534 <HAL_PCDEx_LPM_Callback>
 80017ee:	e002      	b.n	80017f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f005 ffd7 	bl	80077a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 f99e 	bl	8004b4c <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800181a:	d112      	bne.n	8001842 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d102      	bne.n	8001832 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f005 ff93 	bl	8007758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001840:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f003 f980 	bl	8004b4c <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001856:	f040 80b7 	bne.w	80019c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2110      	movs	r1, #16
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fa4d 	bl	8003d14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800187e:	e046      	b.n	800190e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188c:	461a      	mov	r2, r3
 800188e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001892:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a4:	0151      	lsls	r1, r2, #5
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	440a      	add	r2, r1
 80018aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c0:	461a      	mov	r2, r3
 80018c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d8:	0151      	lsls	r1, r2, #5
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	440a      	add	r2, r1
 80018de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f8:	0151      	lsls	r1, r2, #5
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	440a      	add	r2, r1
 80018fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001902:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001906:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190a:	3301      	adds	r3, #1
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001916:	4293      	cmp	r3, r2
 8001918:	d3b2      	bcc.n	8001880 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001928:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800192c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7bdb      	ldrb	r3, [r3, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001946:	f043 030b 	orr.w	r3, r3, #11
 800194a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195c:	f043 030b 	orr.w	r3, r3, #11
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	e015      	b.n	8001990 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001972:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001976:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800197a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800198a:	f043 030b 	orr.w	r3, r3, #11
 800198e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800199e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b2:	461a      	mov	r2, r3
 80019b4:	f003 f98e 	bl	8004cd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 f8bd 	bl	8004b4c <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019dc:	d123      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f953 	bl	8004c8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fa0a 	bl	8003e06 <USB_GetDevSpeed>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681c      	ldr	r4, [r3, #0]
 80019fe:	f001 fa15 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8001a02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f001 ff0e 	bl	800382c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f005 fe78 	bl	8007706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 f88e 	bl	8004b4c <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d10a      	bne.n	8001a50 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f005 fe55 	bl	80076ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f002 0208 	and.w	r2, r2, #8
 8001a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 f879 	bl	8004b4c <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a60:	2b80      	cmp	r3, #128	@ 0x80
 8001a62:	d123      	bne.n	8001aac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	e014      	b.n	8001aa0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d105      	bne.n	8001a9a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fb0a 	bl	80020ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d3e4      	bcc.n	8001a76 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 f84b 	bl	8004b4c <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ac0:	d13c      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac6:	e02b      	b.n	8001b20 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d115      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001aee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da12      	bge.n	8001b1a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3317      	adds	r3, #23
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 faca 	bl	80020ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d3cd      	bcc.n	8001ac8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f803 	bl	8004b4c <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b50:	d156      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b56:	e045      	b.n	8001be4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d12e      	bne.n	8001bde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da2b      	bge.n	8001bde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d121      	bne.n	8001bde <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bda:	6053      	str	r3, [r2, #4]
            break;
 8001bdc:	e008      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d3b3      	bcc.n	8001b58 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 ffa1 	bl	8004b4c <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c14:	d10a      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f005 fdf6 	bl	8007808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 ff8b 	bl	8004b4c <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d115      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f005 fde6 	bl	8007824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6859      	ldr	r1, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	e000      	b.n	8001c6c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c6a:	bf00      	nop
    }
  }
}
 8001c6c:	3734      	adds	r7, #52	@ 0x34
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}

08001c72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_PCD_SetAddress+0x1a>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e012      	b.n	8001cb2 <HAL_PCD_SetAddress+0x40>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 feea 	bl	8004a7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	70fb      	strb	r3, [r7, #3]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	803b      	strh	r3, [r7, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da0f      	bge.n	8001d00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 020f 	and.w	r2, r3, #15
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	3310      	adds	r3, #16
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	705a      	strb	r2, [r3, #1]
 8001cfe:	e00f      	b.n	8001d20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d2c:	883b      	ldrh	r3, [r7, #0]
 8001d2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	78ba      	ldrb	r2, [r7, #2]
 8001d3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_EP_Open+0xae>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_Open+0xcc>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68f9      	ldr	r1, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 f86a 	bl	8003e50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d84:	7afb      	ldrb	r3, [r7, #11]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da0f      	bge.n	8001dc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3310      	adds	r3, #16
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	705a      	strb	r2, [r3, #1]
 8001dc0:	e00f      	b.n	8001de2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_EP_Close+0x6e>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e00e      	b.n	8001e1a <HAL_PCD_EP_Close+0x8c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 f8a8 	bl	8003f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	799b      	ldrb	r3, [r3, #6]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	461a      	mov	r2, r3
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	f002 f945 	bl	8004118 <USB_EPStartXfer>

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 020f 	and.w	r2, r3, #15
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3310      	adds	r3, #16
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	799b      	ldrb	r3, [r3, #6]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	799b      	ldrb	r3, [r3, #6]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	f002 f8f3 	bl	8004118 <USB_EPStartXfer>

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	7912      	ldrb	r2, [r2, #4]
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e04f      	b.n	8001ffa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da0f      	bge.n	8001f82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	3310      	adds	r3, #16
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	705a      	strb	r2, [r3, #1]
 8001f80:	e00d      	b.n	8001f9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_PCD_EP_SetStall+0x82>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e01d      	b.n	8001ffa <HAL_PCD_EP_SetStall+0xbe>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fc81 	bl	80048d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7999      	ldrb	r1, [r3, #6]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fea:	461a      	mov	r2, r3
 8001fec:	f002 fe72 	bl	8004cd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	7912      	ldrb	r2, [r2, #4]
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e042      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da0f      	bge.n	8002048 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3310      	adds	r3, #16
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	705a      	strb	r2, [r3, #1]
 8002046:	e00f      	b.n	8002068 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_ClrStall+0x86>
 8002084:	2302      	movs	r3, #2
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f002 fc8a 	bl	80049b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da0c      	bge.n	80020dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	f003 020f 	and.w	r2, r3, #15
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	3310      	adds	r3, #16
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e00c      	b.n	80020f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	3304      	adds	r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 faa9 	bl	8004654 <USB_EPStopXfer>
 8002102:	4603      	mov	r3, r0
 8002104:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002106:	7afb      	ldrb	r3, [r7, #11]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	@ 0x28
 8002114:	af02      	add	r7, sp, #8
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	3310      	adds	r3, #16
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d901      	bls.n	8002148 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e06b      	b.n	8002220 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	429a      	cmp	r2, r3
 800215c:	d902      	bls.n	8002164 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	3303      	adds	r3, #3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216c:	e02a      	b.n	80021c4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	429a      	cmp	r2, r3
 8002182:	d902      	bls.n	800218a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3303      	adds	r3, #3
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68d9      	ldr	r1, [r3, #12]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4603      	mov	r3, r0
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f002 fafe 	bl	80047a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	441a      	add	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	441a      	add	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d809      	bhi.n	80021ee <PCD_WriteEmptyTxFifo+0xde>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d203      	bcs.n	80021ee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1bf      	bne.n	800216e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d811      	bhi.n	800221e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2201      	movs	r2, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800220e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	43db      	mvns	r3, r3
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800221a:	4013      	ands	r3, r2
 800221c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	333c      	adds	r3, #60	@ 0x3c
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	799b      	ldrb	r3, [r3, #6]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d17b      	bne.n	8002356 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4a61      	ldr	r2, [pc, #388]	@ (80023f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	f240 80b9 	bls.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80b3 	beq.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228a:	461a      	mov	r2, r3
 800228c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002290:	6093      	str	r3, [r2, #8]
 8002292:	e0a7      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e098      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8093 	bne.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	@ (80023f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d90f      	bls.n	80022e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e07e      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	440b      	add	r3, r1
 8002308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	f002 fcce 	bl	8004cd4 <USB_EP0_OutStart>
 8002338:	e006      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	441a      	add	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f005 f996 	bl	8007680 <HAL_PCD_DataOutStageCallback>
 8002354:	e046      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a26      	ldr	r2, [pc, #152]	@ (80023f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d124      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800237a:	6093      	str	r3, [r2, #8]
 800237c:	e032      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	2320      	movs	r3, #32
 8002398:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f005 f96d 	bl	8007680 <HAL_PCD_DataOutStageCallback>
 80023a6:	e01d      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023d0:	461a      	mov	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	f002 fc7e 	bl	8004cd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f005 f94e 	bl	8007680 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	4f54300a 	.word	0x4f54300a
 80023f4:	4f54310a 	.word	0x4f54310a

080023f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	333c      	adds	r3, #60	@ 0x3c
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d90e      	bls.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800244a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f005 f905 	bl	800765c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90c      	bls.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	799b      	ldrb	r3, [r3, #6]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f002 fc30 	bl	8004cd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	4f54300a 	.word	0x4f54300a

08002484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	4613      	mov	r3, r2
 8002492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024a2:	883b      	ldrh	r3, [r7, #0]
 80024a4:	0419      	lsls	r1, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80024b0:	e028      	b.n	8002504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e00d      	b.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3340      	adds	r3, #64	@ 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3ec      	bcc.n	80024c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	0418      	lsls	r0, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4302      	orrs	r2, r0
 80024fc:	3340      	adds	r3, #64	@ 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e267      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e242      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b69      	ldr	r3, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe fa72 	bl	8000aec <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fa6e 	bl	8000aec <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e207      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe fa5e 	bl	8000aec <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe fa5a 	bl	8000aec <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1f3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1c7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fa13 	bl	8000aec <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe fa0f 	bl	8000aec <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1a8      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe f9f2 	bl	8000aec <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7fe f9ee 	bl	8000aec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e187      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe f9d2 	bl	8000aec <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe f9ce 	bl	8000aec <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e167      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe f9bb 	bl	8000aec <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe f9b7 	bl	8000aec <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e150      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe f977 	bl	8000aec <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe f973 	bl	8000aec <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e10c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ea>
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a5e      	ldr	r2, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5c      	ldr	r3, [pc, #368]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe f938 	bl	8000aec <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe f934 	bl	8000aec <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0cb      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x334>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe f922 	bl	8000aec <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe f91e 	bl	8000aec <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b5      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d05c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d141      	bne.n	8002982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe f8f2 	bl	8000aec <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe f8ee 	bl	8000aec <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e087      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	491b      	ldr	r1, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe f8c7 	bl	8000aec <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe f8c3 	bl	8000aec <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x416>
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe f8b0 	bl	8000aec <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe f8ac 	bl	8000aec <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e045      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
 80029ae:	e03d      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e038      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0cc      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d90c      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d044      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e067      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fd ffde 	bl	8000aec <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fd ffda 	bl	8000aec <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e04f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d20c      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f82d 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd ff3e 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08007cb0 	.word	0x08007cb0
 8002c00:	20000050 	.word	0x20000050
 8002c04:	20000054 	.word	0x20000054

08002c08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_RCC_EnableCSS+0x14>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	4247004c 	.word	0x4247004c

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c24:	b094      	sub	sp, #80	@ 0x50
 8002c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c38:	4b79      	ldr	r3, [pc, #484]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d00d      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x40>
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	f200 80e1 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c52:	e0db      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b73      	ldr	r3, [pc, #460]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c58:	e0db      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c5a:	4b73      	ldr	r3, [pc, #460]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c5e:	e0d8      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c60:	4b6f      	ldr	r3, [pc, #444]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c76:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	099b      	lsrs	r3, r3, #6
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	f04f 0000 	mov.w	r0, #0
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	0159      	lsls	r1, r3, #5
 8002ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca4:	0150      	lsls	r0, r2, #5
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4621      	mov	r1, r4
 8002cac:	1a51      	subs	r1, r2, r1
 8002cae:	6139      	str	r1, [r7, #16]
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	018b      	lsls	r3, r1, #6
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cce:	4651      	mov	r1, sl
 8002cd0:	018a      	lsls	r2, r1, #6
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd8:	4659      	mov	r1, fp
 8002cda:	eb63 0901 	sbc.w	r9, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf2:	4690      	mov	r8, r2
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	eb18 0303 	adds.w	r3, r8, r3
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	462b      	mov	r3, r5
 8002d00:	eb49 0303 	adc.w	r3, r9, r3
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d12:	4629      	mov	r1, r5
 8002d14:	024b      	lsls	r3, r1, #9
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	024a      	lsls	r2, r1, #9
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d26:	2200      	movs	r2, #0
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d30:	f7fd fa4a 	bl	80001c8 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d3c:	e058      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b38      	ldr	r3, [pc, #224]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	4611      	mov	r1, r2
 8002d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	0159      	lsls	r1, r3, #5
 8002d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6a:	0150      	lsls	r0, r2, #5
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4641      	mov	r1, r8
 8002d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d76:	4649      	mov	r1, r9
 8002d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d90:	ebb2 040a 	subs.w	r4, r2, sl
 8002d94:	eb63 050b 	sbc.w	r5, r3, fp
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	00eb      	lsls	r3, r5, #3
 8002da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da6:	00e2      	lsls	r2, r4, #3
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	4643      	mov	r3, r8
 8002dae:	18e3      	adds	r3, r4, r3
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	464b      	mov	r3, r9
 8002db4:	eb45 0303 	adc.w	r3, r5, r3
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	028b      	lsls	r3, r1, #10
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	028a      	lsls	r2, r1, #10
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	61fa      	str	r2, [r7, #28]
 8002de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de4:	f7fd f9f0 	bl	80001c8 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3750      	adds	r7, #80	@ 0x50
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000050 	.word	0x20000050

08002e44 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b80      	cmp	r3, #128	@ 0x80
 8002e52:	d104      	bne.n	8002e5e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002e54:	f000 f80a 	bl	8002e6c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	701a      	strb	r2, [r3, #0]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	4002380e 	.word	0x4002380e

08002e6c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e041      	b.n	8002f10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fd fc79 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f000 fa7d 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e04e      	b.n	8002fce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a23      	ldr	r2, [pc, #140]	@ (8002fdc <HAL_TIM_Base_Start_IT+0xc4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5a:	d01d      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <HAL_TIM_Base_Start_IT+0xd4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d111      	bne.n	8002fbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d010      	beq.n	8002fcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fba:	e007      	b.n	8002fcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40000c00 	.word	0x40000c00
 8002fec:	40010400 	.word	0x40010400
 8002ff0:	40014000 	.word	0x40014000
 8002ff4:	40001800 	.word	0x40001800

08002ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d020      	beq.n	800305c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0202 	mvn.w	r2, #2
 800302c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f999 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f98b 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f99c 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d020      	beq.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0204 	mvn.w	r2, #4
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f973 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f965 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f976 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d020      	beq.n	80030f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01b      	beq.n	80030f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0208 	mvn.w	r2, #8
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f94d 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f93f 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f950 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d020      	beq.n	8003140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0210 	mvn.w	r2, #16
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2208      	movs	r2, #8
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f927 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f919 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f92a 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0201 	mvn.w	r2, #1
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd f9e2 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fae4 	bl	8003750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8fb 	bl	80033a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0220 	mvn.w	r2, #32
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fab6 	bl	800373c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_TIM_ConfigClockSource+0x1c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e0b4      	b.n	800335e <HAL_TIM_ConfigClockSource+0x186>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800321a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322c:	d03e      	beq.n	80032ac <HAL_TIM_ConfigClockSource+0xd4>
 800322e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003232:	f200 8087 	bhi.w	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323a:	f000 8086 	beq.w	800334a <HAL_TIM_ConfigClockSource+0x172>
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003242:	d87f      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b70      	cmp	r3, #112	@ 0x70
 8003246:	d01a      	beq.n	800327e <HAL_TIM_ConfigClockSource+0xa6>
 8003248:	2b70      	cmp	r3, #112	@ 0x70
 800324a:	d87b      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b60      	cmp	r3, #96	@ 0x60
 800324e:	d050      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003250:	2b60      	cmp	r3, #96	@ 0x60
 8003252:	d877      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b50      	cmp	r3, #80	@ 0x50
 8003256:	d03c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003258:	2b50      	cmp	r3, #80	@ 0x50
 800325a:	d873      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d058      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x13a>
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d86f      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b30      	cmp	r3, #48	@ 0x30
 8003266:	d064      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 8003268:	2b30      	cmp	r3, #48	@ 0x30
 800326a:	d86b      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d060      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d867      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b10      	cmp	r3, #16
 800327a:	d05a      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	e062      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800328e:	f000 f9b9 	bl	8003604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	609a      	str	r2, [r3, #8]
      break;
 80032aa:	e04f      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032bc:	f000 f9a2 	bl	8003604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ce:	609a      	str	r2, [r3, #8]
      break;
 80032d0:	e03c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	461a      	mov	r2, r3
 80032e0:	f000 f916 	bl	8003510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2150      	movs	r1, #80	@ 0x50
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f96f 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 80032f0:	e02c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 f935 	bl	800356e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2160      	movs	r1, #96	@ 0x60
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f95f 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 8003310:	e01c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	461a      	mov	r2, r3
 8003320:	f000 f8f6 	bl	8003510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2140      	movs	r1, #64	@ 0x40
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f94f 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 8003330:	e00c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f000 f946 	bl	80035ce <TIM_ITRx_SetConfig>
      break;
 8003342:	e003      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      break;
 8003348:	e000      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800334a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d00f      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <TIM_Base_SetConfig+0x130>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <TIM_Base_SetConfig+0x134>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a41      	ldr	r2, [pc, #260]	@ (80034f0 <TIM_Base_SetConfig+0x138>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a40      	ldr	r2, [pc, #256]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d108      	bne.n	800340a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a35      	ldr	r2, [pc, #212]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02b      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d027      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a32      	ldr	r2, [pc, #200]	@ (80034e8 <TIM_Base_SetConfig+0x130>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d023      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a31      	ldr	r2, [pc, #196]	@ (80034ec <TIM_Base_SetConfig+0x134>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a30      	ldr	r2, [pc, #192]	@ (80034f0 <TIM_Base_SetConfig+0x138>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01b      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2f      	ldr	r2, [pc, #188]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d017      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2e      	ldr	r2, [pc, #184]	@ (80034f8 <TIM_Base_SetConfig+0x140>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2d      	ldr	r2, [pc, #180]	@ (80034fc <TIM_Base_SetConfig+0x144>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00f      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2c      	ldr	r2, [pc, #176]	@ (8003500 <TIM_Base_SetConfig+0x148>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2b      	ldr	r2, [pc, #172]	@ (8003504 <TIM_Base_SetConfig+0x14c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2a      	ldr	r2, [pc, #168]	@ (8003508 <TIM_Base_SetConfig+0x150>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a29      	ldr	r2, [pc, #164]	@ (800350c <TIM_Base_SetConfig+0x154>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d108      	bne.n	800347c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <TIM_Base_SetConfig+0x12c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0xf8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <TIM_Base_SetConfig+0x13c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]
  }
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40010400 	.word	0x40010400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800
 8003504:	40001800 	.word	0x40001800
 8003508:	40001c00 	.word	0x40001c00
 800350c:	40002000 	.word	0x40002000

08003510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800353a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 030a 	bic.w	r3, r3, #10
 800354c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	621a      	str	r2, [r3, #32]
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800356e:	b480      	push	{r7}
 8003570:	b087      	sub	sp, #28
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f023 0210 	bic.w	r2, r3, #16
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	031b      	lsls	r3, r3, #12
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f043 0307 	orr.w	r3, r3, #7
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800361e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	431a      	orrs	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e05a      	b.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a8:	d01d      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1a      	ldr	r2, [pc, #104]	@ (800372c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a18      	ldr	r2, [pc, #96]	@ (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a17      	ldr	r2, [pc, #92]	@ (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a15      	ldr	r2, [pc, #84]	@ (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10c      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40010400 	.word	0x40010400
 8003734:	40014000 	.word	0x40014000
 8003738:	40001800 	.word	0x40001800

0800373c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003764:	b084      	sub	sp, #16
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	f107 001c 	add.w	r0, r7, #28
 8003772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003776:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800377a:	2b01      	cmp	r3, #1
 800377c:	d123      	bne.n	80037c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f001 fae8 	bl	8004d90 <USB_CoreReset>
 80037c0:	4603      	mov	r3, r0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	e01b      	b.n	80037fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f001 fadc 	bl	8004d90 <USB_CoreReset>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80037f0:	e005      	b.n	80037fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037fe:	7fbb      	ldrb	r3, [r7, #30]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10b      	bne.n	800381c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f043 0206 	orr.w	r2, r3, #6
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003828:	b004      	add	sp, #16
 800382a:	4770      	bx	lr

0800382c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d165      	bne.n	800390c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4a41      	ldr	r2, [pc, #260]	@ (8003948 <USB_SetTurnaroundTime+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d906      	bls.n	8003856 <USB_SetTurnaroundTime+0x2a>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a40      	ldr	r2, [pc, #256]	@ (800394c <USB_SetTurnaroundTime+0x120>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d202      	bcs.n	8003856 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003850:	230f      	movs	r3, #15
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e062      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4a3c      	ldr	r2, [pc, #240]	@ (800394c <USB_SetTurnaroundTime+0x120>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d306      	bcc.n	800386c <USB_SetTurnaroundTime+0x40>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4a3b      	ldr	r2, [pc, #236]	@ (8003950 <USB_SetTurnaroundTime+0x124>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d202      	bcs.n	800386c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003866:	230e      	movs	r3, #14
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e057      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4a38      	ldr	r2, [pc, #224]	@ (8003950 <USB_SetTurnaroundTime+0x124>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d306      	bcc.n	8003882 <USB_SetTurnaroundTime+0x56>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4a37      	ldr	r2, [pc, #220]	@ (8003954 <USB_SetTurnaroundTime+0x128>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d202      	bcs.n	8003882 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800387c:	230d      	movs	r3, #13
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e04c      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4a33      	ldr	r2, [pc, #204]	@ (8003954 <USB_SetTurnaroundTime+0x128>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d306      	bcc.n	8003898 <USB_SetTurnaroundTime+0x6c>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4a32      	ldr	r2, [pc, #200]	@ (8003958 <USB_SetTurnaroundTime+0x12c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d802      	bhi.n	8003898 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003892:	230c      	movs	r3, #12
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e041      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4a2f      	ldr	r2, [pc, #188]	@ (8003958 <USB_SetTurnaroundTime+0x12c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d906      	bls.n	80038ae <USB_SetTurnaroundTime+0x82>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4a2e      	ldr	r2, [pc, #184]	@ (800395c <USB_SetTurnaroundTime+0x130>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d802      	bhi.n	80038ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038a8:	230b      	movs	r3, #11
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e036      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <USB_SetTurnaroundTime+0x130>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d906      	bls.n	80038c4 <USB_SetTurnaroundTime+0x98>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a29      	ldr	r2, [pc, #164]	@ (8003960 <USB_SetTurnaroundTime+0x134>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d802      	bhi.n	80038c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038be:	230a      	movs	r3, #10
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e02b      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <USB_SetTurnaroundTime+0x134>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d906      	bls.n	80038da <USB_SetTurnaroundTime+0xae>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4a25      	ldr	r2, [pc, #148]	@ (8003964 <USB_SetTurnaroundTime+0x138>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d202      	bcs.n	80038da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038d4:	2309      	movs	r3, #9
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e020      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <USB_SetTurnaroundTime+0x138>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d306      	bcc.n	80038f0 <USB_SetTurnaroundTime+0xc4>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4a20      	ldr	r2, [pc, #128]	@ (8003968 <USB_SetTurnaroundTime+0x13c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d802      	bhi.n	80038f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ea:	2308      	movs	r3, #8
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e015      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <USB_SetTurnaroundTime+0x13c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d906      	bls.n	8003906 <USB_SetTurnaroundTime+0xda>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	@ (800396c <USB_SetTurnaroundTime+0x140>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d202      	bcs.n	8003906 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003900:	2307      	movs	r3, #7
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e00a      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003906:	2306      	movs	r3, #6
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e007      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003912:	2309      	movs	r3, #9
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e001      	b.n	800391c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003918:	2309      	movs	r3, #9
 800391a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	029b      	lsls	r3, r3, #10
 8003930:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	00d8acbf 	.word	0x00d8acbf
 800394c:	00e4e1c0 	.word	0x00e4e1c0
 8003950:	00f42400 	.word	0x00f42400
 8003954:	01067380 	.word	0x01067380
 8003958:	011a499f 	.word	0x011a499f
 800395c:	01312cff 	.word	0x01312cff
 8003960:	014ca43f 	.word	0x014ca43f
 8003964:	016e3600 	.word	0x016e3600
 8003968:	01a6ab1f 	.word	0x01a6ab1f
 800396c:	01e84800 	.word	0x01e84800

08003970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d115      	bne.n	8003a02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039e2:	200a      	movs	r0, #10
 80039e4:	f7fd f88e 	bl	8000b04 <HAL_Delay>
      ms += 10U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	330a      	adds	r3, #10
 80039ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 f93f 	bl	8004c72 <USB_GetMode>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d01e      	beq.n	8003a38 <USB_SetCurrentMode+0x84>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80039fe:	d9f0      	bls.n	80039e2 <USB_SetCurrentMode+0x2e>
 8003a00:	e01a      	b.n	8003a38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d115      	bne.n	8003a34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a14:	200a      	movs	r0, #10
 8003a16:	f7fd f875 	bl	8000b04 <HAL_Delay>
      ms += 10U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	330a      	adds	r3, #10
 8003a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f001 f926 	bl	8004c72 <USB_GetMode>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <USB_SetCurrentMode+0x84>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a30:	d9f0      	bls.n	8003a14 <USB_SetCurrentMode+0x60>
 8003a32:	e001      	b.n	8003a38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e005      	b.n	8003a44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a3c:	d101      	bne.n	8003a42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e009      	b.n	8003a80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3340      	adds	r3, #64	@ 0x40
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	2200      	movs	r2, #0
 8003a78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0e      	cmp	r3, #14
 8003a84:	d9f2      	bls.n	8003a6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11c      	bne.n	8003ac8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ac6:	e00b      	b.n	8003ae0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003acc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10d      	bne.n	8003b10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003afc:	2100      	movs	r1, #0
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f968 	bl	8003dd4 <USB_SetDevSpeed>
 8003b04:	e008      	b.n	8003b18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b06:	2101      	movs	r1, #1
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f963 	bl	8003dd4 <USB_SetDevSpeed>
 8003b0e:	e003      	b.n	8003b18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b10:	2103      	movs	r1, #3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f95e 	bl	8003dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b18:	2110      	movs	r1, #16
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8fa 	bl	8003d14 <USB_FlushTxFifo>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f924 	bl	8003d78 <USB_FlushRxFifo>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b40:	461a      	mov	r2, r3
 8003b42:	2300      	movs	r3, #0
 8003b44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e043      	b.n	8003bec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b7a:	d118      	bne.n	8003bae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e013      	b.n	8003bc0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e008      	b.n	8003bc0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bde:	461a      	mov	r2, r3
 8003be0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3301      	adds	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d3b5      	bcc.n	8003b64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e043      	b.n	8003c86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c14:	d118      	bne.n	8003c48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	e013      	b.n	8003c5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e008      	b.n	8003c5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	461a      	mov	r2, r3
 8003c56:	2300      	movs	r3, #0
 8003c58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c66:	461a      	mov	r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3301      	adds	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d3b5      	bcc.n	8003bfe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f043 0210 	orr.w	r2, r3, #16
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <USB_DevInit+0x2c4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f043 0208 	orr.w	r2, r3, #8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ce8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d0c:	b004      	add	sp, #16
 8003d0e:	4770      	bx	lr
 8003d10:	803c3800 	.word	0x803c3800

08003d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d2e:	d901      	bls.n	8003d34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e01b      	b.n	8003d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	daf2      	bge.n	8003d22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	019b      	lsls	r3, r3, #6
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d58:	d901      	bls.n	8003d5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e006      	b.n	8003d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d0f0      	beq.n	8003d4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d90:	d901      	bls.n	8003d96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e018      	b.n	8003dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	daf2      	bge.n	8003d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2210      	movs	r2, #16
 8003da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003db4:	d901      	bls.n	8003dba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e006      	b.n	8003dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d0f0      	beq.n	8003da8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b087      	sub	sp, #28
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0306 	and.w	r3, r3, #6
 8003e1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
 8003e2a:	e00a      	b.n	8003e42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d002      	beq.n	8003e38 <USB_GetDevSpeed+0x32>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d102      	bne.n	8003e3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	75fb      	strb	r3, [r7, #23]
 8003e3c:	e001      	b.n	8003e42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e3e:	230f      	movs	r3, #15
 8003e40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d13a      	bne.n	8003ee2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	68f9      	ldr	r1, [r7, #12]
 8003e86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d155      	bne.n	8003f50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	791b      	ldrb	r3, [r3, #4]
 8003ebe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	059b      	lsls	r3, r3, #22
 8003ec6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e036      	b.n	8003f50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11a      	bne.n	8003f50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	791b      	ldrb	r3, [r3, #4]
 8003f34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f36:	430b      	orrs	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	0151      	lsls	r1, r2, #5
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	440a      	add	r2, r1
 8003f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d161      	bne.n	8004040 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f92:	d11f      	bne.n	8003fd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004018:	4013      	ands	r3, r2
 800401a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	0159      	lsls	r1, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	440b      	add	r3, r1
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	4619      	mov	r1, r3
 8004038:	4b35      	ldr	r3, [pc, #212]	@ (8004110 <USB_DeactivateEndpoint+0x1b0>)
 800403a:	4013      	ands	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
 800403e:	e060      	b.n	8004102 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004056:	d11f      	bne.n	8004098 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004072:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004076:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004092:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	43db      	mvns	r3, r3
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040b8:	4013      	ands	r3, r2
 80040ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	43db      	mvns	r3, r3
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040dc:	4013      	ands	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	0159      	lsls	r1, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fa:	4619      	mov	r1, r3
 80040fc:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <USB_DeactivateEndpoint+0x1b4>)
 80040fe:	4013      	ands	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	ec337800 	.word	0xec337800
 8004114:	eff37800 	.word	0xeff37800

08004118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	@ 0x28
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 817f 	bne.w	8004438 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d132      	bne.n	80041a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800415c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004160:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004180:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a0:	0cdb      	lsrs	r3, r3, #19
 80041a2:	04db      	lsls	r3, r3, #19
 80041a4:	6113      	str	r3, [r2, #16]
 80041a6:	e097      	b.n	80042d8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	04db      	lsls	r3, r3, #19
 80041c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11a      	bne.n	8004228 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d903      	bls.n	8004206 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004220:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004224:	6113      	str	r3, [r2, #16]
 8004226:	e044      	b.n	80042b2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4413      	add	r3, r2
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	8afb      	ldrh	r3, [r7, #22]
 800424e:	04d9      	lsls	r1, r3, #19
 8004250:	4ba4      	ldr	r3, [pc, #656]	@ (80044e4 <USB_EPStartXfer+0x3cc>)
 8004252:	400b      	ands	r3, r1
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	0148      	lsls	r0, r1, #5
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	4401      	add	r1, r0
 800425c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004260:	4313      	orrs	r3, r2
 8004262:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d122      	bne.n	80042b2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004286:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800428a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	8afb      	ldrh	r3, [r7, #22]
 800429c:	075b      	lsls	r3, r3, #29
 800429e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	0148      	lsls	r0, r1, #5
 80042a6:	69f9      	ldr	r1, [r7, #28]
 80042a8:	4401      	add	r1, r0
 80042aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	0148      	lsls	r0, r1, #5
 80042cc:	69f9      	ldr	r1, [r7, #28]
 80042ce:	4401      	add	r1, r0
 80042d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d14b      	bne.n	8004376 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d128      	bne.n	8004354 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d110      	bne.n	8004334 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00f      	b.n	8004354 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800436e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e166      	b.n	8004644 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004390:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004394:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	791b      	ldrb	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d015      	beq.n	80043ca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 814e 	beq.w	8004644 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	69f9      	ldr	r1, [r7, #28]
 80043c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043c4:	4313      	orrs	r3, r2
 80043c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80043c8:	e13c      	b.n	8004644 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d110      	bne.n	80043fc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e00f      	b.n	800441c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800441a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68d9      	ldr	r1, [r3, #12]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	b298      	uxth	r0, r3
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	4603      	mov	r3, r0
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f9b9 	bl	80047a8 <USB_WritePacket>
 8004436:	e105      	b.n	8004644 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004452:	0cdb      	lsrs	r3, r3, #19
 8004454:	04db      	lsls	r3, r3, #19
 8004456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004472:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004476:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800447a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d132      	bne.n	80044e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	0148      	lsls	r0, r1, #5
 80044b4:	69f9      	ldr	r1, [r7, #28]
 80044b6:	4401      	add	r1, r0
 80044b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044bc:	4313      	orrs	r3, r2
 80044be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	0151      	lsls	r1, r2, #5
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	440a      	add	r2, r1
 80044d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044de:	6113      	str	r3, [r2, #16]
 80044e0:	e062      	b.n	80045a8 <USB_EPStartXfer+0x490>
 80044e2:	bf00      	nop
 80044e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d123      	bne.n	8004538 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	0148      	lsls	r0, r1, #5
 800450a:	69f9      	ldr	r1, [r7, #28]
 800450c:	4401      	add	r1, r0
 800450e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004512:	4313      	orrs	r3, r2
 8004514:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004530:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004534:	6113      	str	r3, [r2, #16]
 8004536:	e037      	b.n	80045a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4413      	add	r3, r2
 8004542:	1e5a      	subs	r2, r3, #1
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	8afa      	ldrh	r2, [r7, #22]
 8004554:	fb03 f202 	mul.w	r2, r3, r2
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	8afb      	ldrh	r3, [r7, #22]
 800456c:	04d9      	lsls	r1, r3, #19
 800456e:	4b38      	ldr	r3, [pc, #224]	@ (8004650 <USB_EPStartXfer+0x538>)
 8004570:	400b      	ands	r3, r1
 8004572:	69b9      	ldr	r1, [r7, #24]
 8004574:	0148      	lsls	r0, r1, #5
 8004576:	69f9      	ldr	r1, [r7, #28]
 8004578:	4401      	add	r1, r0
 800457a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800457e:	4313      	orrs	r3, r2
 8004580:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	0148      	lsls	r0, r1, #5
 800459c:	69f9      	ldr	r1, [r7, #28]
 800459e:	4401      	add	r1, r0
 80045a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10d      	bne.n	80045ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c6:	460a      	mov	r2, r1
 80045c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	791b      	ldrb	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d128      	bne.n	8004624 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d110      	bne.n	8004604 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e00f      	b.n	8004624 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800461e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004622:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800463e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	1ff80000 	.word	0x1ff80000

08004654 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	785b      	ldrb	r3, [r3, #1]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d14a      	bne.n	8004708 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004686:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800468a:	f040 8086 	bne.w	800479a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	7812      	ldrb	r2, [r2, #0]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d902      	bls.n	80046ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
          break;
 80046ea:	e056      	b.n	800479a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004704:	d0e7      	beq.n	80046d6 <USB_EPStopXfer+0x82>
 8004706:	e048      	b.n	800479a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800471c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004720:	d13b      	bne.n	800479a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004744:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	440a      	add	r2, r1
 8004760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004764:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004768:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004776:	4293      	cmp	r3, r2
 8004778:	d902      	bls.n	8004780 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
          break;
 800477e:	e00c      	b.n	800479a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004798:	d0e7      	beq.n	800476a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800479a:	7dfb      	ldrb	r3, [r7, #23]
}
 800479c:	4618      	mov	r0, r3
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	@ 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	460b      	mov	r3, r1
 80047b8:	71fb      	strb	r3, [r7, #7]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d123      	bne.n	8004816 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ce:	88bb      	ldrh	r3, [r7, #4]
 80047d0:	3303      	adds	r3, #3
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e018      	b.n	800480e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	031a      	lsls	r2, r3, #12
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e8:	461a      	mov	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	3301      	adds	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	3301      	adds	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	429a      	cmp	r2, r3
 8004814:	d3e2      	bcc.n	80047dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3724      	adds	r7, #36	@ 0x24
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004824:	b480      	push	{r7}
 8004826:	b08b      	sub	sp, #44	@ 0x2c
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	b29b      	uxth	r3, r3
 8004840:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	e014      	b.n	800487a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	601a      	str	r2, [r3, #0]
    pDest++;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	3301      	adds	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	3301      	adds	r3, #1
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	3301      	adds	r3, #1
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	3301      	adds	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	3301      	adds	r3, #1
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	429a      	cmp	r2, r3
 8004880:	d3e6      	bcc.n	8004850 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004882:	8bfb      	ldrh	r3, [r7, #30]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01e      	beq.n	80048c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004892:	461a      	mov	r2, r3
 8004894:	f107 0310 	add.w	r3, r7, #16
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	701a      	strb	r2, [r3, #0]
      i++;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	3301      	adds	r3, #1
 80048b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	3301      	adds	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80048ba:	8bfb      	ldrh	r3, [r7, #30]
 80048bc:	3b01      	subs	r3, #1
 80048be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048c0:	8bfb      	ldrh	r3, [r7, #30]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ea      	bne.n	800489c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	372c      	adds	r7, #44	@ 0x2c
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d12c      	bne.n	800494a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	db12      	blt.n	8004928 <USB_EPSetStall+0x54>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00f      	beq.n	8004928 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004922:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004926:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004942:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e02b      	b.n	80049a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	db12      	blt.n	8004982 <USB_EPSetStall+0xae>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00f      	beq.n	8004982 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004980:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800499c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d128      	bne.n	8004a1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	791b      	ldrb	r3, [r3, #4]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d003      	beq.n	80049fc <USB_EPClearStall+0x4c>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	791b      	ldrb	r3, [r3, #4]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d138      	bne.n	8004a6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e027      	b.n	8004a6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	791b      	ldrb	r3, [r3, #4]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d003      	beq.n	8004a4e <USB_EPClearStall+0x9e>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	791b      	ldrb	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d10f      	bne.n	8004a6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af6:	f023 0302 	bic.w	r3, r3, #2
 8004afa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b24:	f023 0303 	bic.w	r3, r3, #3
 8004b28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b38:	f043 0302 	orr.w	r3, r3, #2
 8004b3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4013      	ands	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	0c1b      	lsrs	r3, r3, #16
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	b29b      	uxth	r3, r3
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c08:	68bb      	ldr	r3, [r7, #8]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b087      	sub	sp, #28
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	01db      	lsls	r3, r3, #7
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c64:	68bb      	ldr	r3, [r7, #8]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	333c      	adds	r3, #60	@ 0x3c
 8004cea:	3304      	adds	r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4a26      	ldr	r2, [pc, #152]	@ (8004d8c <USB_EP0_OutStart+0xb8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d90a      	bls.n	8004d0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d08:	d101      	bne.n	8004d0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e037      	b.n	8004d7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d3c:	f043 0318 	orr.w	r3, r3, #24
 8004d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d50:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d56:	7afb      	ldrb	r3, [r7, #11]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10f      	bne.n	8004d7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d76:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	4f54300a 	.word	0x4f54300a

08004d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da8:	d901      	bls.n	8004dae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e01b      	b.n	8004de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	daf2      	bge.n	8004d9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f043 0201 	orr.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dd2:	d901      	bls.n	8004dd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e006      	b.n	8004de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d0f0      	beq.n	8004dc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <CRC16>:
 * Computes the CRC value of a certain data frame and returns it
 * @param data ptr to the data buffer
 * @param len number of bytes for the CRC to be calculated for
 * @return CRC byte value
 */
static uint16_t CRC16(uint8_t *data, uint16_t len) {
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	807b      	strh	r3, [r7, #2]
	uint16_t CRC = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	81bb      	strh	r3, [r7, #12]
 8004e06:	e00a      	b.n	8004e1e <CRC16+0x2c>
		CRC += data[x];
 8004e08:	89bb      	ldrh	r3, [r7, #12]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	89fb      	ldrh	r3, [r7, #14]
 8004e14:	4413      	add	r3, r2
 8004e16:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004e18:	89bb      	ldrh	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	81bb      	strh	r3, [r7, #12]
 8004e1e:	89ba      	ldrh	r2, [r7, #12]
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d3f0      	bcc.n	8004e08 <CRC16+0x16>
	}
	return CRC;
 8004e26:	89fb      	ldrh	r3, [r7, #14]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <SbW_Init>:

void SbW_Init(SbW_Protocol_t *S) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	S->MessageFifo.Fifo_Size = S->Fifo_Buffer_Size / S->Frame_Len;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8b9b      	ldrh	r3, [r3, #28]
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	799b      	ldrb	r3, [r3, #6]
 8004e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	825a      	strh	r2, [r3, #18]
	fifo_init(&S->MessageFifo);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	330c      	adds	r3, #12
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb fd48 	bl	80008ea <fifo_init>
	S->Mutex = 0; //ensures that the Mutex flag starts in the unlocked state (0)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <SbW_Request_Received_CB>:

void SbW_Request_Received_CB(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
	uint8_t NoReply = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
	uint16_t CRC_Result = CRC16(data, len - 2);
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	3b02      	subs	r3, #2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	68b8      	ldr	r0, [r7, #8]
 8004e88:	f7ff ffb3 	bl	8004df2 <CRC16>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	82bb      	strh	r3, [r7, #20]
	if (S->RemainingFrames) {
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 811d 	bne.w	80050d6 <SbW_Request_Received_CB+0x26a>
		return;
	}
	// Check the data integrity
	if (CRC_Result
			!= (((uint16_t) data[len - 1] << 8) | (uint16_t) data[len - 2])) {
 8004e9c:	8aba      	ldrh	r2, [r7, #20]
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	440b      	add	r3, r1
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	88f9      	ldrh	r1, [r7, #6]
 8004eac:	3902      	subs	r1, #2
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	4401      	add	r1, r0
 8004eb2:	7809      	ldrb	r1, [r1, #0]
 8004eb4:	430b      	orrs	r3, r1
	if (CRC_Result
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d003      	beq.n	8004ec2 <SbW_Request_Received_CB+0x56>
		S->HW_Interface_t.User_Callback(SbW_ERROR_CRC);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	4798      	blx	r3
		// SbW_ERROR_CRC // Ignoring this frame
	}
	// SbW_ERROR_NoERROR
	S->R_W = data[1] >> 7;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	09db      	lsrs	r3, r3, #7
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	b2d9      	uxtb	r1, r3
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	7913      	ldrb	r3, [r2, #4]
 8004ed6:	f361 0300 	bfi	r3, r1, #0, #1
 8004eda:	7113      	strb	r3, [r2, #4]
	S->CMD = data[1] & 0b01111111;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	715a      	strb	r2, [r3, #5]

	switch (S->CMD) {
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	795b      	ldrb	r3, [r3, #5]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	f200 80f1 	bhi.w	80050da <SbW_Request_Received_CB+0x26e>
 8004ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <SbW_Request_Received_CB+0x94>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f85 	.word	0x08004f85
 8004f08:	08004fc9 	.word	0x08004fc9
 8004f0c:	08005021 	.word	0x08005021
 8004f10:	080050db 	.word	0x080050db
 8004f14:	08005047 	.word	0x08005047
	case 0x01: // Get or Set Sampling Frequency
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	791b      	ldrb	r3, [r3, #4]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d014      	beq.n	8004f58 <SbW_Request_Received_CB+0xec>
			len = 7;
 8004f2e:	2307      	movs	r3, #7
 8004f30:	80fb      	strh	r3, [r7, #6]
			data[2] = 2; // Number of Data Bytes =2
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3302      	adds	r3, #2
 8004f36:	2202      	movs	r2, #2
 8004f38:	701a      	strb	r2, [r3, #0]
			data[3] = (uint8_t) (S->SamplingFreq >> 8);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	885b      	ldrh	r3, [r3, #2]
 8004f3e:	0a1b      	lsrs	r3, r3, #8
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3303      	adds	r3, #3
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) S->SamplingFreq;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	885a      	ldrh	r2, [r3, #2]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3304      	adds	r3, #4
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004f56:	e09b      	b.n	8005090 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004f58:	2305      	movs	r3, #5
 8004f5a:	80fb      	strh	r3, [r7, #6]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3303      	adds	r3, #3
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	805a      	strh	r2, [r3, #2]
			data[2] = 0; // Number of Data Bytes =0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
		break;
 8004f82:	e085      	b.n	8005090 <SbW_Request_Received_CB+0x224>

	case 0x02: // Get or Set Frame Length
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	2000      	movs	r0, #0
 8004f8a:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <SbW_Request_Received_CB+0x146>
			len = 6;
 8004f9a:	2306      	movs	r3, #6
 8004f9c:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // Number of Data Bytes =1
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
			data[3] = S->Frame_Len; // Get Frame_Len
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	3303      	adds	r3, #3
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	7992      	ldrb	r2, [r2, #6]
 8004fae:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->Frame_Len = data[3]; // Set Frame_Len
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004fb0:	e06e      	b.n	8005090 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004fb2:	2305      	movs	r3, #5
 8004fb4:	80fb      	strh	r3, [r7, #6]
			S->Frame_Len = data[3]; // Set Frame_Len
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	78da      	ldrb	r2, [r3, #3]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	719a      	strb	r2, [r3, #6]
			data[2] = 0; // Number of Data Bytes =0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
		break;
 8004fc6:	e063      	b.n	8005090 <SbW_Request_Received_CB+0x224>
	case 0x03: // Get or Set Stream ON
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	2000      	movs	r0, #0
 8004fce:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	791b      	ldrb	r3, [r3, #4]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00e      	beq.n	8004ffc <SbW_Request_Received_CB+0x190>
			len = 6;
 8004fde:	2306      	movs	r3, #6
 8004fe0:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // Number of Data Bytes =1
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
			data[3] = S->Stream_ON; // Get Stream_ON
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	3303      	adds	r3, #3
 8004ff8:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->Stream_ON = data[3]; // Set Stream_ON
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004ffa:	e049      	b.n	8005090 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004ffc:	2305      	movs	r3, #5
 8004ffe:	80fb      	strh	r3, [r7, #6]
			S->Stream_ON = data[3]; // Set Stream_ON
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3303      	adds	r3, #3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	b2d9      	uxtb	r1, r3
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	7813      	ldrb	r3, [r2, #0]
 8005010:	f361 0300 	bfi	r3, r1, #0, #1
 8005014:	7013      	strb	r3, [r2, #0]
			data[2] = 0; // Number of Data Bytes =0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	3302      	adds	r3, #2
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
		break;
 800501e:	e037      	b.n	8005090 <SbW_Request_Received_CB+0x224>
	case 0x04: // Get number of frames to be reported by the controller
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	2000      	movs	r0, #0
 8005026:	4798      	blx	r3
		if (!S->R_W) { // ??
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	791b      	ldrb	r3, [r3, #4]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d129      	bne.n	800508a <SbW_Request_Received_CB+0x21e>
			NoReply = 1; // means do not issue a standard reply
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
			S->RemainingFrames = data[3];
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	78da      	ldrb	r2, [r3, #3]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			// SbW_TxFrame_processor(S);
		}
		break;
 8005044:	e021      	b.n	800508a <SbW_Request_Received_CB+0x21e>

	case 0x06: // Get the frame buffer depth
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	2000      	movs	r0, #0
 800504c:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	791b      	ldrb	r3, [r3, #4]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d018      	beq.n	800508e <SbW_Request_Received_CB+0x222>
			len = 7;
 800505c:	2307      	movs	r3, #7
 800505e:	80fb      	strh	r3, [r7, #6]
			uint16_t FrameBufferDepth = S->Fifo_Buffer_Size / S->Frame_Len;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8b9b      	ldrh	r3, [r3, #28]
 8005064:	461a      	mov	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	799b      	ldrb	r3, [r3, #6]
 800506a:	fb92 f3f3 	sdiv	r3, r2, r3
 800506e:	827b      	strh	r3, [r7, #18]
			data[3] = (uint8_t) (FrameBufferDepth >> 8);
 8005070:	8a7b      	ldrh	r3, [r7, #18]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b29a      	uxth	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	3303      	adds	r3, #3
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) FrameBufferDepth;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	3304      	adds	r3, #4
 8005082:	8a7a      	ldrh	r2, [r7, #18]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005088:	e001      	b.n	800508e <SbW_Request_Received_CB+0x222>
		break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <SbW_Request_Received_CB+0x224>
		break;
 800508e:	bf00      	nop

	default:
		return;
	}

	if (!NoReply) {
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d122      	bne.n	80050dc <SbW_Request_Received_CB+0x270>
		CRC_Result = CRC16(data, len - 2);
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	3b02      	subs	r3, #2
 800509a:	b29b      	uxth	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7ff fea7 	bl	8004df2 <CRC16>
 80050a4:	4603      	mov	r3, r0
 80050a6:	82bb      	strh	r3, [r7, #20]
		data[len - 2] = (uint8_t) (CRC_Result >> 8);
 80050a8:	8abb      	ldrh	r3, [r7, #20]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	b299      	uxth	r1, r3
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	3b02      	subs	r3, #2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4413      	add	r3, r2
 80050b6:	b2ca      	uxtb	r2, r1
 80050b8:	701a      	strb	r2, [r3, #0]
		data[len - 1] = (uint8_t) (CRC_Result);
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	3b01      	subs	r3, #1
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	8aba      	ldrh	r2, [r7, #20]
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
		S->HW_Interface_t.Send_Reply(data, len);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	4611      	mov	r1, r2
 80050d0:	68b8      	ldr	r0, [r7, #8]
 80050d2:	4798      	blx	r3
 80050d4:	e002      	b.n	80050dc <SbW_Request_Received_CB+0x270>
		return;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <SbW_Request_Received_CB+0x270>
		return;
 80050da:	bf00      	nop
	}
}
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <SbW_Timer_Callback>:
void SbW_Reply_Transmit(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {

}

void SbW_Timer_Callback(SbW_Protocol_t *S) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	if (!S->Mutex) {
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d121      	bne.n	800513a <SbW_Timer_Callback+0x56>
		S->Mutex = 1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		int16_t Head = fifo_enqueue(&S->MessageFifo);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	330c      	adds	r3, #12
 8005102:	4618      	mov	r0, r3
 8005104:	f7fb fc21 	bl	800094a <fifo_enqueue>
 8005108:	4603      	mov	r3, r0
 800510a:	81fb      	strh	r3, [r7, #14]
		// Implement the enqueue operation

		memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	7989      	ldrb	r1, [r1, #6]
 8005118:	fb01 f202 	mul.w	r2, r1, r2
 800511c:	1898      	adds	r0, r3, r2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6899      	ldr	r1, [r3, #8]
				S->Frame_Len);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	799b      	ldrb	r3, [r3, #6]
		memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 8005126:	461a      	mov	r2, r3
 8005128:	f002 fd84 	bl	8007c34 <memcpy>
		S->Mutex = 0;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		SbW_TxFrame_processor(S);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f804 	bl	8005142 <SbW_TxFrame_processor>
	}
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <SbW_TxFrame_processor>:

void SbW_TxFrame_processor(SbW_Protocol_t *S) {
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(&S->MessageFifo) && S->RemainingFrames != 0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	330c      	adds	r3, #12
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb fbe9 	bl	8000926 <fifo_is_empty>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d138      	bne.n	80051cc <SbW_TxFrame_processor+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d033      	beq.n	80051cc <SbW_TxFrame_processor+0x8a>
			&& !S->Mutex) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800516a:	2b00      	cmp	r3, #0
 800516c:	d12e      	bne.n	80051cc <SbW_TxFrame_processor+0x8a>
		S->Mutex = 1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		int16_t H = fifo_dequeue(&S->MessageFifo);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	330c      	adds	r3, #12
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb fc20 	bl	80009c0 <fifo_dequeue>
 8005180:	4603      	mov	r3, r0
 8005182:	81fb      	strh	r3, [r7, #14]
		S->RemainingFrames--;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800518a:	3b01      	subs	r3, #1
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a18      	ldr	r0, [r3, #32]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	7989      	ldrb	r1, [r1, #6]
 80051a4:	fb01 f202 	mul.w	r2, r1, r2
 80051a8:	1899      	adds	r1, r3, r2
				S->Frame_Len);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	799b      	ldrb	r3, [r3, #6]
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 80051ae:	461a      	mov	r2, r3
 80051b0:	f002 fd40 	bl	8007c34 <memcpy>
		S->HW_Interface_t.Send_Reply(S->P_TXBuffer, S->Frame_Len);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6a10      	ldr	r0, [r2, #32]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	7992      	ldrb	r2, [r2, #6]
 80051c0:	4611      	mov	r1, r2
 80051c2:	4798      	blx	r3
		S->Mutex = 0;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	}
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <SbW_TxCPLt>:

void SbW_TxCPLt(SbW_Protocol_t *S) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	SbW_TxFrame_processor(S);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ffb0 	bl	8005142 <SbW_TxFrame_processor>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80051f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80051fc:	f002 fcaa 	bl	8007b54 <USBD_static_malloc>
 8005200:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	32b0      	adds	r2, #176	@ 0xb0
 8005212:	2100      	movs	r1, #0
 8005214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005218:	2302      	movs	r3, #2
 800521a:	e0d4      	b.n	80053c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800521c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005220:	2100      	movs	r1, #0
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f002 fcda 	bl	8007bdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	32b0      	adds	r2, #176	@ 0xb0
 8005232:	68f9      	ldr	r1, [r7, #12]
 8005234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	32b0      	adds	r2, #176	@ 0xb0
 8005242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	7c1b      	ldrb	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d138      	bne.n	80052c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005254:	4b5e      	ldr	r3, [pc, #376]	@ (80053d0 <USBD_CDC_Init+0x1e4>)
 8005256:	7819      	ldrb	r1, [r3, #0]
 8005258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800525c:	2202      	movs	r2, #2
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f002 fb55 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005264:	4b5a      	ldr	r3, [pc, #360]	@ (80053d0 <USBD_CDC_Init+0x1e4>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	3324      	adds	r3, #36	@ 0x24
 800527a:	2201      	movs	r2, #1
 800527c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800527e:	4b55      	ldr	r3, [pc, #340]	@ (80053d4 <USBD_CDC_Init+0x1e8>)
 8005280:	7819      	ldrb	r1, [r3, #0]
 8005282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005286:	2202      	movs	r2, #2
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f002 fb40 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800528e:	4b51      	ldr	r3, [pc, #324]	@ (80053d4 <USBD_CDC_Init+0x1e8>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052a6:	2201      	movs	r2, #1
 80052a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052aa:	4b4b      	ldr	r3, [pc, #300]	@ (80053d8 <USBD_CDC_Init+0x1ec>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3326      	adds	r3, #38	@ 0x26
 80052c0:	2210      	movs	r2, #16
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e035      	b.n	8005332 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052c6:	4b42      	ldr	r3, [pc, #264]	@ (80053d0 <USBD_CDC_Init+0x1e4>)
 80052c8:	7819      	ldrb	r1, [r3, #0]
 80052ca:	2340      	movs	r3, #64	@ 0x40
 80052cc:	2202      	movs	r2, #2
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f002 fb1d 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052d4:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <USBD_CDC_Init+0x1e4>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f003 020f 	and.w	r2, r3, #15
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	3324      	adds	r3, #36	@ 0x24
 80052ea:	2201      	movs	r2, #1
 80052ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052ee:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <USBD_CDC_Init+0x1e8>)
 80052f0:	7819      	ldrb	r1, [r3, #0]
 80052f2:	2340      	movs	r3, #64	@ 0x40
 80052f4:	2202      	movs	r2, #2
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f002 fb09 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052fc:	4b35      	ldr	r3, [pc, #212]	@ (80053d4 <USBD_CDC_Init+0x1e8>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 020f 	and.w	r2, r3, #15
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005314:	2201      	movs	r2, #1
 8005316:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005318:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <USBD_CDC_Init+0x1ec>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3326      	adds	r3, #38	@ 0x26
 800532e:	2210      	movs	r2, #16
 8005330:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005332:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <USBD_CDC_Init+0x1ec>)
 8005334:	7819      	ldrb	r1, [r3, #0]
 8005336:	2308      	movs	r3, #8
 8005338:	2203      	movs	r2, #3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f002 fae7 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005340:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <USBD_CDC_Init+0x1ec>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f003 020f 	and.w	r2, r3, #15
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	3324      	adds	r3, #36	@ 0x24
 8005356:	2201      	movs	r2, #1
 8005358:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	33b0      	adds	r3, #176	@ 0xb0
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005390:	2302      	movs	r3, #2
 8005392:	e018      	b.n	80053c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7c1b      	ldrb	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800539c:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <USBD_CDC_Init+0x1e8>)
 800539e:	7819      	ldrb	r1, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f002 fb9e 	bl	8007aec <USBD_LL_PrepareReceive>
 80053b0:	e008      	b.n	80053c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053b2:	4b08      	ldr	r3, [pc, #32]	@ (80053d4 <USBD_CDC_Init+0x1e8>)
 80053b4:	7819      	ldrb	r1, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053bc:	2340      	movs	r3, #64	@ 0x40
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f002 fb94 	bl	8007aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	200000e3 	.word	0x200000e3
 80053d4:	200000e4 	.word	0x200000e4
 80053d8:	200000e5 	.word	0x200000e5

080053dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80053e8:	4b3a      	ldr	r3, [pc, #232]	@ (80054d4 <USBD_CDC_DeInit+0xf8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f002 fab3 	bl	800795a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80053f4:	4b37      	ldr	r3, [pc, #220]	@ (80054d4 <USBD_CDC_DeInit+0xf8>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 020f 	and.w	r2, r3, #15
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	3324      	adds	r3, #36	@ 0x24
 800540a:	2200      	movs	r2, #0
 800540c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800540e:	4b32      	ldr	r3, [pc, #200]	@ (80054d8 <USBD_CDC_DeInit+0xfc>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f002 faa0 	bl	800795a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800541a:	4b2f      	ldr	r3, [pc, #188]	@ (80054d8 <USBD_CDC_DeInit+0xfc>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f003 020f 	and.w	r2, r3, #15
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005432:	2200      	movs	r2, #0
 8005434:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005436:	4b29      	ldr	r3, [pc, #164]	@ (80054dc <USBD_CDC_DeInit+0x100>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f002 fa8c 	bl	800795a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005442:	4b26      	ldr	r3, [pc, #152]	@ (80054dc <USBD_CDC_DeInit+0x100>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3324      	adds	r3, #36	@ 0x24
 8005458:	2200      	movs	r2, #0
 800545a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800545c:	4b1f      	ldr	r3, [pc, #124]	@ (80054dc <USBD_CDC_DeInit+0x100>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	3326      	adds	r3, #38	@ 0x26
 8005472:	2200      	movs	r2, #0
 8005474:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	32b0      	adds	r2, #176	@ 0xb0
 8005480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01f      	beq.n	80054c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	33b0      	adds	r3, #176	@ 0xb0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	32b0      	adds	r2, #176	@ 0xb0
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f002 fb60 	bl	8007b70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32b0      	adds	r2, #176	@ 0xb0
 80054ba:	2100      	movs	r1, #0
 80054bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200000e3 	.word	0x200000e3
 80054d8:	200000e4 	.word	0x200000e4
 80054dc:	200000e5 	.word	0x200000e5

080054e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	32b0      	adds	r2, #176	@ 0xb0
 80054f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800550c:	2303      	movs	r3, #3
 800550e:	e0bf      	b.n	8005690 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005518:	2b00      	cmp	r3, #0
 800551a:	d050      	beq.n	80055be <USBD_CDC_Setup+0xde>
 800551c:	2b20      	cmp	r3, #32
 800551e:	f040 80af 	bne.w	8005680 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	88db      	ldrh	r3, [r3, #6]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d03a      	beq.n	80055a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b25b      	sxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	da1b      	bge.n	800556c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	33b0      	adds	r3, #176	@ 0xb0
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800554a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	88d2      	ldrh	r2, [r2, #6]
 8005550:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	88db      	ldrh	r3, [r3, #6]
 8005556:	2b07      	cmp	r3, #7
 8005558:	bf28      	it	cs
 800555a:	2307      	movcs	r3, #7
 800555c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	89fa      	ldrh	r2, [r7, #14]
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fd93 	bl	8007090 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800556a:	e090      	b.n	800568e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785a      	ldrb	r2, [r3, #1]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	88db      	ldrh	r3, [r3, #6]
 800557a:	2b3f      	cmp	r3, #63	@ 0x3f
 800557c:	d803      	bhi.n	8005586 <USBD_CDC_Setup+0xa6>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	88db      	ldrh	r3, [r3, #6]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	e000      	b.n	8005588 <USBD_CDC_Setup+0xa8>
 8005586:	2240      	movs	r2, #64	@ 0x40
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800558e:	6939      	ldr	r1, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005596:	461a      	mov	r2, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fda5 	bl	80070e8 <USBD_CtlPrepareRx>
      break;
 800559e:	e076      	b.n	800568e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	33b0      	adds	r3, #176	@ 0xb0
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	7850      	ldrb	r0, [r2, #1]
 80055b6:	2200      	movs	r2, #0
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	4798      	blx	r3
      break;
 80055bc:	e067      	b.n	800568e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	2b0b      	cmp	r3, #11
 80055c4:	d851      	bhi.n	800566a <USBD_CDC_Setup+0x18a>
 80055c6:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <USBD_CDC_Setup+0xec>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055fd 	.word	0x080055fd
 80055d0:	08005679 	.word	0x08005679
 80055d4:	0800566b 	.word	0x0800566b
 80055d8:	0800566b 	.word	0x0800566b
 80055dc:	0800566b 	.word	0x0800566b
 80055e0:	0800566b 	.word	0x0800566b
 80055e4:	0800566b 	.word	0x0800566b
 80055e8:	0800566b 	.word	0x0800566b
 80055ec:	0800566b 	.word	0x0800566b
 80055f0:	0800566b 	.word	0x0800566b
 80055f4:	08005627 	.word	0x08005627
 80055f8:	08005651 	.word	0x08005651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b03      	cmp	r3, #3
 8005606:	d107      	bne.n	8005618 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005608:	f107 030a 	add.w	r3, r7, #10
 800560c:	2202      	movs	r2, #2
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 fd3d 	bl	8007090 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005616:	e032      	b.n	800567e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fcbb 	bl	8006f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8005620:	2303      	movs	r3, #3
 8005622:	75fb      	strb	r3, [r7, #23]
          break;
 8005624:	e02b      	b.n	800567e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b03      	cmp	r3, #3
 8005630:	d107      	bne.n	8005642 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005632:	f107 030d 	add.w	r3, r7, #13
 8005636:	2201      	movs	r2, #1
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 fd28 	bl	8007090 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005640:	e01d      	b.n	800567e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fca6 	bl	8006f96 <USBD_CtlError>
            ret = USBD_FAIL;
 800564a:	2303      	movs	r3, #3
 800564c:	75fb      	strb	r3, [r7, #23]
          break;
 800564e:	e016      	b.n	800567e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d00f      	beq.n	800567c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 fc99 	bl	8006f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8005664:	2303      	movs	r3, #3
 8005666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005668:	e008      	b.n	800567c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fc92 	bl	8006f96 <USBD_CtlError>
          ret = USBD_FAIL;
 8005672:	2303      	movs	r3, #3
 8005674:	75fb      	strb	r3, [r7, #23]
          break;
 8005676:	e002      	b.n	800567e <USBD_CDC_Setup+0x19e>
          break;
 8005678:	bf00      	nop
 800567a:	e008      	b.n	800568e <USBD_CDC_Setup+0x1ae>
          break;
 800567c:	bf00      	nop
      }
      break;
 800567e:	e006      	b.n	800568e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fc87 	bl	8006f96 <USBD_CtlError>
      ret = USBD_FAIL;
 8005688:	2303      	movs	r3, #3
 800568a:	75fb      	strb	r3, [r7, #23]
      break;
 800568c:	bf00      	nop
  }

  return (uint8_t)ret;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80056aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	32b0      	adds	r2, #176	@ 0xb0
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056be:	2303      	movs	r3, #3
 80056c0:	e065      	b.n	800578e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	32b0      	adds	r2, #176	@ 0xb0
 80056cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	3318      	adds	r3, #24
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02f      	beq.n	800574c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3318      	adds	r3, #24
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	f003 010f 	and.w	r1, r3, #15
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	460b      	mov	r3, r1
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	440b      	add	r3, r1
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4403      	add	r3, r0
 8005714:	331c      	adds	r3, #28
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	fbb2 f1f3 	udiv	r1, r2, r3
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005722:	2b00      	cmp	r3, #0
 8005724:	d112      	bne.n	800574c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3318      	adds	r3, #24
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800573e:	78f9      	ldrb	r1, [r7, #3]
 8005740:	2300      	movs	r3, #0
 8005742:	2200      	movs	r2, #0
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f002 f9b0 	bl	8007aaa <USBD_LL_Transmit>
 800574a:	e01f      	b.n	800578c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	33b0      	adds	r3, #176	@ 0xb0
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	33b0      	adds	r3, #176	@ 0xb0
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	32b0      	adds	r2, #176	@ 0xb0
 80057ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	32b0      	adds	r2, #176	@ 0xb0
 80057bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e01a      	b.n	80057fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 f9ae 	bl	8007b2e <USBD_LL_GetRxDataSize>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	33b0      	adds	r3, #176	@ 0xb0
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80057f8:	4611      	mov	r1, r2
 80057fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	32b0      	adds	r2, #176	@ 0xb0
 8005818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005824:	2303      	movs	r3, #3
 8005826:	e024      	b.n	8005872 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	33b0      	adds	r3, #176	@ 0xb0
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d019      	beq.n	8005870 <USBD_CDC_EP0_RxReady+0x6a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005842:	2bff      	cmp	r3, #255	@ 0xff
 8005844:	d014      	beq.n	8005870 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	33b0      	adds	r3, #176	@ 0xb0
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800585e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005866:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	22ff      	movs	r2, #255	@ 0xff
 800586c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005884:	2182      	movs	r1, #130	@ 0x82
 8005886:	4818      	ldr	r0, [pc, #96]	@ (80058e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005888:	f000 fd4f 	bl	800632a <USBD_GetEpDesc>
 800588c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800588e:	2101      	movs	r1, #1
 8005890:	4815      	ldr	r0, [pc, #84]	@ (80058e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005892:	f000 fd4a 	bl	800632a <USBD_GetEpDesc>
 8005896:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005898:	2181      	movs	r1, #129	@ 0x81
 800589a:	4813      	ldr	r0, [pc, #76]	@ (80058e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800589c:	f000 fd45 	bl	800632a <USBD_GetEpDesc>
 80058a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2210      	movs	r2, #16
 80058ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d006      	beq.n	80058c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058bc:	711a      	strb	r2, [r3, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d006      	beq.n	80058d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058d0:	711a      	strb	r2, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2243      	movs	r2, #67	@ 0x43
 80058da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058dc:	4b02      	ldr	r3, [pc, #8]	@ (80058e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200000a0 	.word	0x200000a0

080058ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058f4:	2182      	movs	r1, #130	@ 0x82
 80058f6:	4818      	ldr	r0, [pc, #96]	@ (8005958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80058f8:	f000 fd17 	bl	800632a <USBD_GetEpDesc>
 80058fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058fe:	2101      	movs	r1, #1
 8005900:	4815      	ldr	r0, [pc, #84]	@ (8005958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005902:	f000 fd12 	bl	800632a <USBD_GetEpDesc>
 8005906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005908:	2181      	movs	r1, #129	@ 0x81
 800590a:	4813      	ldr	r0, [pc, #76]	@ (8005958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800590c:	f000 fd0d 	bl	800632a <USBD_GetEpDesc>
 8005910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2210      	movs	r2, #16
 800591c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2200      	movs	r2, #0
 8005928:	711a      	strb	r2, [r3, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f042 0202 	orr.w	r2, r2, #2
 8005930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d006      	beq.n	8005946 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	711a      	strb	r2, [r3, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f042 0202 	orr.w	r2, r2, #2
 8005944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2243      	movs	r2, #67	@ 0x43
 800594a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800594c:	4b02      	ldr	r3, [pc, #8]	@ (8005958 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200000a0 	.word	0x200000a0

0800595c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005964:	2182      	movs	r1, #130	@ 0x82
 8005966:	4818      	ldr	r0, [pc, #96]	@ (80059c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005968:	f000 fcdf 	bl	800632a <USBD_GetEpDesc>
 800596c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800596e:	2101      	movs	r1, #1
 8005970:	4815      	ldr	r0, [pc, #84]	@ (80059c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005972:	f000 fcda 	bl	800632a <USBD_GetEpDesc>
 8005976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005978:	2181      	movs	r1, #129	@ 0x81
 800597a:	4813      	ldr	r0, [pc, #76]	@ (80059c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800597c:	f000 fcd5 	bl	800632a <USBD_GetEpDesc>
 8005980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2210      	movs	r2, #16
 800598c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2200      	movs	r2, #0
 8005998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800599c:	711a      	strb	r2, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059b0:	711a      	strb	r2, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2243      	movs	r2, #67	@ 0x43
 80059ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059bc:	4b02      	ldr	r3, [pc, #8]	@ (80059c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200000a0 	.word	0x200000a0

080059cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	220a      	movs	r2, #10
 80059d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059da:	4b03      	ldr	r3, [pc, #12]	@ (80059e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	2000005c 	.word	0x2000005c

080059ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e009      	b.n	8005a14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	33b0      	adds	r3, #176	@ 0xb0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	32b0      	adds	r2, #176	@ 0xb0
 8005a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e008      	b.n	8005a58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	32b0      	adds	r2, #176	@ 0xb0
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e004      	b.n	8005a92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	32b0      	adds	r2, #176	@ 0xb0
 8005ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e025      	b.n	8005b12 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11f      	bne.n	8005b10 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005ad8:	4b10      	ldr	r3, [pc, #64]	@ (8005b1c <USBD_CDC_TransmitPacket+0x7c>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4403      	add	r3, r0
 8005af2:	3318      	adds	r3, #24
 8005af4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <USBD_CDC_TransmitPacket+0x7c>)
 8005af8:	7819      	ldrb	r1, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 ffcf 	bl	8007aaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200000e3 	.word	0x200000e3

08005b20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32b0      	adds	r2, #176	@ 0xb0
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	32b0      	adds	r2, #176	@ 0xb0
 8005b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e018      	b.n	8005b80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7c1b      	ldrb	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b56:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <USBD_CDC_ReceivePacket+0x68>)
 8005b58:	7819      	ldrb	r1, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 ffc1 	bl	8007aec <USBD_LL_PrepareReceive>
 8005b6a:	e008      	b.n	8005b7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <USBD_CDC_ReceivePacket+0x68>)
 8005b6e:	7819      	ldrb	r1, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b76:	2340      	movs	r3, #64	@ 0x40
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 ffb7 	bl	8007aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200000e4 	.word	0x200000e4

08005b8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e01f      	b.n	8005be4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	79fa      	ldrb	r2, [r7, #7]
 8005bd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f001 fe31 	bl	8007840 <USBD_LL_Init>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e025      	b.n	8005c50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	32ae      	adds	r2, #174	@ 0xae
 8005c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00f      	beq.n	8005c40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	32ae      	adds	r2, #174	@ 0xae
 8005c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	f107 020e 	add.w	r2, r7, #14
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fe39 	bl	80078d8 <USBD_LL_Start>
 8005c66:	4603      	mov	r3, r0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	4611      	mov	r1, r2
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 f90c 	bl	8006f22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d18:	461a      	mov	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d01a      	beq.n	8005d64 <USBD_LL_SetupStage+0x72>
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d822      	bhi.n	8005d78 <USBD_LL_SetupStage+0x86>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <USBD_LL_SetupStage+0x4a>
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d00a      	beq.n	8005d50 <USBD_LL_SetupStage+0x5e>
 8005d3a:	e01d      	b.n	8005d78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb63 	bl	8006410 <USBD_StdDevReq>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4e:	e020      	b.n	8005d92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fbcb 	bl	80064f4 <USBD_StdItfReq>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
      break;
 8005d62:	e016      	b.n	8005d92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc2d 	bl	80065cc <USBD_StdEPReq>
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]
      break;
 8005d76:	e00c      	b.n	8005d92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fe06 	bl	8007998 <USBD_LL_StallEP>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d90:	bf00      	nop
  }

  return ret;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	460b      	mov	r3, r1
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d16e      	bne.n	8005e92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005dba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	f040 8098 	bne.w	8005ef8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d913      	bls.n	8005dfc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	1ad2      	subs	r2, r2, r3
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bf28      	it	cs
 8005dee:	4613      	movcs	r3, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f001 f994 	bl	8007122 <USBD_CtlContinueRx>
 8005dfa:	e07d      	b.n	8005ef8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d014      	beq.n	8005e34 <USBD_LL_DataOutStage+0x98>
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d81d      	bhi.n	8005e4a <USBD_LL_DataOutStage+0xae>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <USBD_LL_DataOutStage+0x7c>
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d003      	beq.n	8005e1e <USBD_LL_DataOutStage+0x82>
 8005e16:	e018      	b.n	8005e4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e1c:	e018      	b.n	8005e50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	4619      	mov	r1, r3
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fa64 	bl	80062f6 <USBD_CoreFindIF>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	75bb      	strb	r3, [r7, #22]
            break;
 8005e32:	e00d      	b.n	8005e50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fa66 	bl	8006310 <USBD_CoreFindEP>
 8005e44:	4603      	mov	r3, r0
 8005e46:	75bb      	strb	r3, [r7, #22]
            break;
 8005e48:	e002      	b.n	8005e50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005e4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e50:	7dbb      	ldrb	r3, [r7, #22]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d119      	bne.n	8005e8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d113      	bne.n	8005e8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e62:	7dba      	ldrb	r2, [r7, #22]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	32ae      	adds	r2, #174	@ 0xae
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e72:	7dba      	ldrb	r2, [r7, #22]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e7a:	7dba      	ldrb	r2, [r7, #22]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	32ae      	adds	r2, #174	@ 0xae
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f001 f95a 	bl	8007144 <USBD_CtlSendStatus>
 8005e90:	e032      	b.n	8005ef8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa37 	bl	8006310 <USBD_CoreFindEP>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ea6:	7dbb      	ldrb	r3, [r7, #22]
 8005ea8:	2bff      	cmp	r3, #255	@ 0xff
 8005eaa:	d025      	beq.n	8005ef8 <USBD_LL_DataOutStage+0x15c>
 8005eac:	7dbb      	ldrb	r3, [r7, #22]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d122      	bne.n	8005ef8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d117      	bne.n	8005eee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ebe:	7dba      	ldrb	r2, [r7, #22]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	32ae      	adds	r2, #174	@ 0xae
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00f      	beq.n	8005eee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ece:	7dba      	ldrb	r2, [r7, #22]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005ed6:	7dba      	ldrb	r2, [r7, #22]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	32ae      	adds	r2, #174	@ 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	7afa      	ldrb	r2, [r7, #11]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	e000      	b.n	8005efa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d16f      	bne.n	8005ff6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d15a      	bne.n	8005fdc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d914      	bls.n	8005f5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f001 f8bc 	bl	80070c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2200      	movs	r2, #0
 8005f52:	2100      	movs	r1, #0
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f001 fdc9 	bl	8007aec <USBD_LL_PrepareReceive>
 8005f5a:	e03f      	b.n	8005fdc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d11c      	bne.n	8005fa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d316      	bcc.n	8005fa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d20f      	bcs.n	8005fa2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f82:	2200      	movs	r2, #0
 8005f84:	2100      	movs	r1, #0
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f001 f89d 	bl	80070c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f94:	2300      	movs	r3, #0
 8005f96:	2200      	movs	r2, #0
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 fda6 	bl	8007aec <USBD_LL_PrepareReceive>
 8005fa0:	e01c      	b.n	8005fdc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d10f      	bne.n	8005fce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f001 fce1 	bl	8007998 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f001 f8c7 	bl	800716a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d03a      	beq.n	800605c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fe42 	bl	8005c70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ff4:	e032      	b.n	800605c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ff6:	7afb      	ldrb	r3, [r7, #11]
 8005ff8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f985 	bl	8006310 <USBD_CoreFindEP>
 8006006:	4603      	mov	r3, r0
 8006008:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800600a:	7dfb      	ldrb	r3, [r7, #23]
 800600c:	2bff      	cmp	r3, #255	@ 0xff
 800600e:	d025      	beq.n	800605c <USBD_LL_DataInStage+0x15a>
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d122      	bne.n	800605c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d11c      	bne.n	800605c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006022:	7dfa      	ldrb	r2, [r7, #23]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	32ae      	adds	r2, #174	@ 0xae
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d014      	beq.n	800605c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006032:	7dfa      	ldrb	r2, [r7, #23]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800603a:	7dfa      	ldrb	r2, [r7, #23]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	32ae      	adds	r2, #174	@ 0xae
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	7afa      	ldrb	r2, [r7, #11]
 8006048:	4611      	mov	r1, r2
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	4798      	blx	r3
 800604e:	4603      	mov	r3, r0
 8006050:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006052:	7dbb      	ldrb	r3, [r7, #22]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006058:	7dbb      	ldrb	r3, [r7, #22]
 800605a:	e000      	b.n	800605e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d014      	beq.n	80060cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6852      	ldr	r2, [r2, #4]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	4611      	mov	r1, r2
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060c8:	2303      	movs	r3, #3
 80060ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060cc:	2340      	movs	r3, #64	@ 0x40
 80060ce:	2200      	movs	r2, #0
 80060d0:	2100      	movs	r1, #0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fc1b 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2240      	movs	r2, #64	@ 0x40
 80060e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060e8:	2340      	movs	r3, #64	@ 0x40
 80060ea:	2200      	movs	r2, #0
 80060ec:	2180      	movs	r1, #128	@ 0x80
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 fc0d 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2240      	movs	r2, #64	@ 0x40
 80060fe:	621a      	str	r2, [r3, #32]

  return ret;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b04      	cmp	r3, #4
 800613c:	d006      	beq.n	800614c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006144:	b2da      	uxtb	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2204      	movs	r2, #4
 8006150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b04      	cmp	r3, #4
 8006174:	d106      	bne.n	8006184 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800617c:	b2da      	uxtb	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d110      	bne.n	80061c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	32ae      	adds	r2, #174	@ 0xae
 80061e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e01c      	b.n	800622e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d115      	bne.n	800622c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32ae      	adds	r2, #174	@ 0xae
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	32ae      	adds	r2, #174	@ 0xae
 800621e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	4611      	mov	r1, r2
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	32ae      	adds	r2, #174	@ 0xae
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006254:	2303      	movs	r3, #3
 8006256:	e01c      	b.n	8006292 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d115      	bne.n	8006290 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	32ae      	adds	r2, #174	@ 0xae
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00b      	beq.n	8006290 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	32ae      	adds	r2, #174	@ 0xae
 8006282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	4611      	mov	r1, r2
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6852      	ldr	r2, [r2, #4]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	4611      	mov	r1, r2
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006302:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800631c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b086      	sub	sp, #24
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	885b      	ldrh	r3, [r3, #2]
 8006346:	b29b      	uxth	r3, r3
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	4293      	cmp	r3, r2
 800634e:	d91f      	bls.n	8006390 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006356:	e013      	b.n	8006380 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006358:	f107 030a 	add.w	r3, r7, #10
 800635c:	4619      	mov	r1, r3
 800635e:	6978      	ldr	r0, [r7, #20]
 8006360:	f000 f81b 	bl	800639a <USBD_GetNextDesc>
 8006364:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b05      	cmp	r3, #5
 800636c:	d108      	bne.n	8006380 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	789b      	ldrb	r3, [r3, #2]
 8006376:	78fa      	ldrb	r2, [r7, #3]
 8006378:	429a      	cmp	r2, r3
 800637a:	d008      	beq.n	800638e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	885b      	ldrh	r3, [r3, #2]
 8006384:	b29a      	uxth	r2, r3
 8006386:	897b      	ldrh	r3, [r7, #10]
 8006388:	429a      	cmp	r2, r3
 800638a:	d8e5      	bhi.n	8006358 <USBD_GetEpDesc+0x2e>
 800638c:	e000      	b.n	8006390 <USBD_GetEpDesc+0x66>
          break;
 800638e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006390:	693b      	ldr	r3, [r7, #16]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	4413      	add	r3, r2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063c4:	68fb      	ldr	r3, [r7, #12]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3301      	adds	r3, #1
 80063e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	b21a      	sxth	r2, r3
 80063f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	b21b      	sxth	r3, r3
 8006400:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006402:	89fb      	ldrh	r3, [r7, #14]
}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d005      	beq.n	8006436 <USBD_StdDevReq+0x26>
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d857      	bhi.n	80064de <USBD_StdDevReq+0xce>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00f      	beq.n	8006452 <USBD_StdDevReq+0x42>
 8006432:	2b20      	cmp	r3, #32
 8006434:	d153      	bne.n	80064de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	32ae      	adds	r2, #174	@ 0xae
 8006440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	4798      	blx	r3
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e04a      	b.n	80064e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	2b09      	cmp	r3, #9
 8006458:	d83b      	bhi.n	80064d2 <USBD_StdDevReq+0xc2>
 800645a:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <USBD_StdDevReq+0x50>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	080064b5 	.word	0x080064b5
 8006464:	080064c9 	.word	0x080064c9
 8006468:	080064d3 	.word	0x080064d3
 800646c:	080064bf 	.word	0x080064bf
 8006470:	080064d3 	.word	0x080064d3
 8006474:	08006493 	.word	0x08006493
 8006478:	08006489 	.word	0x08006489
 800647c:	080064d3 	.word	0x080064d3
 8006480:	080064ab 	.word	0x080064ab
 8006484:	0800649d 	.word	0x0800649d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa3c 	bl	8006908 <USBD_GetDescriptor>
          break;
 8006490:	e024      	b.n	80064dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fba1 	bl	8006bdc <USBD_SetAddress>
          break;
 800649a:	e01f      	b.n	80064dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fbe0 	bl	8006c64 <USBD_SetConfig>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
          break;
 80064a8:	e018      	b.n	80064dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc83 	bl	8006db8 <USBD_GetConfig>
          break;
 80064b2:	e013      	b.n	80064dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fcb4 	bl	8006e24 <USBD_GetStatus>
          break;
 80064bc:	e00e      	b.n	80064dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fce3 	bl	8006e8c <USBD_SetFeature>
          break;
 80064c6:	e009      	b.n	80064dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fd07 	bl	8006ede <USBD_ClrFeature>
          break;
 80064d0:	e004      	b.n	80064dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fd5e 	bl	8006f96 <USBD_CtlError>
          break;
 80064da:	bf00      	nop
      }
      break;
 80064dc:	e004      	b.n	80064e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fd58 	bl	8006f96 <USBD_CtlError>
      break;
 80064e6:	bf00      	nop
  }

  return ret;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop

080064f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800650a:	2b40      	cmp	r3, #64	@ 0x40
 800650c:	d005      	beq.n	800651a <USBD_StdItfReq+0x26>
 800650e:	2b40      	cmp	r3, #64	@ 0x40
 8006510:	d852      	bhi.n	80065b8 <USBD_StdItfReq+0xc4>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <USBD_StdItfReq+0x26>
 8006516:	2b20      	cmp	r3, #32
 8006518:	d14e      	bne.n	80065b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	2b02      	cmp	r3, #2
 8006526:	d840      	bhi.n	80065aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	889b      	ldrh	r3, [r3, #4]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d836      	bhi.n	80065a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	889b      	ldrh	r3, [r3, #4]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fedb 	bl	80062f6 <USBD_CoreFindIF>
 8006540:	4603      	mov	r3, r0
 8006542:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	2bff      	cmp	r3, #255	@ 0xff
 8006548:	d01d      	beq.n	8006586 <USBD_StdItfReq+0x92>
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d11a      	bne.n	8006586 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006550:	7bba      	ldrb	r2, [r7, #14]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	32ae      	adds	r2, #174	@ 0xae
 8006556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00f      	beq.n	8006580 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006560:	7bba      	ldrb	r2, [r7, #14]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006568:	7bba      	ldrb	r2, [r7, #14]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	32ae      	adds	r2, #174	@ 0xae
 800656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800657e:	e004      	b.n	800658a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006580:	2303      	movs	r3, #3
 8006582:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006584:	e001      	b.n	800658a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006586:	2303      	movs	r3, #3
 8006588:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	88db      	ldrh	r3, [r3, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d110      	bne.n	80065b4 <USBD_StdItfReq+0xc0>
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10d      	bne.n	80065b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fdd3 	bl	8007144 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800659e:	e009      	b.n	80065b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fcf7 	bl	8006f96 <USBD_CtlError>
          break;
 80065a8:	e004      	b.n	80065b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fcf2 	bl	8006f96 <USBD_CtlError>
          break;
 80065b2:	e000      	b.n	80065b6 <USBD_StdItfReq+0xc2>
          break;
 80065b4:	bf00      	nop
      }
      break;
 80065b6:	e004      	b.n	80065c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fceb 	bl	8006f96 <USBD_CtlError>
      break;
 80065c0:	bf00      	nop
  }

  return ret;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	889b      	ldrh	r3, [r3, #4]
 80065de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d007      	beq.n	80065fc <USBD_StdEPReq+0x30>
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	f200 817f 	bhi.w	80068f0 <USBD_StdEPReq+0x324>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02a      	beq.n	800664c <USBD_StdEPReq+0x80>
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	f040 817a 	bne.w	80068f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fe85 	bl	8006310 <USBD_CoreFindEP>
 8006606:	4603      	mov	r3, r0
 8006608:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800660a:	7b7b      	ldrb	r3, [r7, #13]
 800660c:	2bff      	cmp	r3, #255	@ 0xff
 800660e:	f000 8174 	beq.w	80068fa <USBD_StdEPReq+0x32e>
 8006612:	7b7b      	ldrb	r3, [r7, #13]
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8170 	bne.w	80068fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800661a:	7b7a      	ldrb	r2, [r7, #13]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006622:	7b7a      	ldrb	r2, [r7, #13]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	32ae      	adds	r2, #174	@ 0xae
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8163 	beq.w	80068fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006634:	7b7a      	ldrb	r2, [r7, #13]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	32ae      	adds	r2, #174	@ 0xae
 800663a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800664a:	e156      	b.n	80068fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d008      	beq.n	8006666 <USBD_StdEPReq+0x9a>
 8006654:	2b03      	cmp	r3, #3
 8006656:	f300 8145 	bgt.w	80068e4 <USBD_StdEPReq+0x318>
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 809b 	beq.w	8006796 <USBD_StdEPReq+0x1ca>
 8006660:	2b01      	cmp	r3, #1
 8006662:	d03c      	beq.n	80066de <USBD_StdEPReq+0x112>
 8006664:	e13e      	b.n	80068e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d002      	beq.n	8006678 <USBD_StdEPReq+0xac>
 8006672:	2b03      	cmp	r3, #3
 8006674:	d016      	beq.n	80066a4 <USBD_StdEPReq+0xd8>
 8006676:	e02c      	b.n	80066d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <USBD_StdEPReq+0xce>
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b80      	cmp	r3, #128	@ 0x80
 8006682:	d00a      	beq.n	800669a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f985 	bl	8007998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800668e:	2180      	movs	r1, #128	@ 0x80
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f981 	bl	8007998 <USBD_LL_StallEP>
 8006696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006698:	e020      	b.n	80066dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc7a 	bl	8006f96 <USBD_CtlError>
              break;
 80066a2:	e01b      	b.n	80066dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	885b      	ldrh	r3, [r3, #2]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10e      	bne.n	80066ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <USBD_StdEPReq+0xfe>
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b80      	cmp	r3, #128	@ 0x80
 80066b6:	d008      	beq.n	80066ca <USBD_StdEPReq+0xfe>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	88db      	ldrh	r3, [r3, #6]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 f967 	bl	8007998 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fd3a 	bl	8007144 <USBD_CtlSendStatus>

              break;
 80066d0:	e004      	b.n	80066dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fc5e 	bl	8006f96 <USBD_CtlError>
              break;
 80066da:	bf00      	nop
          }
          break;
 80066dc:	e107      	b.n	80068ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d002      	beq.n	80066f0 <USBD_StdEPReq+0x124>
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d016      	beq.n	800671c <USBD_StdEPReq+0x150>
 80066ee:	e04b      	b.n	8006788 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <USBD_StdEPReq+0x146>
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b80      	cmp	r3, #128	@ 0x80
 80066fa:	d00a      	beq.n	8006712 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 f949 	bl	8007998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006706:	2180      	movs	r1, #128	@ 0x80
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 f945 	bl	8007998 <USBD_LL_StallEP>
 800670e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006710:	e040      	b.n	8006794 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fc3e 	bl	8006f96 <USBD_CtlError>
              break;
 800671a:	e03b      	b.n	8006794 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d136      	bne.n	8006792 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 f94f 	bl	80079d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fd03 	bl	8007144 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff fde4 	bl	8006310 <USBD_CoreFindEP>
 8006748:	4603      	mov	r3, r0
 800674a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800674c:	7b7b      	ldrb	r3, [r7, #13]
 800674e:	2bff      	cmp	r3, #255	@ 0xff
 8006750:	d01f      	beq.n	8006792 <USBD_StdEPReq+0x1c6>
 8006752:	7b7b      	ldrb	r3, [r7, #13]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11c      	bne.n	8006792 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006758:	7b7a      	ldrb	r2, [r7, #13]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006760:	7b7a      	ldrb	r2, [r7, #13]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	32ae      	adds	r2, #174	@ 0xae
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d010      	beq.n	8006792 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006770:	7b7a      	ldrb	r2, [r7, #13]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32ae      	adds	r2, #174	@ 0xae
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006786:	e004      	b.n	8006792 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fc03 	bl	8006f96 <USBD_CtlError>
              break;
 8006790:	e000      	b.n	8006794 <USBD_StdEPReq+0x1c8>
              break;
 8006792:	bf00      	nop
          }
          break;
 8006794:	e0ab      	b.n	80068ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d002      	beq.n	80067a8 <USBD_StdEPReq+0x1dc>
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d032      	beq.n	800680c <USBD_StdEPReq+0x240>
 80067a6:	e097      	b.n	80068d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <USBD_StdEPReq+0x1f2>
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b80      	cmp	r3, #128	@ 0x80
 80067b2:	d004      	beq.n	80067be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fbed 	bl	8006f96 <USBD_CtlError>
                break;
 80067bc:	e091      	b.n	80068e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da0b      	bge.n	80067de <USBD_StdEPReq+0x212>
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	3310      	adds	r3, #16
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4413      	add	r3, r2
 80067da:	3304      	adds	r3, #4
 80067dc:	e00b      	b.n	80067f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	3304      	adds	r3, #4
 80067f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2202      	movs	r2, #2
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fc43 	bl	8007090 <USBD_CtlSendData>
              break;
 800680a:	e06a      	b.n	80068e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800680c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006810:	2b00      	cmp	r3, #0
 8006812:	da11      	bge.n	8006838 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	f003 020f 	and.w	r2, r3, #15
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	3324      	adds	r3, #36	@ 0x24
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d117      	bne.n	800685e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fbb0 	bl	8006f96 <USBD_CtlError>
                  break;
 8006836:	e054      	b.n	80068e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb9d 	bl	8006f96 <USBD_CtlError>
                  break;
 800685c:	e041      	b.n	80068e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800685e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006862:	2b00      	cmp	r3, #0
 8006864:	da0b      	bge.n	800687e <USBD_StdEPReq+0x2b2>
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	3310      	adds	r3, #16
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	3304      	adds	r3, #4
 800687c:	e00b      	b.n	8006896 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	3304      	adds	r3, #4
 8006896:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <USBD_StdEPReq+0x2d8>
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b80      	cmp	r3, #128	@ 0x80
 80068a2:	d103      	bne.n	80068ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e00e      	b.n	80068ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 f8af 	bl	8007a14 <USBD_LL_IsStallEP>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e002      	b.n	80068ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2202      	movs	r2, #2
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fbdd 	bl	8007090 <USBD_CtlSendData>
              break;
 80068d6:	e004      	b.n	80068e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb5b 	bl	8006f96 <USBD_CtlError>
              break;
 80068e0:	bf00      	nop
          }
          break;
 80068e2:	e004      	b.n	80068ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fb55 	bl	8006f96 <USBD_CtlError>
          break;
 80068ec:	bf00      	nop
      }
      break;
 80068ee:	e005      	b.n	80068fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb4f 	bl	8006f96 <USBD_CtlError>
      break;
 80068f8:	e000      	b.n	80068fc <USBD_StdEPReq+0x330>
      break;
 80068fa:	bf00      	nop
  }

  return ret;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	885b      	ldrh	r3, [r3, #2]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	2b06      	cmp	r3, #6
 800692a:	f200 8128 	bhi.w	8006b7e <USBD_GetDescriptor+0x276>
 800692e:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <USBD_GetDescriptor+0x2c>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006951 	.word	0x08006951
 8006938:	08006969 	.word	0x08006969
 800693c:	080069a9 	.word	0x080069a9
 8006940:	08006b7f 	.word	0x08006b7f
 8006944:	08006b7f 	.word	0x08006b7f
 8006948:	08006b1f 	.word	0x08006b1f
 800694c:	08006b4b 	.word	0x08006b4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	7c12      	ldrb	r2, [r2, #16]
 800695c:	f107 0108 	add.w	r1, r7, #8
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
 8006964:	60f8      	str	r0, [r7, #12]
      break;
 8006966:	e112      	b.n	8006b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7c1b      	ldrb	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10d      	bne.n	800698c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	f107 0208 	add.w	r2, r7, #8
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
 8006980:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800698a:	e100      	b.n	8006b8e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	f107 0208 	add.w	r2, r7, #8
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	2202      	movs	r2, #2
 80069a4:	701a      	strb	r2, [r3, #0]
      break;
 80069a6:	e0f2      	b.n	8006b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	885b      	ldrh	r3, [r3, #2]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	f200 80ac 	bhi.w	8006b0c <USBD_GetDescriptor+0x204>
 80069b4:	a201      	add	r2, pc, #4	@ (adr r2, 80069bc <USBD_GetDescriptor+0xb4>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	08006a09 	.word	0x08006a09
 80069c4:	08006a3d 	.word	0x08006a3d
 80069c8:	08006a71 	.word	0x08006a71
 80069cc:	08006aa5 	.word	0x08006aa5
 80069d0:	08006ad9 	.word	0x08006ad9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f6:	e091      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 facb 	bl	8006f96 <USBD_CtlError>
            err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
          break;
 8006a06:	e089      	b.n	8006b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2a:	e077      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fab1 	bl	8006f96 <USBD_CtlError>
            err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3a:	e06f      	b.n	8006b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 0108 	add.w	r1, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5e:	e05d      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa97 	bl	8006f96 <USBD_CtlError>
            err++;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6e:	e055      	b.n	8006b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	7c12      	ldrb	r2, [r2, #16]
 8006a88:	f107 0108 	add.w	r1, r7, #8
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
 8006a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a92:	e043      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa7d 	bl	8006f96 <USBD_CtlError>
            err++;
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8006aa2:	e03b      	b.n	8006b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	7c12      	ldrb	r2, [r2, #16]
 8006abc:	f107 0108 	add.w	r1, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ac6:	e029      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa63 	bl	8006f96 <USBD_CtlError>
            err++;
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ad6:	e021      	b.n	8006b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7c12      	ldrb	r2, [r2, #16]
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
 8006af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afa:	e00f      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa49 	bl	8006f96 <USBD_CtlError>
            err++;
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	3301      	adds	r3, #1
 8006b08:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0a:	e007      	b.n	8006b1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa41 	bl	8006f96 <USBD_CtlError>
          err++;
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	3301      	adds	r3, #1
 8006b18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b1a:	bf00      	nop
      }
      break;
 8006b1c:	e037      	b.n	8006b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7c1b      	ldrb	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2e:	f107 0208 	add.w	r2, r7, #8
 8006b32:	4610      	mov	r0, r2
 8006b34:	4798      	blx	r3
 8006b36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b38:	e029      	b.n	8006b8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa2a 	bl	8006f96 <USBD_CtlError>
        err++;
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	3301      	adds	r3, #1
 8006b46:	72fb      	strb	r3, [r7, #11]
      break;
 8006b48:	e021      	b.n	8006b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7c1b      	ldrb	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10d      	bne.n	8006b6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5a:	f107 0208 	add.w	r2, r7, #8
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4798      	blx	r3
 8006b62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	2207      	movs	r2, #7
 8006b6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b6c:	e00f      	b.n	8006b8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fa10 	bl	8006f96 <USBD_CtlError>
        err++;
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b7c:	e007      	b.n	8006b8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa08 	bl	8006f96 <USBD_CtlError>
      err++;
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b8c:	bf00      	nop
  }

  if (err != 0U)
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11e      	bne.n	8006bd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	88db      	ldrh	r3, [r3, #6]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d016      	beq.n	8006bca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b9c:	893b      	ldrh	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	88da      	ldrh	r2, [r3, #6]
 8006ba6:	893b      	ldrh	r3, [r7, #8]
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	bf28      	it	cs
 8006bac:	4613      	movcs	r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa69 	bl	8007090 <USBD_CtlSendData>
 8006bbe:	e009      	b.n	8006bd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f9e7 	bl	8006f96 <USBD_CtlError>
 8006bc8:	e004      	b.n	8006bd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 faba 	bl	8007144 <USBD_CtlSendStatus>
 8006bd0:	e000      	b.n	8006bd4 <USBD_GetDescriptor+0x2cc>
    return;
 8006bd2:	bf00      	nop
  }
}
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop

08006bdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	889b      	ldrh	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d131      	bne.n	8006c52 <USBD_SetAddress+0x76>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	88db      	ldrh	r3, [r3, #6]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d12d      	bne.n	8006c52 <USBD_SetAddress+0x76>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	885b      	ldrh	r3, [r3, #2]
 8006bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bfc:	d829      	bhi.n	8006c52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	885b      	ldrh	r3, [r3, #2]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d104      	bne.n	8006c20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9bc 	bl	8006f96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1e:	e01d      	b.n	8006c5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7bfa      	ldrb	r2, [r7, #15]
 8006c24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 ff1d 	bl	8007a6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa86 	bl	8007144 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c46:	e009      	b.n	8006c5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c50:	e004      	b.n	8006c5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f99e 	bl	8006f96 <USBD_CtlError>
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	885b      	ldrh	r3, [r3, #2]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	4b4e      	ldr	r3, [pc, #312]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006c7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d905      	bls.n	8006c90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f985 	bl	8006f96 <USBD_CtlError>
    return USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e08c      	b.n	8006daa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d002      	beq.n	8006ca2 <USBD_SetConfig+0x3e>
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d029      	beq.n	8006cf4 <USBD_SetConfig+0x90>
 8006ca0:	e075      	b.n	8006d8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ca2:	4b44      	ldr	r3, [pc, #272]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d020      	beq.n	8006cec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006caa:	4b42      	ldr	r3, [pc, #264]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fe ffe3 	bl	8005c86 <USBD_SetClassConfig>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f962 	bl	8006f96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cda:	e065      	b.n	8006da8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa31 	bl	8007144 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cea:	e05d      	b.n	8006da8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa29 	bl	8007144 <USBD_CtlSendStatus>
      break;
 8006cf2:	e059      	b.n	8006da8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d112      	bne.n	8006d22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d04:	4b2b      	ldr	r3, [pc, #172]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d0e:	4b29      	ldr	r3, [pc, #164]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fe ffd2 	bl	8005cbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa12 	bl	8007144 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d20:	e042      	b.n	8006da8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d22:	4b24      	ldr	r3, [pc, #144]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d02a      	beq.n	8006d86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7fe ffc0 	bl	8005cbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d48:	4b1a      	ldr	r3, [pc, #104]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fe ff99 	bl	8005c86 <USBD_SetClassConfig>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00f      	beq.n	8006d7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f918 	bl	8006f96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fe ffa5 	bl	8005cbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d7c:	e014      	b.n	8006da8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9e0 	bl	8007144 <USBD_CtlSendStatus>
      break;
 8006d84:	e010      	b.n	8006da8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f9dc 	bl	8007144 <USBD_CtlSendStatus>
      break;
 8006d8c:	e00c      	b.n	8006da8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f900 	bl	8006f96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d96:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <USBD_SetConfig+0x150>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fe ff8e 	bl	8005cbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006da2:	2303      	movs	r3, #3
 8006da4:	73fb      	strb	r3, [r7, #15]
      break;
 8006da6:	bf00      	nop
  }

  return ret;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200008f4 	.word	0x200008f4

08006db8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d004      	beq.n	8006dd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f8e2 	bl	8006f96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dd2:	e023      	b.n	8006e1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	dc02      	bgt.n	8006de6 <USBD_GetConfig+0x2e>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dc03      	bgt.n	8006dec <USBD_GetConfig+0x34>
 8006de4:	e015      	b.n	8006e12 <USBD_GetConfig+0x5a>
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d00b      	beq.n	8006e02 <USBD_GetConfig+0x4a>
 8006dea:	e012      	b.n	8006e12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3308      	adds	r3, #8
 8006df6:	2201      	movs	r2, #1
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f948 	bl	8007090 <USBD_CtlSendData>
        break;
 8006e00:	e00c      	b.n	8006e1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	2201      	movs	r2, #1
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f940 	bl	8007090 <USBD_CtlSendData>
        break;
 8006e10:	e004      	b.n	8006e1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f8be 	bl	8006f96 <USBD_CtlError>
        break;
 8006e1a:	bf00      	nop
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d81e      	bhi.n	8006e7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d004      	beq.n	8006e4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f8a5 	bl	8006f96 <USBD_CtlError>
        break;
 8006e4c:	e01a      	b.n	8006e84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f043 0202 	orr.w	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	2202      	movs	r2, #2
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f90c 	bl	8007090 <USBD_CtlSendData>
      break;
 8006e78:	e004      	b.n	8006e84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f88a 	bl	8006f96 <USBD_CtlError>
      break;
 8006e82:	bf00      	nop
  }
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d107      	bne.n	8006eae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f94c 	bl	8007144 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006eac:	e013      	b.n	8006ed6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	885b      	ldrh	r3, [r3, #2]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d10b      	bne.n	8006ece <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	889b      	ldrh	r3, [r3, #4]
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f93c 	bl	8007144 <USBD_CtlSendStatus>
}
 8006ecc:	e003      	b.n	8006ed6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f860 	bl	8006f96 <USBD_CtlError>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d80b      	bhi.n	8006f0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10c      	bne.n	8006f18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f91c 	bl	8007144 <USBD_CtlSendStatus>
      }
      break;
 8006f0c:	e004      	b.n	8006f18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f840 	bl	8006f96 <USBD_CtlError>
      break;
 8006f16:	e000      	b.n	8006f1a <USBD_ClrFeature+0x3c>
      break;
 8006f18:	bf00      	nop
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	781a      	ldrb	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fa40 	bl	80063d2 <SWAPBYTE>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff fa33 	bl	80063d2 <SWAPBYTE>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7ff fa26 	bl	80063d2 <SWAPBYTE>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	80da      	strh	r2, [r3, #6]
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fa0:	2180      	movs	r1, #128	@ 0x80
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fcf8 	bl	8007998 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fcf4 	bl	8007998 <USBD_LL_StallEP>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d042      	beq.n	8007054 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006fd2:	6938      	ldr	r0, [r7, #16]
 8006fd4:	f000 f842 	bl	800705c <USBD_GetLen>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	3301      	adds	r3, #1
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe2:	d808      	bhi.n	8006ff6 <USBD_GetString+0x3e>
 8006fe4:	6938      	ldr	r0, [r7, #16]
 8006fe6:	f000 f839 	bl	800705c <USBD_GetLen>
 8006fea:	4603      	mov	r3, r0
 8006fec:	3301      	adds	r3, #1
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	e001      	b.n	8006ffa <USBD_GetString+0x42>
 8006ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	4413      	add	r3, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	701a      	strb	r2, [r3, #0]
  idx++;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	3301      	adds	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4413      	add	r3, r2
 8007016:	2203      	movs	r2, #3
 8007018:	701a      	strb	r2, [r3, #0]
  idx++;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	3301      	adds	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007020:	e013      	b.n	800704a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4413      	add	r3, r2
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	3301      	adds	r3, #1
 8007032:	613b      	str	r3, [r7, #16]
    idx++;
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	3301      	adds	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	4413      	add	r3, r2
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
    idx++;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	3301      	adds	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e7      	bne.n	8007022 <USBD_GetString+0x6a>
 8007052:	e000      	b.n	8007056 <USBD_GetString+0x9e>
    return;
 8007054:	bf00      	nop
  }
}
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800706c:	e005      	b.n	800707a <USBD_GetLen+0x1e>
  {
    len++;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	3301      	adds	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	3301      	adds	r3, #1
 8007078:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f5      	bne.n	800706e <USBD_GetLen+0x12>
  }

  return len;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2202      	movs	r2, #2
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	2100      	movs	r1, #0
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fcf7 	bl	8007aaa <USBD_LL_Transmit>

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	2100      	movs	r1, #0
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fce6 	bl	8007aaa <USBD_LL_Transmit>

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2203      	movs	r2, #3
 80070f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	2100      	movs	r1, #0
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 fcea 	bl	8007aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	2100      	movs	r1, #0
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fcd9 	bl	8007aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2204      	movs	r2, #4
 8007150:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007154:	2300      	movs	r3, #0
 8007156:	2200      	movs	r2, #0
 8007158:	2100      	movs	r1, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fca5 	bl	8007aaa <USBD_LL_Transmit>

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2205      	movs	r2, #5
 8007176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800717a:	2300      	movs	r3, #0
 800717c:	2200      	movs	r2, #0
 800717e:	2100      	movs	r1, #0
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fcb3 	bl	8007aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007194:	2200      	movs	r2, #0
 8007196:	4912      	ldr	r1, [pc, #72]	@ (80071e0 <MX_USB_DEVICE_Init+0x50>)
 8007198:	4812      	ldr	r0, [pc, #72]	@ (80071e4 <MX_USB_DEVICE_Init+0x54>)
 800719a:	f7fe fcf7 	bl	8005b8c <USBD_Init>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071a4:	f7f9 faca 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071a8:	490f      	ldr	r1, [pc, #60]	@ (80071e8 <MX_USB_DEVICE_Init+0x58>)
 80071aa:	480e      	ldr	r0, [pc, #56]	@ (80071e4 <MX_USB_DEVICE_Init+0x54>)
 80071ac:	f7fe fd1e 	bl	8005bec <USBD_RegisterClass>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071b6:	f7f9 fac1 	bl	800073c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071ba:	490c      	ldr	r1, [pc, #48]	@ (80071ec <MX_USB_DEVICE_Init+0x5c>)
 80071bc:	4809      	ldr	r0, [pc, #36]	@ (80071e4 <MX_USB_DEVICE_Init+0x54>)
 80071be:	f7fe fc15 	bl	80059ec <USBD_CDC_RegisterInterface>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071c8:	f7f9 fab8 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071cc:	4805      	ldr	r0, [pc, #20]	@ (80071e4 <MX_USB_DEVICE_Init+0x54>)
 80071ce:	f7fe fd43 	bl	8005c58 <USBD_Start>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071d8:	f7f9 fab0 	bl	800073c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071dc:	bf00      	nop
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	200000fc 	.word	0x200000fc
 80071e4:	200008f8 	.word	0x200008f8
 80071e8:	20000068 	.word	0x20000068
 80071ec:	200000e8 	.word	0x200000e8

080071f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071f4:	2200      	movs	r2, #0
 80071f6:	4905      	ldr	r1, [pc, #20]	@ (800720c <CDC_Init_FS+0x1c>)
 80071f8:	4805      	ldr	r0, [pc, #20]	@ (8007210 <CDC_Init_FS+0x20>)
 80071fa:	f7fe fc11 	bl	8005a20 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071fe:	4905      	ldr	r1, [pc, #20]	@ (8007214 <CDC_Init_FS+0x24>)
 8007200:	4803      	ldr	r0, [pc, #12]	@ (8007210 <CDC_Init_FS+0x20>)
 8007202:	f7fe fc2f 	bl	8005a64 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007206:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007208:	4618      	mov	r0, r3
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200013d4 	.word	0x200013d4
 8007210:	200008f8 	.word	0x200008f8
 8007214:	20000bd4 	.word	0x20000bd4

08007218 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800721c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
 8007234:	4613      	mov	r3, r2
 8007236:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	2b23      	cmp	r3, #35	@ 0x23
 800723c:	d84a      	bhi.n	80072d4 <CDC_Control_FS+0xac>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <CDC_Control_FS+0x1c>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	080072d5 	.word	0x080072d5
 8007248:	080072d5 	.word	0x080072d5
 800724c:	080072d5 	.word	0x080072d5
 8007250:	080072d5 	.word	0x080072d5
 8007254:	080072d5 	.word	0x080072d5
 8007258:	080072d5 	.word	0x080072d5
 800725c:	080072d5 	.word	0x080072d5
 8007260:	080072d5 	.word	0x080072d5
 8007264:	080072d5 	.word	0x080072d5
 8007268:	080072d5 	.word	0x080072d5
 800726c:	080072d5 	.word	0x080072d5
 8007270:	080072d5 	.word	0x080072d5
 8007274:	080072d5 	.word	0x080072d5
 8007278:	080072d5 	.word	0x080072d5
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072d5 	.word	0x080072d5
 8007284:	080072d5 	.word	0x080072d5
 8007288:	080072d5 	.word	0x080072d5
 800728c:	080072d5 	.word	0x080072d5
 8007290:	080072d5 	.word	0x080072d5
 8007294:	080072d5 	.word	0x080072d5
 8007298:	080072d5 	.word	0x080072d5
 800729c:	080072d5 	.word	0x080072d5
 80072a0:	080072d5 	.word	0x080072d5
 80072a4:	080072d5 	.word	0x080072d5
 80072a8:	080072d5 	.word	0x080072d5
 80072ac:	080072d5 	.word	0x080072d5
 80072b0:	080072d5 	.word	0x080072d5
 80072b4:	080072d5 	.word	0x080072d5
 80072b8:	080072d5 	.word	0x080072d5
 80072bc:	080072d5 	.word	0x080072d5
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	080072d5 	.word	0x080072d5
 80072cc:	080072d5 	.word	0x080072d5
 80072d0:	080072d5 	.word	0x080072d5
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80072d4:	bf00      	nop
	}

	return (USBD_OK);
 80072d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SbW_Request_Received_CB(&S, Buf, (uint16_t) (*Len));
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	4807      	ldr	r0, [pc, #28]	@ (8007318 <CDC_Receive_FS+0x34>)
 80072fa:	f7fd fdb7 	bl	8004e6c <SbW_Request_Received_CB>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4806      	ldr	r0, [pc, #24]	@ (800731c <CDC_Receive_FS+0x38>)
 8007302:	f7fe fbaf 	bl	8005a64 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007306:	4805      	ldr	r0, [pc, #20]	@ (800731c <CDC_Receive_FS+0x38>)
 8007308:	f7fe fc0a 	bl	8005b20 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800730c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000020 	.word	0x20000020
 800731c:	200008f8 	.word	0x200008f8

08007320 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8007330:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <CDC_Transmit_FS+0x48>)
 8007332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007336:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8007342:	2301      	movs	r3, #1
 8007344:	e00b      	b.n	800735e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	461a      	mov	r2, r3
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4806      	ldr	r0, [pc, #24]	@ (8007368 <CDC_Transmit_FS+0x48>)
 800734e:	f7fe fb67 	bl	8005a20 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007352:	4805      	ldr	r0, [pc, #20]	@ (8007368 <CDC_Transmit_FS+0x48>)
 8007354:	f7fe fba4 	bl	8005aa0 <USBD_CDC_TransmitPacket>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200008f8 	.word	0x200008f8

0800736c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	SbW_TxCPLt(&S);
 800737e:	4804      	ldr	r0, [pc, #16]	@ (8007390 <CDC_TransmitCplt_FS+0x24>)
 8007380:	f7fd ff28 	bl	80051d4 <SbW_TxCPLt>
  /* USER CODE END 13 */
  return result;
 8007384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000020 	.word	0x20000020

08007394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2212      	movs	r2, #18
 80073a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073a6:	4b03      	ldr	r3, [pc, #12]	@ (80073b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20000118 	.word	0x20000118

080073b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2204      	movs	r2, #4
 80073c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ca:	4b03      	ldr	r3, [pc, #12]	@ (80073d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	2000012c 	.word	0x2000012c

080073dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4907      	ldr	r1, [pc, #28]	@ (8007410 <USBD_FS_ProductStrDescriptor+0x34>)
 80073f2:	4808      	ldr	r0, [pc, #32]	@ (8007414 <USBD_FS_ProductStrDescriptor+0x38>)
 80073f4:	f7ff fde0 	bl	8006fb8 <USBD_GetString>
 80073f8:	e004      	b.n	8007404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4904      	ldr	r1, [pc, #16]	@ (8007410 <USBD_FS_ProductStrDescriptor+0x34>)
 80073fe:	4805      	ldr	r0, [pc, #20]	@ (8007414 <USBD_FS_ProductStrDescriptor+0x38>)
 8007400:	f7ff fdda 	bl	8006fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007404:	4b02      	ldr	r3, [pc, #8]	@ (8007410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20001bd4 	.word	0x20001bd4
 8007414:	08007c68 	.word	0x08007c68

08007418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	6039      	str	r1, [r7, #0]
 8007422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	4904      	ldr	r1, [pc, #16]	@ (8007438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007428:	4804      	ldr	r0, [pc, #16]	@ (800743c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800742a:	f7ff fdc5 	bl	8006fb8 <USBD_GetString>
  return USBD_StrDesc;
 800742e:	4b02      	ldr	r3, [pc, #8]	@ (8007438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20001bd4 	.word	0x20001bd4
 800743c:	08007c80 	.word	0x08007c80

08007440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	221a      	movs	r2, #26
 8007450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007452:	f000 f843 	bl	80074dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007456:	4b02      	ldr	r3, [pc, #8]	@ (8007460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000130 	.word	0x20000130

08007464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4907      	ldr	r1, [pc, #28]	@ (8007498 <USBD_FS_ConfigStrDescriptor+0x34>)
 800747a:	4808      	ldr	r0, [pc, #32]	@ (800749c <USBD_FS_ConfigStrDescriptor+0x38>)
 800747c:	f7ff fd9c 	bl	8006fb8 <USBD_GetString>
 8007480:	e004      	b.n	800748c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4904      	ldr	r1, [pc, #16]	@ (8007498 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007486:	4805      	ldr	r0, [pc, #20]	@ (800749c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007488:	f7ff fd96 	bl	8006fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800748c:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20001bd4 	.word	0x20001bd4
 800749c:	08007c94 	.word	0x08007c94

080074a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4907      	ldr	r1, [pc, #28]	@ (80074d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074b6:	4808      	ldr	r0, [pc, #32]	@ (80074d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074b8:	f7ff fd7e 	bl	8006fb8 <USBD_GetString>
 80074bc:	e004      	b.n	80074c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	4904      	ldr	r1, [pc, #16]	@ (80074d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074c2:	4805      	ldr	r0, [pc, #20]	@ (80074d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c4:	f7ff fd78 	bl	8006fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074c8:	4b02      	ldr	r3, [pc, #8]	@ (80074d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20001bd4 	.word	0x20001bd4
 80074d8:	08007ca0 	.word	0x08007ca0

080074dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <Get_SerialNum+0x44>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <Get_SerialNum+0x48>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <Get_SerialNum+0x4c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007502:	2208      	movs	r2, #8
 8007504:	4909      	ldr	r1, [pc, #36]	@ (800752c <Get_SerialNum+0x50>)
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f814 	bl	8007534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800750c:	2204      	movs	r2, #4
 800750e:	4908      	ldr	r1, [pc, #32]	@ (8007530 <Get_SerialNum+0x54>)
 8007510:	68b8      	ldr	r0, [r7, #8]
 8007512:	f000 f80f 	bl	8007534 <IntToUnicode>
  }
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	1fff7a10 	.word	0x1fff7a10
 8007524:	1fff7a14 	.word	0x1fff7a14
 8007528:	1fff7a18 	.word	0x1fff7a18
 800752c:	20000132 	.word	0x20000132
 8007530:	20000142 	.word	0x20000142

08007534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]
 800754a:	e027      	b.n	800759c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	2b09      	cmp	r3, #9
 8007552:	d80b      	bhi.n	800756c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	0f1b      	lsrs	r3, r3, #28
 8007558:	b2da      	uxtb	r2, r3
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4619      	mov	r1, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	440b      	add	r3, r1
 8007564:	3230      	adds	r2, #48	@ 0x30
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	e00a      	b.n	8007582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0f1b      	lsrs	r3, r3, #28
 8007570:	b2da      	uxtb	r2, r3
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4619      	mov	r1, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	440b      	add	r3, r1
 800757c:	3237      	adds	r2, #55	@ 0x37
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	3301      	adds	r3, #1
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4413      	add	r3, r2
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	3301      	adds	r3, #1
 800759a:	75fb      	strb	r3, [r7, #23]
 800759c:	7dfa      	ldrb	r2, [r7, #23]
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d3d3      	bcc.n	800754c <IntToUnicode+0x18>
  }
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075bc:	f107 0314 	add.w	r3, r7, #20
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075d4:	d13a      	bne.n	800764c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	4b1e      	ldr	r3, [pc, #120]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075de:	4a1d      	ldr	r2, [pc, #116]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80075e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80075f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f8:	2302      	movs	r3, #2
 80075fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007604:	230a      	movs	r3, #10
 8007606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	4619      	mov	r1, r3
 800760e:	4812      	ldr	r0, [pc, #72]	@ (8007658 <HAL_PCD_MspInit+0xa4>)
 8007610:	f7f9 fbae 	bl	8000d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007614:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 8007616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007618:	4a0e      	ldr	r2, [pc, #56]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 800761a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800761e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	4a0a      	ldr	r2, [pc, #40]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 800762a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800762e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007630:	4b08      	ldr	r3, [pc, #32]	@ (8007654 <HAL_PCD_MspInit+0xa0>)
 8007632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800763c:	2200      	movs	r2, #0
 800763e:	2100      	movs	r1, #0
 8007640:	2043      	movs	r0, #67	@ 0x43
 8007642:	f7f9 fb5e 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007646:	2043      	movs	r0, #67	@ 0x43
 8007648:	f7f9 fb77 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800764c:	bf00      	nop
 800764e:	3728      	adds	r7, #40	@ 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40023800 	.word	0x40023800
 8007658:	40020000 	.word	0x40020000

0800765c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe fb3d 	bl	8005cf2 <USBD_LL_SetupStage>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7fe fb77 	bl	8005d9c <USBD_LL_DataOutStage>
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	3320      	adds	r3, #32
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	4619      	mov	r1, r3
 80076de:	f7fe fc10 	bl	8005f02 <USBD_LL_DataInStage>
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe fd4a 	bl	8006192 <USBD_LL_SOF>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	79db      	ldrb	r3, [r3, #7]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	e008      	b.n	8007732 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	79db      	ldrb	r3, [r3, #7]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d102      	bne.n	800772e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e001      	b.n	8007732 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800772e:	f7f9 f805 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007738:	7bfa      	ldrb	r2, [r7, #15]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fce4 	bl	800610a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fc8c 	bl	8006066 <USBD_LL_Reset>
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fcdf 	bl	800612a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7adb      	ldrb	r3, [r3, #11]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800778c:	4b04      	ldr	r3, [pc, #16]	@ (80077a0 <HAL_PCD_SuspendCallback+0x48>)
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	4a03      	ldr	r2, [pc, #12]	@ (80077a0 <HAL_PCD_SuspendCallback+0x48>)
 8007792:	f043 0306 	orr.w	r3, r3, #6
 8007796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	e000ed00 	.word	0xe000ed00

080077a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fcd5 	bl	8006162 <USBD_LL_Resume>
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fd2d 	bl	8006236 <USBD_LL_IsoOUTIncomplete>
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fce9 	bl	80061d2 <USBD_LL_IsoINIncomplete>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fd3f 	bl	800629a <USBD_LL_DevConnected>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fd3c 	bl	80062b0 <USBD_LL_DevDisconnected>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d13c      	bne.n	80078ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007850:	4a20      	ldr	r2, [pc, #128]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a1e      	ldr	r2, [pc, #120]	@ (80078d4 <USBD_LL_Init+0x94>)
 800785c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007860:	4b1c      	ldr	r3, [pc, #112]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007862:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007868:	4b1a      	ldr	r3, [pc, #104]	@ (80078d4 <USBD_LL_Init+0x94>)
 800786a:	2204      	movs	r2, #4
 800786c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800786e:	4b19      	ldr	r3, [pc, #100]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007870:	2202      	movs	r2, #2
 8007872:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007874:	4b17      	ldr	r3, [pc, #92]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007876:	2200      	movs	r2, #0
 8007878:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800787a:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <USBD_LL_Init+0x94>)
 800787c:	2202      	movs	r2, #2
 800787e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007880:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007882:	2200      	movs	r2, #0
 8007884:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007886:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007888:	2200      	movs	r2, #0
 800788a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800788c:	4b11      	ldr	r3, [pc, #68]	@ (80078d4 <USBD_LL_Init+0x94>)
 800788e:	2200      	movs	r2, #0
 8007890:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007892:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <USBD_LL_Init+0x94>)
 8007894:	2200      	movs	r2, #0
 8007896:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007898:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <USBD_LL_Init+0x94>)
 800789a:	2200      	movs	r2, #0
 800789c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800789e:	480d      	ldr	r0, [pc, #52]	@ (80078d4 <USBD_LL_Init+0x94>)
 80078a0:	f7f9 fc02 	bl	80010a8 <HAL_PCD_Init>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078aa:	f7f8 ff47 	bl	800073c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078ae:	2180      	movs	r1, #128	@ 0x80
 80078b0:	4808      	ldr	r0, [pc, #32]	@ (80078d4 <USBD_LL_Init+0x94>)
 80078b2:	f7fa fe2e 	bl	8002512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078b6:	2240      	movs	r2, #64	@ 0x40
 80078b8:	2100      	movs	r1, #0
 80078ba:	4806      	ldr	r0, [pc, #24]	@ (80078d4 <USBD_LL_Init+0x94>)
 80078bc:	f7fa fde2 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078c0:	2280      	movs	r2, #128	@ 0x80
 80078c2:	2101      	movs	r1, #1
 80078c4:	4803      	ldr	r0, [pc, #12]	@ (80078d4 <USBD_LL_Init+0x94>)
 80078c6:	f7fa fddd 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20001dd4 	.word	0x20001dd4

080078d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f9 fce9 	bl	80012c6 <HAL_PCD_Start>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f942 	bl	8007b84 <USBD_Get_USB_Status>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007904:	7bbb      	ldrb	r3, [r7, #14]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	461a      	mov	r2, r3
 800791c:	4603      	mov	r3, r0
 800791e:	70fb      	strb	r3, [r7, #3]
 8007920:	460b      	mov	r3, r1
 8007922:	70bb      	strb	r3, [r7, #2]
 8007924:	4613      	mov	r3, r2
 8007926:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007936:	78bb      	ldrb	r3, [r7, #2]
 8007938:	883a      	ldrh	r2, [r7, #0]
 800793a:	78f9      	ldrb	r1, [r7, #3]
 800793c:	f7fa f9bd 	bl	8001cba <HAL_PCD_EP_Open>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f91c 	bl	8007b84 <USBD_Get_USB_Status>
 800794c:	4603      	mov	r3, r0
 800794e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	4611      	mov	r1, r2
 8007978:	4618      	mov	r0, r3
 800797a:	f7fa fa08 	bl	8001d8e <HAL_PCD_EP_Close>
 800797e:	4603      	mov	r3, r0
 8007980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f8fd 	bl	8007b84 <USBD_Get_USB_Status>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fa fac0 	bl	8001f3c <HAL_PCD_EP_SetStall>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f8de 	bl	8007b84 <USBD_Get_USB_Status>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fa fb04 	bl	8002002 <HAL_PCD_EP_ClrStall>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f8bf 	bl	8007b84 <USBD_Get_USB_Status>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da0b      	bge.n	8007a48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	3316      	adds	r3, #22
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	e00b      	b.n	8007a60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fa f8f1 	bl	8001c72 <HAL_PCD_SetAddress>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f874 	bl	8007b84 <USBD_Get_USB_Status>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ac8:	7af9      	ldrb	r1, [r7, #11]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	f7fa f9fb 	bl	8001ec8 <HAL_PCD_EP_Transmit>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f853 	bl	8007b84 <USBD_Get_USB_Status>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ae2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	460b      	mov	r3, r1
 8007afa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b0a:	7af9      	ldrb	r1, [r7, #11]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	f7fa f987 	bl	8001e22 <HAL_PCD_EP_Receive>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f832 	bl	8007b84 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b24:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fa f9a7 	bl	8001e98 <HAL_PCD_EP_GetRxCount>
 8007b4a:	4603      	mov	r3, r0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	@ (8007b6c <USBD_static_malloc+0x18>)
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	200022b8 	.word	0x200022b8

08007b70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d817      	bhi.n	8007bc8 <USBD_Get_USB_Status+0x44>
 8007b98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <USBD_Get_USB_Status+0x1c>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb1 	.word	0x08007bb1
 8007ba4:	08007bb7 	.word	0x08007bb7
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007bc3 	.word	0x08007bc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e00b      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bba:	e008      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e005      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e002      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	bf00      	nop
  }
  return usb_status;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <memset>:
 8007bdc:	4402      	add	r2, r0
 8007bde:	4603      	mov	r3, r0
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d100      	bne.n	8007be6 <memset+0xa>
 8007be4:	4770      	bx	lr
 8007be6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bea:	e7f9      	b.n	8007be0 <memset+0x4>

08007bec <__libc_init_array>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	4d0d      	ldr	r5, [pc, #52]	@ (8007c24 <__libc_init_array+0x38>)
 8007bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8007c28 <__libc_init_array+0x3c>)
 8007bf2:	1b64      	subs	r4, r4, r5
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	42a6      	cmp	r6, r4
 8007bfa:	d109      	bne.n	8007c10 <__libc_init_array+0x24>
 8007bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8007c2c <__libc_init_array+0x40>)
 8007bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8007c30 <__libc_init_array+0x44>)
 8007c00:	f000 f826 	bl	8007c50 <_init>
 8007c04:	1b64      	subs	r4, r4, r5
 8007c06:	10a4      	asrs	r4, r4, #2
 8007c08:	2600      	movs	r6, #0
 8007c0a:	42a6      	cmp	r6, r4
 8007c0c:	d105      	bne.n	8007c1a <__libc_init_array+0x2e>
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c14:	4798      	blx	r3
 8007c16:	3601      	adds	r6, #1
 8007c18:	e7ee      	b.n	8007bf8 <__libc_init_array+0xc>
 8007c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1e:	4798      	blx	r3
 8007c20:	3601      	adds	r6, #1
 8007c22:	e7f2      	b.n	8007c0a <__libc_init_array+0x1e>
 8007c24:	08007cc8 	.word	0x08007cc8
 8007c28:	08007cc8 	.word	0x08007cc8
 8007c2c:	08007cc8 	.word	0x08007cc8
 8007c30:	08007ccc 	.word	0x08007ccc

08007c34 <memcpy>:
 8007c34:	440a      	add	r2, r1
 8007c36:	4291      	cmp	r1, r2
 8007c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c3c:	d100      	bne.n	8007c40 <memcpy+0xc>
 8007c3e:	4770      	bx	lr
 8007c40:	b510      	push	{r4, lr}
 8007c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c4a:	4291      	cmp	r1, r2
 8007c4c:	d1f9      	bne.n	8007c42 <memcpy+0xe>
 8007c4e:	bd10      	pop	{r4, pc}

08007c50 <_init>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr

08007c5c <_fini>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr
