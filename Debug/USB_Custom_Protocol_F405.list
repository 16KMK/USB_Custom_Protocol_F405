
USB_Custom_Protocol_F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb4  08007cb4  0000912c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cbc  08007cbc  0000912c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08007cc4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000912c  2**0
                  CONTENTS
 10 .bss          00002214  2000012c  2000012c  0000912c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002340  20002340  0000912c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ad3  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035d8  00000000  00000000  0001cc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00020208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d28  00000000  00000000  00021368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fbc  00000000  00000000  00022090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001670f  00000000  00000000  0004404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f46  00000000  00000000  0005a75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c6a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047bc  00000000  00000000  0011c6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  00120ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c44 	.word	0x08007c44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	08007c44 	.word	0x08007c44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SbW_Protocol_Reply>:
uint8_t TxBuffer[TxRxBufferSize];
uint8_t RxBuffer[TxRxBufferSize];

extern DataFrame F;

void SbW_Protocol_Reply(uint8_t *data, uint16_t len) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(data, len);
 8000500:	887b      	ldrh	r3, [r7, #2]
 8000502:	4619      	mov	r1, r3
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f006 ff05 	bl	8007314 <CDC_Transmit_FS>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <App_User_Callback>:

void App_User_Callback(SbW_Err_Codes_t Error_Code) {
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	71fb      	strb	r3, [r7, #7]
	// Implement error handling if needed
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	F.G[0]++;
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000532:	7d1b      	ldrb	r3, [r3, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800053a:	751a      	strb	r2, [r3, #20]
	SbW_Timer_Callback(&S);
 800053c:	4804      	ldr	r0, [pc, #16]	@ (8000550 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800053e:	f004 fdd9 	bl	80050f4 <SbW_Timer_Callback>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000290 	.word	0x20000290
 8000550:	20000000 	.word	0x20000000

08000554 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000558:	f000 fa6a 	bl	8000a30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800055c:	f000 f812 	bl	8000584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000560:	f000 f8cc 	bl	80006fc <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000564:	f006 fe0e 	bl	8007184 <MX_USB_DEVICE_Init>
	MX_TIM1_Init();
 8000568:	f000 f878 	bl	800065c <MX_TIM1_Init>

	 // Initialize the FIFO before using*/
	//fifo_init(&S.MessageFifo);

	// Simulate periodic callback that queues the frame
	SbW_Init(&S);
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <main+0x28>)
 800056e:	f004 fc69 	bl	8004e44 <SbW_Init>
	HAL_TIM_Base_Start_IT(&htim1);
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <main+0x2c>)
 8000574:	f002 fcd8 	bl	8002f28 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x24>
 800057c:	20000000 	.word	0x20000000
 8000580:	20000248 	.word	0x20000248

08000584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 fb1c 	bl	8007bd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a28      	ldr	r2, [pc, #160]	@ (8000654 <SystemClock_Config+0xd0>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a22      	ldr	r2, [pc, #136]	@ (8000658 <SystemClock_Config+0xd4>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	@ 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ffa7 	bl	800255c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
		Error_Handler();
 8000614:	f000 f89a 	bl	800074c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fa08 	bl	8002a4c <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
		Error_Handler();
 8000642:	f000 f883 	bl	800074c <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8000646:	f002 fae7 	bl	8002c18 <HAL_RCC_EnableCSS>
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_TIM1_Init+0x98>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	@ (80006f8 <MX_TIM1_Init+0x9c>)
 800067c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_TIM1_Init+0x98>)
 8000680:	2253      	movs	r2, #83	@ 0x53
 8000682:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_TIM1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_TIM1_Init+0x98>)
 800068c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000690:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_TIM1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_TIM1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_TIM1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_TIM1_Init+0x98>)
 80006a6:	f002 fbf0 	bl	8002e8a <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x58>
		Error_Handler();
 80006b0:	f000 f84c 	bl	800074c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	@ (80006f4 <MX_TIM1_Init+0x98>)
 80006c2:	f002 fd91 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x74>
		Error_Handler();
 80006cc:	f000 f83e 	bl	800074c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_TIM1_Init+0x98>)
 80006de:	f002 ffb9 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80006e8:	f000 f830 	bl	800074c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000248 	.word	0x20000248
 80006f8:	40010000 	.word	0x40010000

080006fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_GPIO_Init+0x4c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a0f      	ldr	r2, [pc, #60]	@ (8000748 <MX_GPIO_Init+0x4c>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MX_GPIO_Init+0x4c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_GPIO_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a08      	ldr	r2, [pc, #32]	@ (8000748 <MX_GPIO_Init+0x4c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_GPIO_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <Error_Handler+0x8>

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076c:	6453      	str	r3, [r2, #68]	@ 0x44
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_MspInit+0x4c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_TIM_Base_MspInit+0x48>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d115      	bne.n	80007e6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <HAL_TIM_Base_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c2:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <HAL_TIM_Base_MspInit+0x4c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_TIM_Base_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2019      	movs	r0, #25
 80007dc:	f000 fa99 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007e0:	2019      	movs	r0, #25
 80007e2:	f000 fab2 	bl	8000d4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40010000 	.word	0x40010000
 80007f4:	40023800 	.word	0x40023800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007fc:	f002 fb2a 	bl	8002e54 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x8>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f93f 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000862:	f002 fbd1 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000248 	.word	0x20000248

08000870 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <OTG_FS_IRQHandler+0x10>)
 8000876:	f000 fd63 	bl	8001340 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20001c3c 	.word	0x20001c3c

08000884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008ac:	f7ff ffea 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	@ (80008f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008d6:	f007 f983 	bl	8007be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008da:	f7ff fe3b 	bl	8000554 <main>
  bx  lr    
 80008de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80008ec:	08007cc4 	.word	0x08007cc4
  ldr r2, =_sbss
 80008f0:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80008f4:	20002340 	.word	0x20002340

080008f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC_IRQHandler>

080008fa <fifo_init>:
#include "FIFO.h"

// Initialize the FIFO
void fifo_init(fifo_T *f) {
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	f->head = f->UserHead = -1; // Outside the buffer
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000908:	811a      	strh	r2, [r3, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	801a      	strh	r2, [r3, #0]
	f->tail = f->UserTail = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	815a      	strh	r2, [r3, #10]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	805a      	strh	r2, [r3, #2]
	f->count = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	809a      	strh	r2, [r3, #4]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <fifo_is_empty>:

// Check if the FIFO is empty
int8_t fifo_is_empty(const fifo_T *f) {
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	return (f->count == 0);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf0c      	ite	eq
 8000946:	2301      	moveq	r3, #1
 8000948:	2300      	movne	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	b25b      	sxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <fifo_enqueue>:

// Enqueue data into the FIFO (overwrite oldest element if full)
int16_t fifo_enqueue(fifo_T *f) {
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	f->head = (f->head + 1) % f->Fifo_Size; // Circular wrap-around
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000968:	3301      	adds	r3, #1
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	88d2      	ldrh	r2, [r2, #6]
 800096e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000972:	fb01 f202 	mul.w	r2, r1, r2
 8000976:	1a9b      	subs	r3, r3, r2
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	801a      	strh	r2, [r3, #0]
	// Remainder = write index in the buffer
	f->UserHead = f->head;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	811a      	strh	r2, [r3, #8]
	if (f->count == f->Fifo_Size) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	889a      	ldrh	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	88db      	ldrh	r3, [r3, #6]
 8000990:	429a      	cmp	r2, r3
 8000992:	d10e      	bne.n	80009b2 <fifo_enqueue+0x58>
		// FIFO is full → Overwrite → Move tail forward
		f->tail = (f->tail + 1) % f->Fifo_Size;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800099a:	3301      	adds	r3, #1
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	88d2      	ldrh	r2, [r2, #6]
 80009a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80009a4:	fb01 f202 	mul.w	r2, r1, r2
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	805a      	strh	r2, [r3, #2]
 80009b0:	e005      	b.n	80009be <fifo_enqueue+0x64>
	} else {
		f->count++;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	809a      	strh	r2, [r3, #4]
	}
	return f->UserHead;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <fifo_dequeue>:

// Dequeue data from the FIFO
int16_t fifo_dequeue(fifo_T *f) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(f)) {
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ffac 	bl	8000936 <fifo_is_empty>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d119      	bne.n	8000a18 <fifo_dequeue+0x48>
		f->UserTail = f->tail;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	815a      	strh	r2, [r3, #10]
		f->count--;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	889b      	ldrh	r3, [r3, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	809a      	strh	r2, [r3, #4]
		f->tail = (f->tail + 1) % f->Fifo_Size; // Circular wrap-around
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a00:	3301      	adds	r3, #1
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	88d2      	ldrh	r2, [r2, #6]
 8000a06:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a0a:	fb01 f202 	mul.w	r2, r1, r2
 8000a0e:	1a9b      	subs	r3, r3, r2
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	805a      	strh	r2, [r3, #2]
 8000a16:	e003      	b.n	8000a20 <fifo_dequeue+0x50>
	} else {
		f->UserTail = -1; // FIFO is empty
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a1e:	815a      	strh	r2, [r3, #10]
	}
	return f->UserTail;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f94f 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fe78 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f967 	bl	8000d66 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f92f 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000030 	.word	0x20000030
 8000acc:	20000038 	.word	0x20000038
 8000ad0:	20000034 	.word	0x20000034

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000038 	.word	0x20000038
 8000af8:	20000758 	.word	0x20000758

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000758 	.word	0x20000758

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000038 	.word	0x20000038

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	@ (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e16b      	b.n	8001074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 815a 	bne.w	800106e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d005      	beq.n	8000dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80b4 	beq.w	800106e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b60      	ldr	r3, [pc, #384]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a5f      	ldr	r2, [pc, #380]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b5d      	ldr	r3, [pc, #372]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a5b      	ldr	r2, [pc, #364]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a52      	ldr	r2, [pc, #328]	@ (8001094 <HAL_GPIO_Init+0x314>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d02b      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a51      	ldr	r2, [pc, #324]	@ (8001098 <HAL_GPIO_Init+0x318>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x222>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a50      	ldr	r2, [pc, #320]	@ (800109c <HAL_GPIO_Init+0x31c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x21e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4f      	ldr	r2, [pc, #316]	@ (80010a0 <HAL_GPIO_Init+0x320>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4d      	ldr	r2, [pc, #308]	@ (80010a8 <HAL_GPIO_Init+0x328>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <HAL_GPIO_Init+0x32c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4b      	ldr	r2, [pc, #300]	@ (80010b0 <HAL_GPIO_Init+0x330>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x20a>
 8000f86:	2307      	movs	r3, #7
 8000f88:	e00e      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	f002 0203 	and.w	r2, r2, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb8:	4935      	ldr	r1, [pc, #212]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fea:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3301      	adds	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	f67f ae90 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40013800 	.word	0x40013800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40021400 	.word	0x40021400
 80010ac:	40021800 	.word	0x40021800
 80010b0:	40021c00 	.word	0x40021c00
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e101      	b.n	80012ce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d106      	bne.n	80010ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f006 fa5f 	bl	80075a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f8:	d102      	bne.n	8001100 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fc4c 	bl	80039a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7c1a      	ldrb	r2, [r3, #16]
 8001112:	f88d 2000 	strb.w	r2, [sp]
 8001116:	3304      	adds	r3, #4
 8001118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111a:	f002 fb2b 	bl	8003774 <USB_CoreInit>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2202      	movs	r2, #2
 8001128:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0ce      	b.n	80012ce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fc44 	bl	80039c4 <USB_SetCurrentMode>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2202      	movs	r2, #2
 8001146:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0bf      	b.n	80012ce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e04a      	b.n	80011ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	3315      	adds	r3, #21
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	3314      	adds	r3, #20
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	b298      	uxth	r0, r3
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	332e      	adds	r3, #46	@ 0x2e
 8001190:	4602      	mov	r2, r0
 8001192:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3318      	adds	r3, #24
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	331c      	adds	r3, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3320      	adds	r3, #32
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3324      	adds	r3, #36	@ 0x24
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3af      	bcc.n	8001154 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e044      	b.n	8001284 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3301      	adds	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	791b      	ldrb	r3, [r3, #4]
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3b5      	bcc.n	80011fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7c1a      	ldrb	r2, [r3, #16]
 8001296:	f88d 2000 	strb.w	r2, [sp]
 800129a:	3304      	adds	r3, #4
 800129c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129e:	f002 fbdd 	bl	8003a5c <USB_DevInit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e00c      	b.n	80012ce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fc27 	bl	8004b1a <USB_DevDisconnect>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_PCD_Start+0x1c>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e022      	b.n	8001338 <HAL_PCD_Start+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800130a:	2b01      	cmp	r3, #1
 800130c:	d105      	bne.n	800131a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001312:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fb2e 	bl	8003980 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fbd5 	bl	8004ad8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08d      	sub	sp, #52	@ 0x34
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fc93 	bl	8004c82 <USB_GetMode>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 848c 	bne.w	8001c7c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fbf7 	bl	8004b5c <USB_ReadInterrupts>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8482 	beq.w	8001c7a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fbe4 	bl	8004b5c <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d107      	bne.n	80013ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 0202 	and.w	r2, r2, #2
 80013ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fbd2 	bl	8004b5c <USB_ReadInterrupts>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d161      	bne.n	8001486 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0210 	bic.w	r2, r2, #16
 80013d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f003 020f 	and.w	r2, r3, #15
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	3304      	adds	r3, #4
 80013f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013fc:	d124      	bne.n	8001448 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d035      	beq.n	8001476 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	6a38      	ldr	r0, [r7, #32]
 800141e:	f003 fa09 	bl	8004834 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142e:	441a      	add	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001440:	441a      	add	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	e016      	b.n	8001476 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800144e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001452:	d110      	bne.n	8001476 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800145a:	2208      	movs	r2, #8
 800145c:	4619      	mov	r1, r3
 800145e:	6a38      	ldr	r0, [r7, #32]
 8001460:	f003 f9e8 	bl	8004834 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	441a      	add	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0210 	orr.w	r2, r2, #16
 8001484:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fb66 	bl	8004b5c <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001496:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800149a:	f040 80a7 	bne.w	80015ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fb6b 	bl	8004b82 <USB_ReadDevAllOutEpInterrupt>
 80014ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80014ae:	e099      	b.n	80015e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 808e 	beq.w	80015d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fb8f 	bl	8004bea <USB_ReadDevOutEPInterrupt>
 80014cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fea3 	bl	8002238 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	2308      	movs	r3, #8
 800150c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800150e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 ff79 	bl	8002408 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800152c:	461a      	mov	r2, r3
 800152e:	2310      	movs	r3, #16
 8001530:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d030      	beq.n	800159e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001544:	2b80      	cmp	r3, #128	@ 0x80
 8001546:	d109      	bne.n	800155c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800155c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2200      	movs	r2, #0
 800157e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f006 f914 	bl	80077b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001598:	461a      	mov	r2, r3
 800159a:	2302      	movs	r3, #2
 800159c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015b4:	461a      	mov	r2, r3
 80015b6:	2320      	movs	r3, #32
 80015b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015d0:	461a      	mov	r2, r3
 80015d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e0:	085b      	lsrs	r3, r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f af62 	bne.w	80014b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fab3 	bl	8004b5c <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001600:	f040 80db 	bne.w	80017ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fad4 	bl	8004bb6 <USB_ReadDevAllInEpInterrupt>
 800160e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001614:	e0cd      	b.n	80017b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80c2 	beq.w	80017a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fafa 	bl	8004c26 <USB_ReadDevInEPInterrupt>
 8001632:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d057      	beq.n	80016ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	2201      	movs	r2, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	69f9      	ldr	r1, [r7, #28]
 800165a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800165e:	4013      	ands	r3, r2
 8001660:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800166e:	461a      	mov	r2, r3
 8001670:	2301      	movs	r3, #1
 8001672:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	799b      	ldrb	r3, [r3, #6]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d132      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3320      	adds	r3, #32
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	331c      	adds	r3, #28
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4419      	add	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4403      	add	r3, r0
 80016b0:	3320      	adds	r3, #32
 80016b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d113      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x3a2>
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3324      	adds	r3, #36	@ 0x24
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d108      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016da:	461a      	mov	r2, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	f003 fb01 	bl	8004ce4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f005 ffde 	bl	80076aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001704:	461a      	mov	r2, r3
 8001706:	2308      	movs	r3, #8
 8001708:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4413      	add	r3, r2
 800171c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001720:	461a      	mov	r2, r3
 8001722:	2310      	movs	r3, #16
 8001724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800173c:	461a      	mov	r2, r3
 800173e:	2340      	movs	r3, #64	@ 0x40
 8001740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d023      	beq.n	8001794 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800174c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800174e:	6a38      	ldr	r0, [r7, #32]
 8001750:	f002 fae8 	bl	8003d24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	3310      	adds	r3, #16
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	3304      	adds	r3, #4
 8001766:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	78db      	ldrb	r3, [r3, #3]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2200      	movs	r2, #0
 8001774:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f006 f82b 	bl	80077d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800178e:	461a      	mov	r2, r3
 8001790:	2302      	movs	r3, #2
 8001792:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800179e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fcbd 	bl	8002120 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	3301      	adds	r3, #1
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f47f af2e 	bne.w	8001616 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f9cc 	bl	8004b5c <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017ce:	d122      	bne.n	8001816 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d108      	bne.n	8001800 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fea3 	bl	8002544 <HAL_PCDEx_LPM_Callback>
 80017fe:	e002      	b.n	8001806 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f005 ffc9 	bl	8007798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f003 f99e 	bl	8004b5c <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800182a:	d112      	bne.n	8001852 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f005 ff85 	bl	800774c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001850:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f980 	bl	8004b5c <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001866:	f040 80b7 	bne.w	80019d8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2110      	movs	r1, #16
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fa4d 	bl	8003d24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800188e:	e046      	b.n	800191e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001892:	015a      	lsls	r2, r3, #5
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4413      	add	r3, r2
 8001898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800189c:	461a      	mov	r2, r3
 800189e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b4:	0151      	lsls	r1, r2, #5
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	440a      	add	r2, r1
 80018ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018d0:	461a      	mov	r2, r3
 80018d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e8:	0151      	lsls	r1, r2, #5
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	440a      	add	r2, r1
 80018ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001908:	0151      	lsls	r1, r2, #5
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	440a      	add	r2, r1
 800190e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001912:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001916:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	3301      	adds	r3, #1
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	461a      	mov	r2, r3
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	4293      	cmp	r3, r2
 8001928:	d3b2      	bcc.n	8001890 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001938:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800193c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7bdb      	ldrb	r3, [r3, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800194c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001956:	f043 030b 	orr.w	r3, r3, #11
 800195a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800196c:	f043 030b 	orr.w	r3, r3, #11
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	e015      	b.n	80019a0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001982:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001986:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800198a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800199a:	f043 030b 	orr.w	r3, r3, #11
 800199e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019c2:	461a      	mov	r2, r3
 80019c4:	f003 f98e 	bl	8004ce4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 f8bd 	bl	8004b5c <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ec:	d123      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 f953 	bl	8004c9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fa0a 	bl	8003e16 <USB_GetDevSpeed>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	f001 fa15 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8001a12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f001 ff0e 	bl	800383c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f005 fe6a 	bl	80076fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 f88e 	bl	8004b5c <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d10a      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f005 fe47 	bl	80076de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f002 0208 	and.w	r2, r2, #8
 8001a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 f879 	bl	8004b5c <USB_ReadInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a70:	2b80      	cmp	r3, #128	@ 0x80
 8001a72:	d123      	bne.n	8001abc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a80:	2301      	movs	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	e014      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fb0a 	bl	80020be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d3e4      	bcc.n	8001a86 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 f84b 	bl	8004b5c <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ad0:	d13c      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad6:	e02b      	b.n	8001b30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	3318      	adds	r3, #24
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d115      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001afe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da12      	bge.n	8001b2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3317      	adds	r3, #23
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 faca 	bl	80020be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	461a      	mov	r2, r3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d3cd      	bcc.n	8001ad8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 f803 	bl	8004b5c <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b60:	d156      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b62:	2301      	movs	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b66:	e045      	b.n	8001bf4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d12e      	bne.n	8001bee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da2b      	bge.n	8001bee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ba2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d121      	bne.n	8001bee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bea:	6053      	str	r3, [r2, #4]
            break;
 8001bec:	e008      	b.n	8001c00 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	791b      	ldrb	r3, [r3, #4]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d3b3      	bcc.n	8001b68 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 ffa1 	bl	8004b5c <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c24:	d10a      	bne.n	8001c3c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f005 fde8 	bl	80077fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 ff8b 	bl	8004b5c <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d115      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f005 fdd8 	bl	8007818 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	e000      	b.n	8001c7c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c7a:	bf00      	nop
    }
  }
}
 8001c7c:	3734      	adds	r7, #52	@ 0x34
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}

08001c82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_PCD_SetAddress+0x1a>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e012      	b.n	8001cc2 <HAL_PCD_SetAddress+0x40>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 feea 	bl	8004a8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	70fb      	strb	r3, [r7, #3]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	803b      	strh	r3, [r7, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da0f      	bge.n	8001d10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3310      	adds	r3, #16
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	705a      	strb	r2, [r3, #1]
 8001d0e:	e00f      	b.n	8001d30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	78ba      	ldrb	r2, [r7, #2]
 8001d4a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d5e:	78bb      	ldrb	r3, [r7, #2]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d102      	bne.n	8001d6a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_EP_Open+0xae>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e00e      	b.n	8001d96 <HAL_PCD_EP_Open+0xcc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 f86a 	bl	8003e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d94:	7afb      	ldrb	r3, [r7, #11]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0f      	bge.n	8001dd2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 020f 	and.w	r2, r3, #15
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	3310      	adds	r3, #16
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	705a      	strb	r2, [r3, #1]
 8001dd0:	e00f      	b.n	8001df2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_PCD_EP_Close+0x6e>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e00e      	b.n	8001e2a <HAL_PCD_EP_Close+0x8c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 f8a8 	bl	8003f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2200      	movs	r2, #0
 8001e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	799b      	ldrb	r3, [r3, #6]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	799b      	ldrb	r3, [r3, #6]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	f002 f945 	bl	8004128 <USB_EPStartXfer>

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	f003 020f 	and.w	r2, r3, #15
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	799b      	ldrb	r3, [r3, #6]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	799b      	ldrb	r3, [r3, #6]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	6979      	ldr	r1, [r7, #20]
 8001f3e:	f002 f8f3 	bl	8004128 <USB_EPStartXfer>

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	7912      	ldrb	r2, [r2, #4]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e04f      	b.n	800200a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da0f      	bge.n	8001f92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3310      	adds	r3, #16
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	705a      	strb	r2, [r3, #1]
 8001f90:	e00d      	b.n	8001fae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_PCD_EP_SetStall+0x82>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e01d      	b.n	800200a <HAL_PCD_EP_SetStall+0xbe>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fc81 	bl	80048e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7999      	ldrb	r1, [r3, #6]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f002 fe72 	bl	8004ce4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	7912      	ldrb	r2, [r2, #4]
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e042      	b.n	80020b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3310      	adds	r3, #16
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00f      	b.n	8002078 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_PCD_EP_ClrStall+0x86>
 8002094:	2302      	movs	r3, #2
 8002096:	e00e      	b.n	80020b6 <HAL_PCD_EP_ClrStall+0xa4>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fc8a 	bl	80049c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da0c      	bge.n	80020ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 020f 	and.w	r2, r3, #15
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	3310      	adds	r3, #16
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e00c      	b.n	8002106 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	4618      	mov	r0, r3
 800210e:	f002 faa9 	bl	8004664 <USB_EPStopXfer>
 8002112:	4603      	mov	r3, r0
 8002114:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002116:	7afb      	ldrb	r3, [r7, #11]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	3310      	adds	r3, #16
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	3304      	adds	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d901      	bls.n	8002158 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e06b      	b.n	8002230 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	429a      	cmp	r2, r3
 800216c:	d902      	bls.n	8002174 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3303      	adds	r3, #3
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217c:	e02a      	b.n	80021d4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	d902      	bls.n	800219a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3303      	adds	r3, #3
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4603      	mov	r3, r0
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f002 fafe 	bl	80047b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	441a      	add	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	441a      	add	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d809      	bhi.n	80021fe <PCD_WriteEmptyTxFifo+0xde>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d203      	bcs.n	80021fe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1bf      	bne.n	800217e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d811      	bhi.n	800222e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2201      	movs	r2, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800221e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	43db      	mvns	r3, r3
 8002224:	6939      	ldr	r1, [r7, #16]
 8002226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800222a:	4013      	ands	r3, r2
 800222c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	333c      	adds	r3, #60	@ 0x3c
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	799b      	ldrb	r3, [r3, #6]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d17b      	bne.n	8002366 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4a61      	ldr	r2, [pc, #388]	@ (8002400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f240 80b9 	bls.w	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80b3 	beq.w	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022a0:	6093      	str	r3, [r2, #8]
 80022a2:	e0a7      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	2320      	movs	r3, #32
 80022be:	6093      	str	r3, [r2, #8]
 80022c0:	e098      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 8093 	bne.w	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d90f      	bls.n	80022f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022f2:	6093      	str	r3, [r2, #8]
 80022f4:	e07e      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	0159      	lsls	r1, r3, #5
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	440b      	add	r3, r1
 8002318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d114      	bne.n	8002358 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002340:	461a      	mov	r2, r3
 8002342:	2101      	movs	r1, #1
 8002344:	f002 fcce 	bl	8004ce4 <USB_EP0_OutStart>
 8002348:	e006      	b.n	8002358 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	441a      	add	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f005 f988 	bl	8007674 <HAL_PCD_DataOutStageCallback>
 8002364:	e046      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	4a26      	ldr	r2, [pc, #152]	@ (8002404 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d124      	bne.n	80023b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	4413      	add	r3, r2
 8002380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002384:	461a      	mov	r2, r3
 8002386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	e032      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	2320      	movs	r3, #32
 80023a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f005 f95f 	bl	8007674 <HAL_PCD_DataOutStageCallback>
 80023b6:	e01d      	b.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d114      	bne.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023e0:	461a      	mov	r2, r3
 80023e2:	2100      	movs	r1, #0
 80023e4:	f002 fc7e 	bl	8004ce4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 f940 	bl	8007674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	4f54300a 	.word	0x4f54300a
 8002404:	4f54310a 	.word	0x4f54310a

08002408 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	333c      	adds	r3, #60	@ 0x3c
 8002420:	3304      	adds	r3, #4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <PCD_EP_OutSetupPacket_int+0x88>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d90e      	bls.n	800245c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800245a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f005 f8f7 	bl	8007650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <PCD_EP_OutSetupPacket_int+0x88>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d90c      	bls.n	8002484 <PCD_EP_OutSetupPacket_int+0x7c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	799b      	ldrb	r3, [r3, #6]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d108      	bne.n	8002484 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800247c:	461a      	mov	r2, r3
 800247e:	2101      	movs	r1, #1
 8002480:	f002 fc30 	bl	8004ce4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	4f54300a 	.word	0x4f54300a

08002494 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
 80024a0:	4613      	mov	r3, r2
 80024a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024b2:	883b      	ldrh	r3, [r7, #0]
 80024b4:	0419      	lsls	r1, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	430a      	orrs	r2, r1
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c0:	e028      	b.n	8002514 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4413      	add	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e00d      	b.n	80024f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	3340      	adds	r3, #64	@ 0x40
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	3301      	adds	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3ec      	bcc.n	80024d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024fc:	883b      	ldrh	r3, [r7, #0]
 80024fe:	0418      	lsls	r0, r3, #16
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	3b01      	subs	r3, #1
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	4302      	orrs	r2, r0
 800250c:	3340      	adds	r3, #64	@ 0x40
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e267      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d075      	beq.n	8002666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257a:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b85      	ldr	r3, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800258e:	2b08      	cmp	r3, #8
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b82      	ldr	r3, [pc, #520]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e242      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x74>
 80025c2:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a75      	ldr	r2, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6f      	ldr	r2, [pc, #444]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025f4:	4b69      	ldr	r3, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a68      	ldr	r2, [pc, #416]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b66      	ldr	r3, [pc, #408]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fa72 	bl	8000afc <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fa6e 	bl	8000afc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e207      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xc0>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fa5e 	bl	8000afc <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fa5a 	bl	8000afc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1f3      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b51      	ldr	r3, [pc, #324]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0xe8>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002672:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b44      	ldr	r3, [pc, #272]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4937      	ldr	r1, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e03a      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fa13 	bl	8000afc <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026da:	f7fe fa0f 	bl	8000afc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1a8      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4925      	ldr	r1, [pc, #148]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe f9f2 	bl	8000afc <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7fe f9ee 	bl	8000afc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e187      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe f9d2 	bl	8000afc <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe f9ce 	bl	8000afc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e167      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x200>
 800277a:	e01b      	b.n	80027b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe f9bb 	bl	8000afc <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	e00e      	b.n	80027a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278a:	f7fe f9b7 	bl	8000afc <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d907      	bls.n	80027a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e150      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470000 	.word	0x42470000
 80027a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ea      	bne.n	800278a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8097 	beq.w	80028f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b7d      	ldr	r3, [pc, #500]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b7a      	ldr	r3, [pc, #488]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b77      	ldr	r3, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b74      	ldr	r3, [pc, #464]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a73      	ldr	r2, [pc, #460]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7fe f977 	bl	8000afc <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7fe f973 	bl	8000afc <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e10c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ea>
 8002838:	4b64      	ldr	r3, [pc, #400]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a63      	ldr	r2, [pc, #396]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x30c>
 800284e:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	4a5e      	ldr	r2, [pc, #376]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6713      	str	r3, [r2, #112]	@ 0x70
 800285a:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a5b      	ldr	r2, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002868:	4b58      	ldr	r3, [pc, #352]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a54      	ldr	r2, [pc, #336]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe f938 	bl	8000afc <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe f934 	bl	8000afc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0cb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ee      	beq.n	8002890 <HAL_RCC_OscConfig+0x334>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe f922 	bl	8000afc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe f91e 	bl	8000afc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0b5      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	4b3e      	ldr	r3, [pc, #248]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ee      	bne.n	80028bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a38      	ldr	r2, [pc, #224]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a1 	beq.w	8002a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d05c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d141      	bne.n	8002992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe f8f2 	bl	8000afc <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe f8ee 	bl	8000afc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e087      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	491b      	ldr	r1, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe f8c7 	bl	8000afc <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe f8c3 	bl	8000afc <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e05c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x416>
 8002990:	e054      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe f8b0 	bl	8000afc <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe f8ac 	bl	8000afc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e038      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4ec>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cc      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e067      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4934      	ldr	r1, [pc, #208]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fd ffde 	bl	8000afc <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fd ffda 	bl	8000afc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f82d 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd ff3e 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08007ca4 	.word	0x08007ca4
 8002c10:	20000030 	.word	0x20000030
 8002c14:	20000034 	.word	0x20000034

08002c18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_RCC_EnableCSS+0x14>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	4247004c 	.word	0x4247004c

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b094      	sub	sp, #80	@ 0x50
 8002c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c48:	4b79      	ldr	r3, [pc, #484]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x40>
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	f200 80e1 	bhi.w	8002e1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c62:	e0db      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c68:	e0db      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6a:	4b73      	ldr	r3, [pc, #460]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c6e:	e0d8      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c70:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	462b      	mov	r3, r5
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0159      	lsls	r1, r3, #5
 8002cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb4:	0150      	lsls	r0, r2, #5
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4621      	mov	r1, r4
 8002cbc:	1a51      	subs	r1, r2, r1
 8002cbe:	6139      	str	r1, [r7, #16]
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	018b      	lsls	r3, r1, #6
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cde:	4651      	mov	r1, sl
 8002ce0:	018a      	lsls	r2, r1, #6
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ce8:	4659      	mov	r1, fp
 8002cea:	eb63 0901 	sbc.w	r9, r3, r1
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d02:	4690      	mov	r8, r2
 8002d04:	4699      	mov	r9, r3
 8002d06:	4623      	mov	r3, r4
 8002d08:	eb18 0303 	adds.w	r3, r8, r3
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	462b      	mov	r3, r5
 8002d10:	eb49 0303 	adc.w	r3, r9, r3
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d22:	4629      	mov	r1, r5
 8002d24:	024b      	lsls	r3, r1, #9
 8002d26:	4621      	mov	r1, r4
 8002d28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	024a      	lsls	r2, r1, #9
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d36:	2200      	movs	r2, #0
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d40:	f7fd fa42 	bl	80001c8 <__aeabi_uldivmod>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d4c:	e058      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4e:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	2200      	movs	r2, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	4611      	mov	r1, r2
 8002d5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d68:	4642      	mov	r2, r8
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	f04f 0000 	mov.w	r0, #0
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	0159      	lsls	r1, r3, #5
 8002d76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7a:	0150      	lsls	r0, r2, #5
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4641      	mov	r1, r8
 8002d82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d86:	4649      	mov	r1, r9
 8002d88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002da0:	ebb2 040a 	subs.w	r4, r2, sl
 8002da4:	eb63 050b 	sbc.w	r5, r3, fp
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	00eb      	lsls	r3, r5, #3
 8002db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db6:	00e2      	lsls	r2, r4, #3
 8002db8:	4614      	mov	r4, r2
 8002dba:	461d      	mov	r5, r3
 8002dbc:	4643      	mov	r3, r8
 8002dbe:	18e3      	adds	r3, r4, r3
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	eb45 0303 	adc.w	r3, r5, r3
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	028b      	lsls	r3, r1, #10
 8002dda:	4621      	mov	r1, r4
 8002ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002de0:	4621      	mov	r1, r4
 8002de2:	028a      	lsls	r2, r1, #10
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dea:	2200      	movs	r2, #0
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	61fa      	str	r2, [r7, #28]
 8002df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df4:	f7fd f9e8 	bl	80001c8 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1a:	e002      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3750      	adds	r7, #80	@ 0x50
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	007a1200 	.word	0x007a1200

08002e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e40:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000030 	.word	0x20000030

08002e54 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e60:	2b80      	cmp	r3, #128	@ 0x80
 8002e62:	d104      	bne.n	8002e6e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002e64:	f000 f80a 	bl	8002e7c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	701a      	strb	r2, [r3, #0]
  }
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	4002380e 	.word	0x4002380e

08002e7c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e041      	b.n	8002f20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fd fc79 	bl	80007a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 fa7d 	bl	80033c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d001      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e04e      	b.n	8002fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_TIM_Base_Start_IT+0xc4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d022      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6a:	d01d      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d018      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d013      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x80>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d111      	bne.n	8002fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d010      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	e007      	b.n	8002fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40010400 	.word	0x40010400
 8003000:	40014000 	.word	0x40014000
 8003004:	40001800 	.word	0x40001800

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0202 	mvn.w	r2, #2
 800303c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f999 	bl	800338a <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f98b 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f99c 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d020      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f973 	bl	800338a <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f965 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f976 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d020      	beq.n	8003104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0208 	mvn.w	r2, #8
 80030d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2204      	movs	r2, #4
 80030da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f94d 	bl	800338a <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f93f 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f950 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0210 	mvn.w	r2, #16
 8003120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2208      	movs	r2, #8
 8003126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f927 	bl	800338a <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f919 	bl	8003376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f92a 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0201 	mvn.w	r2, #1
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd f9da 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fae4 	bl	8003760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8fb 	bl	80033b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0220 	mvn.w	r2, #32
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fab6 	bl	800374c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e0b4      	b.n	800336e <HAL_TIM_ConfigClockSource+0x186>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800322a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323c:	d03e      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0xd4>
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003242:	f200 8087 	bhi.w	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324a:	f000 8086 	beq.w	800335a <HAL_TIM_ConfigClockSource+0x172>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d87f      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b70      	cmp	r3, #112	@ 0x70
 8003256:	d01a      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xa6>
 8003258:	2b70      	cmp	r3, #112	@ 0x70
 800325a:	d87b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b60      	cmp	r3, #96	@ 0x60
 800325e:	d050      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x11a>
 8003260:	2b60      	cmp	r3, #96	@ 0x60
 8003262:	d877      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b50      	cmp	r3, #80	@ 0x50
 8003266:	d03c      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003268:	2b50      	cmp	r3, #80	@ 0x50
 800326a:	d873      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b40      	cmp	r3, #64	@ 0x40
 800326e:	d058      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x13a>
 8003270:	2b40      	cmp	r3, #64	@ 0x40
 8003272:	d86f      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b30      	cmp	r3, #48	@ 0x30
 8003276:	d064      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b30      	cmp	r3, #48	@ 0x30
 800327a:	d86b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d060      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d867      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d05c      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b10      	cmp	r3, #16
 800328a:	d05a      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	e062      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800329e:	f000 f9b9 	bl	8003614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	609a      	str	r2, [r3, #8]
      break;
 80032ba:	e04f      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	f000 f9a2 	bl	8003614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032de:	609a      	str	r2, [r3, #8]
      break;
 80032e0:	e03c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 f916 	bl	8003520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2150      	movs	r1, #80	@ 0x50
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f96f 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003300:	e02c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	461a      	mov	r2, r3
 8003310:	f000 f935 	bl	800357e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2160      	movs	r1, #96	@ 0x60
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f95f 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003320:	e01c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	461a      	mov	r2, r3
 8003330:	f000 f8f6 	bl	8003520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2140      	movs	r1, #64	@ 0x40
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f94f 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003340:	e00c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f000 f946 	bl	80035de <TIM_ITRx_SetConfig>
      break;
 8003352:	e003      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e000      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a46      	ldr	r2, [pc, #280]	@ (80034f4 <TIM_Base_SetConfig+0x12c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d00f      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a43      	ldr	r2, [pc, #268]	@ (80034f8 <TIM_Base_SetConfig+0x130>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a42      	ldr	r2, [pc, #264]	@ (80034fc <TIM_Base_SetConfig+0x134>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a41      	ldr	r2, [pc, #260]	@ (8003500 <TIM_Base_SetConfig+0x138>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a40      	ldr	r2, [pc, #256]	@ (8003504 <TIM_Base_SetConfig+0x13c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a35      	ldr	r2, [pc, #212]	@ (80034f4 <TIM_Base_SetConfig+0x12c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003428:	d027      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a32      	ldr	r2, [pc, #200]	@ (80034f8 <TIM_Base_SetConfig+0x130>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d023      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <TIM_Base_SetConfig+0x134>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <TIM_Base_SetConfig+0x138>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2f      	ldr	r2, [pc, #188]	@ (8003504 <TIM_Base_SetConfig+0x13c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d017      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2e      	ldr	r2, [pc, #184]	@ (8003508 <TIM_Base_SetConfig+0x140>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2d      	ldr	r2, [pc, #180]	@ (800350c <TIM_Base_SetConfig+0x144>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <TIM_Base_SetConfig+0x148>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	@ (8003514 <TIM_Base_SetConfig+0x14c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2a      	ldr	r2, [pc, #168]	@ (8003518 <TIM_Base_SetConfig+0x150>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a29      	ldr	r2, [pc, #164]	@ (800351c <TIM_Base_SetConfig+0x154>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <TIM_Base_SetConfig+0x12c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <TIM_Base_SetConfig+0x13c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f023 0201 	bic.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  }
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40000c00 	.word	0x40000c00
 8003504:	40010400 	.word	0x40010400
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800
 8003514:	40001800 	.word	0x40001800
 8003518:	40001c00 	.word	0x40001c00
 800351c:	40002000 	.word	0x40002000

08003520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0201 	bic.w	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800354a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f023 030a 	bic.w	r3, r3, #10
 800355c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b087      	sub	sp, #28
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 0210 	bic.w	r2, r3, #16
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f043 0307 	orr.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800362e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	021a      	lsls	r2, r3, #8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	431a      	orrs	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e05a      	b.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a21      	ldr	r2, [pc, #132]	@ (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d01d      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1d      	ldr	r2, [pc, #116]	@ (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	@ (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10c      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	4313      	orrs	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40001800 	.word	0x40001800

0800374c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003774:	b084      	sub	sp, #16
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	f107 001c 	add.w	r0, r7, #28
 8003782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003786:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800378a:	2b01      	cmp	r3, #1
 800378c:	d123      	bne.n	80037d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003792:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80037a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 fae8 	bl	8004da0 <USB_CoreReset>
 80037d0:	4603      	mov	r3, r0
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e01b      	b.n	800380e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 fadc 	bl	8004da0 <USB_CoreReset>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8003800:	e005      	b.n	800380e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800380e:	7fbb      	ldrb	r3, [r7, #30]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10b      	bne.n	800382c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f043 0206 	orr.w	r2, r3, #6
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr

0800383c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d165      	bne.n	800391c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a41      	ldr	r2, [pc, #260]	@ (8003958 <USB_SetTurnaroundTime+0x11c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d906      	bls.n	8003866 <USB_SetTurnaroundTime+0x2a>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4a40      	ldr	r2, [pc, #256]	@ (800395c <USB_SetTurnaroundTime+0x120>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d202      	bcs.n	8003866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003860:	230f      	movs	r3, #15
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e062      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4a3c      	ldr	r2, [pc, #240]	@ (800395c <USB_SetTurnaroundTime+0x120>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d306      	bcc.n	800387c <USB_SetTurnaroundTime+0x40>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4a3b      	ldr	r2, [pc, #236]	@ (8003960 <USB_SetTurnaroundTime+0x124>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d202      	bcs.n	800387c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003876:	230e      	movs	r3, #14
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e057      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4a38      	ldr	r2, [pc, #224]	@ (8003960 <USB_SetTurnaroundTime+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d306      	bcc.n	8003892 <USB_SetTurnaroundTime+0x56>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4a37      	ldr	r2, [pc, #220]	@ (8003964 <USB_SetTurnaroundTime+0x128>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d202      	bcs.n	8003892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800388c:	230d      	movs	r3, #13
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	e04c      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4a33      	ldr	r2, [pc, #204]	@ (8003964 <USB_SetTurnaroundTime+0x128>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d306      	bcc.n	80038a8 <USB_SetTurnaroundTime+0x6c>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4a32      	ldr	r2, [pc, #200]	@ (8003968 <USB_SetTurnaroundTime+0x12c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d802      	bhi.n	80038a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038a2:	230c      	movs	r3, #12
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e041      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003968 <USB_SetTurnaroundTime+0x12c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d906      	bls.n	80038be <USB_SetTurnaroundTime+0x82>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4a2e      	ldr	r2, [pc, #184]	@ (800396c <USB_SetTurnaroundTime+0x130>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d802      	bhi.n	80038be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038b8:	230b      	movs	r3, #11
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e036      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a2a      	ldr	r2, [pc, #168]	@ (800396c <USB_SetTurnaroundTime+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d906      	bls.n	80038d4 <USB_SetTurnaroundTime+0x98>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a29      	ldr	r2, [pc, #164]	@ (8003970 <USB_SetTurnaroundTime+0x134>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d802      	bhi.n	80038d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038ce:	230a      	movs	r3, #10
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e02b      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a26      	ldr	r2, [pc, #152]	@ (8003970 <USB_SetTurnaroundTime+0x134>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d906      	bls.n	80038ea <USB_SetTurnaroundTime+0xae>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4a25      	ldr	r2, [pc, #148]	@ (8003974 <USB_SetTurnaroundTime+0x138>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d202      	bcs.n	80038ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038e4:	2309      	movs	r3, #9
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e020      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a21      	ldr	r2, [pc, #132]	@ (8003974 <USB_SetTurnaroundTime+0x138>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d306      	bcc.n	8003900 <USB_SetTurnaroundTime+0xc4>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4a20      	ldr	r2, [pc, #128]	@ (8003978 <USB_SetTurnaroundTime+0x13c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d802      	bhi.n	8003900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038fa:	2308      	movs	r3, #8
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e015      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <USB_SetTurnaroundTime+0x13c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d906      	bls.n	8003916 <USB_SetTurnaroundTime+0xda>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <USB_SetTurnaroundTime+0x140>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d202      	bcs.n	8003916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003910:	2307      	movs	r3, #7
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e00a      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003916:	2306      	movs	r3, #6
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e007      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003922:	2309      	movs	r3, #9
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e001      	b.n	800392c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003928:	2309      	movs	r3, #9
 800392a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	00d8acbf 	.word	0x00d8acbf
 800395c:	00e4e1c0 	.word	0x00e4e1c0
 8003960:	00f42400 	.word	0x00f42400
 8003964:	01067380 	.word	0x01067380
 8003968:	011a499f 	.word	0x011a499f
 800396c:	01312cff 	.word	0x01312cff
 8003970:	014ca43f 	.word	0x014ca43f
 8003974:	016e3600 	.word	0x016e3600
 8003978:	01a6ab1f 	.word	0x01a6ab1f
 800397c:	01e84800 	.word	0x01e84800

08003980 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d115      	bne.n	8003a12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039f2:	200a      	movs	r0, #10
 80039f4:	f7fd f88e 	bl	8000b14 <HAL_Delay>
      ms += 10U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	330a      	adds	r3, #10
 80039fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f001 f93f 	bl	8004c82 <USB_GetMode>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d01e      	beq.n	8003a48 <USB_SetCurrentMode+0x84>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a0e:	d9f0      	bls.n	80039f2 <USB_SetCurrentMode+0x2e>
 8003a10:	e01a      	b.n	8003a48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d115      	bne.n	8003a44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a24:	200a      	movs	r0, #10
 8003a26:	f7fd f875 	bl	8000b14 <HAL_Delay>
      ms += 10U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	330a      	adds	r3, #10
 8003a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f001 f926 	bl	8004c82 <USB_GetMode>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <USB_SetCurrentMode+0x84>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a40:	d9f0      	bls.n	8003a24 <USB_SetCurrentMode+0x60>
 8003a42:	e001      	b.n	8003a48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e005      	b.n	8003a54 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a4c:	d101      	bne.n	8003a52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	e009      	b.n	8003a90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3340      	adds	r3, #64	@ 0x40
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b0e      	cmp	r3, #14
 8003a94:	d9f2      	bls.n	8003a7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11c      	bne.n	8003ad8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ace:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ad6:	e00b      	b.n	8003af0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003af6:	461a      	mov	r2, r3
 8003af8:	2300      	movs	r3, #0
 8003afa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003afc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10d      	bne.n	8003b20 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d104      	bne.n	8003b16 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f968 	bl	8003de4 <USB_SetDevSpeed>
 8003b14:	e008      	b.n	8003b28 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b16:	2101      	movs	r1, #1
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f963 	bl	8003de4 <USB_SetDevSpeed>
 8003b1e:	e003      	b.n	8003b28 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b20:	2103      	movs	r1, #3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f95e 	bl	8003de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b28:	2110      	movs	r1, #16
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8fa 	bl	8003d24 <USB_FlushTxFifo>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f924 	bl	8003d88 <USB_FlushRxFifo>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e043      	b.n	8003bfc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b8a:	d118      	bne.n	8003bbe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e013      	b.n	8003bd0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	e008      	b.n	8003bd0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2300      	movs	r3, #0
 8003be0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c00:	461a      	mov	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d3b5      	bcc.n	8003b74 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e043      	b.n	8003c96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c24:	d118      	bne.n	8003c58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e013      	b.n	8003c6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e008      	b.n	8003c6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	3301      	adds	r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d3b5      	bcc.n	8003c0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <USB_DevInit+0x2c4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ce4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f043 0208 	orr.w	r2, r3, #8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d1c:	b004      	add	sp, #16
 8003d1e:	4770      	bx	lr
 8003d20:	803c3800 	.word	0x803c3800

08003d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d3e:	d901      	bls.n	8003d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e01b      	b.n	8003d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	daf2      	bge.n	8003d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	019b      	lsls	r3, r3, #6
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d68:	d901      	bls.n	8003d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e006      	b.n	8003d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d0f0      	beq.n	8003d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da0:	d901      	bls.n	8003da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e018      	b.n	8003dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	daf2      	bge.n	8003d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2210      	movs	r2, #16
 8003db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dc4:	d901      	bls.n	8003dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e006      	b.n	8003dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d0f0      	beq.n	8003db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	68f9      	ldr	r1, [r7, #12]
 8003e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0306 	and.w	r3, r3, #6
 8003e2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
 8003e3a:	e00a      	b.n	8003e52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d002      	beq.n	8003e48 <USB_GetDevSpeed+0x32>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b06      	cmp	r3, #6
 8003e46:	d102      	bne.n	8003e4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	75fb      	strb	r3, [r7, #23]
 8003e4c:	e001      	b.n	8003e52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d13a      	bne.n	8003ef2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d155      	bne.n	8003f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	791b      	ldrb	r3, [r3, #4]
 8003ece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	059b      	lsls	r3, r3, #22
 8003ed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e036      	b.n	8003f60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11a      	bne.n	8003f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	791b      	ldrb	r3, [r3, #4]
 8003f44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f46:	430b      	orrs	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d161      	bne.n	8004050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fa2:	d11f      	bne.n	8003fe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	0151      	lsls	r1, r2, #5
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	440a      	add	r2, r1
 8003fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004004:	4013      	ands	r3, r2
 8004006:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	b29b      	uxth	r3, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004028:	4013      	ands	r3, r2
 800402a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0159      	lsls	r1, r3, #5
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	440b      	add	r3, r1
 8004042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004046:	4619      	mov	r1, r3
 8004048:	4b35      	ldr	r3, [pc, #212]	@ (8004120 <USB_DeactivateEndpoint+0x1b0>)
 800404a:	4013      	ands	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
 800404e:	e060      	b.n	8004112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004066:	d11f      	bne.n	80040a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004082:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	2101      	movs	r1, #1
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	43db      	mvns	r3, r3
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040c8:	4013      	ands	r3, r2
 80040ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	43db      	mvns	r3, r3
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040ec:	4013      	ands	r3, r2
 80040ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0159      	lsls	r1, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	440b      	add	r3, r1
 8004106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410a:	4619      	mov	r1, r3
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <USB_DeactivateEndpoint+0x1b4>)
 800410e:	4013      	ands	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	ec337800 	.word	0xec337800
 8004124:	eff37800 	.word	0xeff37800

08004128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	@ 0x28
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	4613      	mov	r3, r2
 8004134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	785b      	ldrb	r3, [r3, #1]
 8004144:	2b01      	cmp	r3, #1
 8004146:	f040 817f 	bne.w	8004448 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d132      	bne.n	80041b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800416c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004170:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b0:	0cdb      	lsrs	r3, r3, #19
 80041b2:	04db      	lsls	r3, r3, #19
 80041b4:	6113      	str	r3, [r2, #16]
 80041b6:	e097      	b.n	80042e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d2:	0cdb      	lsrs	r3, r3, #19
 80041d4:	04db      	lsls	r3, r3, #19
 80041d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11a      	bne.n	8004238 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	d903      	bls.n	8004216 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004230:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004234:	6113      	str	r3, [r2, #16]
 8004236:	e044      	b.n	80042c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4413      	add	r3, r2
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	04d9      	lsls	r1, r3, #19
 8004260:	4ba4      	ldr	r3, [pc, #656]	@ (80044f4 <USB_EPStartXfer+0x3cc>)
 8004262:	400b      	ands	r3, r1
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	0148      	lsls	r0, r1, #5
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	4401      	add	r1, r0
 800426c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004270:	4313      	orrs	r3, r2
 8004272:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d122      	bne.n	80042c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004296:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800429a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	8afb      	ldrh	r3, [r7, #22]
 80042ac:	075b      	lsls	r3, r3, #29
 80042ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80042b2:	69b9      	ldr	r1, [r7, #24]
 80042b4:	0148      	lsls	r0, r1, #5
 80042b6:	69f9      	ldr	r1, [r7, #28]
 80042b8:	4401      	add	r1, r0
 80042ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	0148      	lsls	r0, r1, #5
 80042dc:	69f9      	ldr	r1, [r7, #28]
 80042de:	4401      	add	r1, r0
 80042e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d14b      	bne.n	8004386 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004302:	461a      	mov	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d128      	bne.n	8004364 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d110      	bne.n	8004344 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800433c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e00f      	b.n	8004364 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004362:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800437e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e166      	b.n	8004654 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d015      	beq.n	80043da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 814e 	beq.w	8004654 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043d4:	4313      	orrs	r3, r2
 80043d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80043d8:	e13c      	b.n	8004654 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d110      	bne.n	800440c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004404:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e00f      	b.n	800442c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	440a      	add	r2, r1
 8004422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68d9      	ldr	r1, [r3, #12]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781a      	ldrb	r2, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	b298      	uxth	r0, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4603      	mov	r3, r0
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f9b9 	bl	80047b8 <USB_WritePacket>
 8004446:	e105      	b.n	8004654 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004462:	0cdb      	lsrs	r3, r3, #19
 8004464:	04db      	lsls	r3, r3, #19
 8004466:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	0151      	lsls	r1, r2, #5
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	440a      	add	r2, r1
 800447e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004482:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004486:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800448a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d132      	bne.n	80044f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c0:	69b9      	ldr	r1, [r7, #24]
 80044c2:	0148      	lsls	r0, r1, #5
 80044c4:	69f9      	ldr	r1, [r7, #28]
 80044c6:	4401      	add	r1, r0
 80044c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044cc:	4313      	orrs	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044ee:	6113      	str	r3, [r2, #16]
 80044f0:	e062      	b.n	80045b8 <USB_EPStartXfer+0x490>
 80044f2:	bf00      	nop
 80044f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d123      	bne.n	8004548 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004516:	69b9      	ldr	r1, [r7, #24]
 8004518:	0148      	lsls	r0, r1, #5
 800451a:	69f9      	ldr	r1, [r7, #28]
 800451c:	4401      	add	r1, r0
 800451e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004522:	4313      	orrs	r3, r2
 8004524:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004544:	6113      	str	r3, [r2, #16]
 8004546:	e037      	b.n	80045b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4413      	add	r3, r2
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	8afa      	ldrh	r2, [r7, #22]
 8004564:	fb03 f202 	mul.w	r2, r3, r2
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	8afb      	ldrh	r3, [r7, #22]
 800457c:	04d9      	lsls	r1, r3, #19
 800457e:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <USB_EPStartXfer+0x538>)
 8004580:	400b      	ands	r3, r1
 8004582:	69b9      	ldr	r1, [r7, #24]
 8004584:	0148      	lsls	r0, r1, #5
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	4401      	add	r1, r0
 800458a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800458e:	4313      	orrs	r3, r2
 8004590:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	0148      	lsls	r0, r1, #5
 80045ac:	69f9      	ldr	r1, [r7, #28]
 80045ae:	4401      	add	r1, r0
 80045b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10d      	bne.n	80045da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68d9      	ldr	r1, [r3, #12]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d6:	460a      	mov	r2, r1
 80045d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	791b      	ldrb	r3, [r3, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d128      	bne.n	8004634 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d110      	bne.n	8004614 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800460c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e00f      	b.n	8004634 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	0151      	lsls	r1, r2, #5
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	440a      	add	r2, r1
 800462a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800464e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	1ff80000 	.word	0x1ff80000

08004664 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d14a      	bne.n	8004718 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800469a:	f040 8086 	bne.w	80047aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d902      	bls.n	80046fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
          break;
 80046fa:	e056      	b.n	80047aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004714:	d0e7      	beq.n	80046e6 <USB_EPStopXfer+0x82>
 8004716:	e048      	b.n	80047aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800472c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004730:	d13b      	bne.n	80047aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	7812      	ldrb	r2, [r2, #0]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	440a      	add	r2, r1
 800474c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004754:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	7812      	ldrb	r2, [r2, #0]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004778:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004786:	4293      	cmp	r3, r2
 8004788:	d902      	bls.n	8004790 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
          break;
 800478e:	e00c      	b.n	80047aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047a8:	d0e7      	beq.n	800477a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	@ 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4611      	mov	r1, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	460b      	mov	r3, r1
 80047c8:	71fb      	strb	r3, [r7, #7]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d123      	bne.n	8004826 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047de:	88bb      	ldrh	r3, [r7, #4]
 80047e0:	3303      	adds	r3, #3
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	e018      	b.n	800481e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	031a      	lsls	r2, r3, #12
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f8:	461a      	mov	r2, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3301      	adds	r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3301      	adds	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	3301      	adds	r3, #1
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	429a      	cmp	r2, r3
 8004824:	d3e2      	bcc.n	80047ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3724      	adds	r7, #36	@ 0x24
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004834:	b480      	push	{r7}
 8004836:	b08b      	sub	sp, #44	@ 0x2c
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	b29b      	uxth	r3, r3
 8004850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	e014      	b.n	800488a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	601a      	str	r2, [r3, #0]
    pDest++;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	3301      	adds	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	3301      	adds	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	3301      	adds	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	3301      	adds	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	3301      	adds	r3, #1
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	429a      	cmp	r2, r3
 8004890:	d3e6      	bcc.n	8004860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004892:	8bfb      	ldrh	r3, [r7, #30]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01e      	beq.n	80048d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048a2:	461a      	mov	r2, r3
 80048a4:	f107 0310 	add.w	r3, r7, #16
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	701a      	strb	r2, [r3, #0]
      i++;
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	3301      	adds	r3, #1
 80048c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80048ca:	8bfb      	ldrh	r3, [r7, #30]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048d0:	8bfb      	ldrh	r3, [r7, #30]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ea      	bne.n	80048ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048d8:	4618      	mov	r0, r3
 80048da:	372c      	adds	r7, #44	@ 0x2c
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	785b      	ldrb	r3, [r3, #1]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d12c      	bne.n	800495a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	db12      	blt.n	8004938 <USB_EPSetStall+0x54>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00f      	beq.n	8004938 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004932:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004936:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	440a      	add	r2, r1
 800494e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e02b      	b.n	80049b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	db12      	blt.n	8004992 <USB_EPSetStall+0xae>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00f      	beq.n	8004992 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800498c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004990:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d128      	bne.n	8004a2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	791b      	ldrb	r3, [r3, #4]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d003      	beq.n	8004a0c <USB_EPClearStall+0x4c>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	791b      	ldrb	r3, [r3, #4]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d138      	bne.n	8004a7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e027      	b.n	8004a7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	791b      	ldrb	r3, [r3, #4]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d003      	beq.n	8004a5e <USB_EPClearStall+0x9e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	791b      	ldrb	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d10f      	bne.n	8004a7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aaa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004aae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b06:	f023 0302 	bic.w	r3, r3, #2
 8004b0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004b34:	f023 0303 	bic.w	r3, r3, #3
 8004b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	0c1b      	lsrs	r3, r3, #16
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	b29b      	uxth	r3, r3
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c18:	68bb      	ldr	r3, [r7, #8]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b087      	sub	sp, #28
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4013      	ands	r3, r2
 8004c72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c74:	68bb      	ldr	r3, [r7, #8]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cbc:	f023 0307 	bic.w	r3, r3, #7
 8004cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	460b      	mov	r3, r1
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	333c      	adds	r3, #60	@ 0x3c
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4a26      	ldr	r2, [pc, #152]	@ (8004d9c <USB_EP0_OutStart+0xb8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d90a      	bls.n	8004d1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d18:	d101      	bne.n	8004d1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e037      	b.n	8004d8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d4c:	f043 0318 	orr.w	r3, r3, #24
 8004d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004d64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d66:	7afb      	ldrb	r3, [r7, #11]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d10f      	bne.n	8004d8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	4f54300a 	.word	0x4f54300a

08004da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db8:	d901      	bls.n	8004dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e01b      	b.n	8004df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	daf2      	bge.n	8004dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004de2:	d901      	bls.n	8004de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d0f0      	beq.n	8004dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <CRC16>:
 * Computes the CRC value of a certain data frame and returns it
 * @param data ptr to the data buffer
 * @param len number of bytes for the CRC to be calculated for
 * @return CRC byte value
 */
static uint16_t CRC16(uint8_t *data, uint16_t len) {
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	807b      	strh	r3, [r7, #2]
	uint16_t CRC = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	81bb      	strh	r3, [r7, #12]
 8004e16:	e00a      	b.n	8004e2e <CRC16+0x2c>
		CRC += data[x];
 8004e18:	89bb      	ldrh	r3, [r7, #12]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	89fb      	ldrh	r3, [r7, #14]
 8004e24:	4413      	add	r3, r2
 8004e26:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004e28:	89bb      	ldrh	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	81bb      	strh	r3, [r7, #12]
 8004e2e:	89ba      	ldrh	r2, [r7, #12]
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d3f0      	bcc.n	8004e18 <CRC16+0x16>
	}
	return CRC;
 8004e36:	89fb      	ldrh	r3, [r7, #14]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <SbW_Init>:

void SbW_Init(SbW_Protocol_t *S) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	S->MessageFifo.Fifo_Size = S->Fifo_Buffer_Size / S->Frame_Len;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8b9b      	ldrh	r3, [r3, #28]
 8004e50:	461a      	mov	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	799b      	ldrb	r3, [r3, #6]
 8004e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	825a      	strh	r2, [r3, #18]
	fifo_init(&S->MessageFifo);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	330c      	adds	r3, #12
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb fd48 	bl	80008fa <fifo_init>
	S->Mutex = 0; //ensures that the Mutex flag starts in the unlocked state (0)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <SbW_Request_Received_CB>:

void SbW_Request_Received_CB(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	4613      	mov	r3, r2
 8004e88:	80fb      	strh	r3, [r7, #6]
	uint8_t NoReply = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]
	uint16_t CRC_Result = CRC16(data, len - 2);
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	3b02      	subs	r3, #2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	4619      	mov	r1, r3
 8004e96:	68b8      	ldr	r0, [r7, #8]
 8004e98:	f7ff ffb3 	bl	8004e02 <CRC16>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	82bb      	strh	r3, [r7, #20]
	if (S->RemainingFrames) {
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 811d 	bne.w	80050e6 <SbW_Request_Received_CB+0x26a>
		return;
	}
	// Check the data integrity
	if (CRC_Result
			!= (((uint16_t) data[len - 1] << 8) | (uint16_t) data[len - 2])) {
 8004eac:	8aba      	ldrh	r2, [r7, #20]
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	440b      	add	r3, r1
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	88f9      	ldrh	r1, [r7, #6]
 8004ebc:	3902      	subs	r1, #2
 8004ebe:	68b8      	ldr	r0, [r7, #8]
 8004ec0:	4401      	add	r1, r0
 8004ec2:	7809      	ldrb	r1, [r1, #0]
 8004ec4:	430b      	orrs	r3, r1
	if (CRC_Result
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d003      	beq.n	8004ed2 <SbW_Request_Received_CB+0x56>
		S->HW_Interface_t.User_Callback(SbW_ERROR_CRC);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	2001      	movs	r0, #1
 8004ed0:	4798      	blx	r3
		// SbW_ERROR_CRC // Ignoring this frame
	}
	// SbW_ERROR_NoERROR
	S->R_W = data[1] >> 7;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	09db      	lsrs	r3, r3, #7
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	b2d9      	uxtb	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	7913      	ldrb	r3, [r2, #4]
 8004ee6:	f361 0300 	bfi	r3, r1, #0, #1
 8004eea:	7113      	strb	r3, [r2, #4]
	S->CMD = data[1] & 0b01111111;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	715a      	strb	r2, [r3, #5]

	switch (S->CMD) {
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	795b      	ldrb	r3, [r3, #5]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	f200 80f1 	bhi.w	80050ea <SbW_Request_Received_CB+0x26e>
 8004f08:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <SbW_Request_Received_CB+0x94>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	08004f95 	.word	0x08004f95
 8004f18:	08004fd9 	.word	0x08004fd9
 8004f1c:	08005031 	.word	0x08005031
 8004f20:	080050eb 	.word	0x080050eb
 8004f24:	08005057 	.word	0x08005057
	case 0x01: // Get or Set Sampling Frequency
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	791b      	ldrb	r3, [r3, #4]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <SbW_Request_Received_CB+0xec>
			len = 7;
 8004f3e:	2307      	movs	r3, #7
 8004f40:	80fb      	strh	r3, [r7, #6]
			data[2] = 2; // Number of Data Bytes =2
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3302      	adds	r3, #2
 8004f46:	2202      	movs	r2, #2
 8004f48:	701a      	strb	r2, [r3, #0]
			data[3] = (uint8_t) (S->SamplingFreq >> 8);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	885b      	ldrh	r3, [r3, #2]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3303      	adds	r3, #3
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) S->SamplingFreq;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	885a      	ldrh	r2, [r3, #2]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	3304      	adds	r3, #4
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004f66:	e09b      	b.n	80050a0 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004f68:	2305      	movs	r3, #5
 8004f6a:	80fb      	strh	r3, [r7, #6]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	3303      	adds	r3, #3
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	b21a      	sxth	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	805a      	strh	r2, [r3, #2]
			data[2] = 0; // Number of Data Bytes =0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
		break;
 8004f92:	e085      	b.n	80050a0 <SbW_Request_Received_CB+0x224>

	case 0x02: // Get or Set Frame Length
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	2000      	movs	r0, #0
 8004f9a:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	791b      	ldrb	r3, [r3, #4]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <SbW_Request_Received_CB+0x146>
			len = 6;
 8004faa:	2306      	movs	r3, #6
 8004fac:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // Number of Data Bytes =1
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
			data[3] = S->Frame_Len; // Get Frame_Len
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	3303      	adds	r3, #3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	7992      	ldrb	r2, [r2, #6]
 8004fbe:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->Frame_Len = data[3]; // Set Frame_Len
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004fc0:	e06e      	b.n	80050a0 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	80fb      	strh	r3, [r7, #6]
			S->Frame_Len = data[3]; // Set Frame_Len
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	78da      	ldrb	r2, [r3, #3]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	719a      	strb	r2, [r3, #6]
			data[2] = 0; // Number of Data Bytes =0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
		break;
 8004fd6:	e063      	b.n	80050a0 <SbW_Request_Received_CB+0x224>
	case 0x03: // Get or Set Stream ON
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	2000      	movs	r0, #0
 8004fde:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <SbW_Request_Received_CB+0x190>
			len = 6;
 8004fee:	2306      	movs	r3, #6
 8004ff0:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // Number of Data Bytes =1
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
			data[3] = S->Stream_ON; // Get Stream_ON
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3303      	adds	r3, #3
 8005008:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->Stream_ON = data[3]; // Set Stream_ON
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 800500a:	e049      	b.n	80050a0 <SbW_Request_Received_CB+0x224>
			len = 5;
 800500c:	2305      	movs	r3, #5
 800500e:	80fb      	strh	r3, [r7, #6]
			S->Stream_ON = data[3]; // Set Stream_ON
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	3303      	adds	r3, #3
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	b2d9      	uxtb	r1, r3
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	7813      	ldrb	r3, [r2, #0]
 8005020:	f361 0300 	bfi	r3, r1, #0, #1
 8005024:	7013      	strb	r3, [r2, #0]
			data[2] = 0; // Number of Data Bytes =0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	3302      	adds	r3, #2
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
		break;
 800502e:	e037      	b.n	80050a0 <SbW_Request_Received_CB+0x224>
	case 0x04: // Get number of frames to be reported by the controller
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	2000      	movs	r0, #0
 8005036:	4798      	blx	r3
		if (!S->R_W) { // ??
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	791b      	ldrb	r3, [r3, #4]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d129      	bne.n	800509a <SbW_Request_Received_CB+0x21e>
			NoReply = 1; // means do not issue a standard reply
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
			S->RemainingFrames = data[3];
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	78da      	ldrb	r2, [r3, #3]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			// SbW_TxFrame_processor(S);
		}
		break;
 8005054:	e021      	b.n	800509a <SbW_Request_Received_CB+0x21e>

	case 0x06: // Get the frame buffer depth
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	2000      	movs	r0, #0
 800505c:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	791b      	ldrb	r3, [r3, #4]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d018      	beq.n	800509e <SbW_Request_Received_CB+0x222>
			len = 7;
 800506c:	2307      	movs	r3, #7
 800506e:	80fb      	strh	r3, [r7, #6]
			uint16_t FrameBufferDepth = S->Fifo_Buffer_Size / S->Frame_Len;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8b9b      	ldrh	r3, [r3, #28]
 8005074:	461a      	mov	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	799b      	ldrb	r3, [r3, #6]
 800507a:	fb92 f3f3 	sdiv	r3, r2, r3
 800507e:	827b      	strh	r3, [r7, #18]
			data[3] = (uint8_t) (FrameBufferDepth >> 8);
 8005080:	8a7b      	ldrh	r3, [r7, #18]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	b29a      	uxth	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3303      	adds	r3, #3
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) FrameBufferDepth;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3304      	adds	r3, #4
 8005092:	8a7a      	ldrh	r2, [r7, #18]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005098:	e001      	b.n	800509e <SbW_Request_Received_CB+0x222>
		break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <SbW_Request_Received_CB+0x224>
		break;
 800509e:	bf00      	nop

	default:
		return;
	}

	if (!NoReply) {
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d122      	bne.n	80050ec <SbW_Request_Received_CB+0x270>
		CRC_Result = CRC16(data, len - 2);
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	3b02      	subs	r3, #2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	68b8      	ldr	r0, [r7, #8]
 80050b0:	f7ff fea7 	bl	8004e02 <CRC16>
 80050b4:	4603      	mov	r3, r0
 80050b6:	82bb      	strh	r3, [r7, #20]
		data[len - 2] = (uint8_t) (CRC_Result >> 8);
 80050b8:	8abb      	ldrh	r3, [r7, #20]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b299      	uxth	r1, r3
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	3b02      	subs	r3, #2
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	b2ca      	uxtb	r2, r1
 80050c8:	701a      	strb	r2, [r3, #0]
		data[len - 1] = (uint8_t) (CRC_Result);
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4413      	add	r3, r2
 80050d2:	8aba      	ldrh	r2, [r7, #20]
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
		S->HW_Interface_t.Send_Reply(data, len);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	4611      	mov	r1, r2
 80050e0:	68b8      	ldr	r0, [r7, #8]
 80050e2:	4798      	blx	r3
 80050e4:	e002      	b.n	80050ec <SbW_Request_Received_CB+0x270>
		return;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <SbW_Request_Received_CB+0x270>
		return;
 80050ea:	bf00      	nop
	}
}
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <SbW_Timer_Callback>:
void SbW_Reply_Transmit(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {

}

void SbW_Timer_Callback(SbW_Protocol_t *S) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

	int16_t Head = fifo_enqueue(&S->MessageFifo);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	330c      	adds	r3, #12
 8005100:	4618      	mov	r0, r3
 8005102:	f7fb fc2a 	bl	800095a <fifo_enqueue>
 8005106:	4603      	mov	r3, r0
 8005108:	81fb      	strh	r3, [r7, #14]
	// Implement the enqueue operation

	memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	7989      	ldrb	r1, [r1, #6]
 8005116:	fb01 f202 	mul.w	r2, r1, r2
 800511a:	1898      	adds	r0, r3, r2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6899      	ldr	r1, [r3, #8]
			S->Frame_Len);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	799b      	ldrb	r3, [r3, #6]
	memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 8005124:	461a      	mov	r2, r3
 8005126:	f002 fd7f 	bl	8007c28 <memcpy>

	SbW_TxFrame_processor(S);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f804 	bl	8005138 <SbW_TxFrame_processor>
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <SbW_TxFrame_processor>:

void SbW_TxFrame_processor(SbW_Protocol_t *S) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(&S->MessageFifo) && S->RemainingFrames != 0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	330c      	adds	r3, #12
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb fbf6 	bl	8000936 <fifo_is_empty>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d138      	bne.n	80051c2 <SbW_TxFrame_processor+0x8a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d033      	beq.n	80051c2 <SbW_TxFrame_processor+0x8a>
			&& !S->Mutex) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12e      	bne.n	80051c2 <SbW_TxFrame_processor+0x8a>
		S->Mutex = 1;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		int16_t H = fifo_dequeue(&S->MessageFifo);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	330c      	adds	r3, #12
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb fc2d 	bl	80009d0 <fifo_dequeue>
 8005176:	4603      	mov	r3, r0
 8005178:	81fb      	strh	r3, [r7, #14]
		S->RemainingFrames--;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005180:	3b01      	subs	r3, #1
 8005182:	b2da      	uxtb	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a18      	ldr	r0, [r3, #32]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	7989      	ldrb	r1, [r1, #6]
 800519a:	fb01 f202 	mul.w	r2, r1, r2
 800519e:	1899      	adds	r1, r3, r2
				S->Frame_Len);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	799b      	ldrb	r3, [r3, #6]
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 80051a4:	461a      	mov	r2, r3
 80051a6:	f002 fd3f 	bl	8007c28 <memcpy>
		S->HW_Interface_t.Send_Reply(S->P_TXBuffer, S->Frame_Len);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6a10      	ldr	r0, [r2, #32]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	7992      	ldrb	r2, [r2, #6]
 80051b6:	4611      	mov	r1, r2
 80051b8:	4798      	blx	r3
		S->Mutex = 0;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	}
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <SbW_TxCPLt>:

void SbW_TxCPLt(SbW_Protocol_t *S) {
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
	SbW_TxFrame_processor(S);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff ffb0 	bl	8005138 <SbW_TxFrame_processor>
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80051ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80051f0:	f002 fcaa 	bl	8007b48 <USBD_static_malloc>
 80051f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	32b0      	adds	r2, #176	@ 0xb0
 8005206:	2100      	movs	r1, #0
 8005208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800520c:	2302      	movs	r3, #2
 800520e:	e0d4      	b.n	80053ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005210:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005214:	2100      	movs	r1, #0
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f002 fcda 	bl	8007bd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	32b0      	adds	r2, #176	@ 0xb0
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	32b0      	adds	r2, #176	@ 0xb0
 8005236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7c1b      	ldrb	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d138      	bne.n	80052ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005248:	4b5e      	ldr	r3, [pc, #376]	@ (80053c4 <USBD_CDC_Init+0x1e4>)
 800524a:	7819      	ldrb	r1, [r3, #0]
 800524c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005250:	2202      	movs	r2, #2
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f002 fb55 	bl	8007902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005258:	4b5a      	ldr	r3, [pc, #360]	@ (80053c4 <USBD_CDC_Init+0x1e4>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f003 020f 	and.w	r2, r3, #15
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3324      	adds	r3, #36	@ 0x24
 800526e:	2201      	movs	r2, #1
 8005270:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005272:	4b55      	ldr	r3, [pc, #340]	@ (80053c8 <USBD_CDC_Init+0x1e8>)
 8005274:	7819      	ldrb	r1, [r3, #0]
 8005276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800527a:	2202      	movs	r2, #2
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f002 fb40 	bl	8007902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005282:	4b51      	ldr	r3, [pc, #324]	@ (80053c8 <USBD_CDC_Init+0x1e8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f003 020f 	and.w	r2, r3, #15
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800529a:	2201      	movs	r2, #1
 800529c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800529e:	4b4b      	ldr	r3, [pc, #300]	@ (80053cc <USBD_CDC_Init+0x1ec>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 020f 	and.w	r2, r3, #15
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3326      	adds	r3, #38	@ 0x26
 80052b4:	2210      	movs	r2, #16
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	e035      	b.n	8005326 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052ba:	4b42      	ldr	r3, [pc, #264]	@ (80053c4 <USBD_CDC_Init+0x1e4>)
 80052bc:	7819      	ldrb	r1, [r3, #0]
 80052be:	2340      	movs	r3, #64	@ 0x40
 80052c0:	2202      	movs	r2, #2
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 fb1d 	bl	8007902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052c8:	4b3e      	ldr	r3, [pc, #248]	@ (80053c4 <USBD_CDC_Init+0x1e4>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3324      	adds	r3, #36	@ 0x24
 80052de:	2201      	movs	r2, #1
 80052e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052e2:	4b39      	ldr	r3, [pc, #228]	@ (80053c8 <USBD_CDC_Init+0x1e8>)
 80052e4:	7819      	ldrb	r1, [r3, #0]
 80052e6:	2340      	movs	r3, #64	@ 0x40
 80052e8:	2202      	movs	r2, #2
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f002 fb09 	bl	8007902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052f0:	4b35      	ldr	r3, [pc, #212]	@ (80053c8 <USBD_CDC_Init+0x1e8>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	f003 020f 	and.w	r2, r3, #15
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005308:	2201      	movs	r2, #1
 800530a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800530c:	4b2f      	ldr	r3, [pc, #188]	@ (80053cc <USBD_CDC_Init+0x1ec>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 020f 	and.w	r2, r3, #15
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3326      	adds	r3, #38	@ 0x26
 8005322:	2210      	movs	r2, #16
 8005324:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005326:	4b29      	ldr	r3, [pc, #164]	@ (80053cc <USBD_CDC_Init+0x1ec>)
 8005328:	7819      	ldrb	r1, [r3, #0]
 800532a:	2308      	movs	r3, #8
 800532c:	2203      	movs	r2, #3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f002 fae7 	bl	8007902 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005334:	4b25      	ldr	r3, [pc, #148]	@ (80053cc <USBD_CDC_Init+0x1ec>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3324      	adds	r3, #36	@ 0x24
 800534a:	2201      	movs	r2, #1
 800534c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	33b0      	adds	r3, #176	@ 0xb0
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005384:	2302      	movs	r3, #2
 8005386:	e018      	b.n	80053ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7c1b      	ldrb	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005390:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <USBD_CDC_Init+0x1e8>)
 8005392:	7819      	ldrb	r1, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800539a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f002 fb9e 	bl	8007ae0 <USBD_LL_PrepareReceive>
 80053a4:	e008      	b.n	80053b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053a6:	4b08      	ldr	r3, [pc, #32]	@ (80053c8 <USBD_CDC_Init+0x1e8>)
 80053a8:	7819      	ldrb	r1, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053b0:	2340      	movs	r3, #64	@ 0x40
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f002 fb94 	bl	8007ae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200000c3 	.word	0x200000c3
 80053c8:	200000c4 	.word	0x200000c4
 80053cc:	200000c5 	.word	0x200000c5

080053d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80053dc:	4b3a      	ldr	r3, [pc, #232]	@ (80054c8 <USBD_CDC_DeInit+0xf8>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f002 fab3 	bl	800794e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80053e8:	4b37      	ldr	r3, [pc, #220]	@ (80054c8 <USBD_CDC_DeInit+0xf8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3324      	adds	r3, #36	@ 0x24
 80053fe:	2200      	movs	r2, #0
 8005400:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005402:	4b32      	ldr	r3, [pc, #200]	@ (80054cc <USBD_CDC_DeInit+0xfc>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f002 faa0 	bl	800794e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800540e:	4b2f      	ldr	r3, [pc, #188]	@ (80054cc <USBD_CDC_DeInit+0xfc>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	f003 020f 	and.w	r2, r3, #15
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005426:	2200      	movs	r2, #0
 8005428:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800542a:	4b29      	ldr	r3, [pc, #164]	@ (80054d0 <USBD_CDC_DeInit+0x100>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f002 fa8c 	bl	800794e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005436:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <USBD_CDC_DeInit+0x100>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	3324      	adds	r3, #36	@ 0x24
 800544c:	2200      	movs	r2, #0
 800544e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005450:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <USBD_CDC_DeInit+0x100>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f003 020f 	and.w	r2, r3, #15
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	3326      	adds	r3, #38	@ 0x26
 8005466:	2200      	movs	r2, #0
 8005468:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	32b0      	adds	r2, #176	@ 0xb0
 8005474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01f      	beq.n	80054bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	33b0      	adds	r3, #176	@ 0xb0
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	32b0      	adds	r2, #176	@ 0xb0
 800549a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549e:	4618      	mov	r0, r3
 80054a0:	f002 fb60 	bl	8007b64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	32b0      	adds	r2, #176	@ 0xb0
 80054ae:	2100      	movs	r1, #0
 80054b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200000c3 	.word	0x200000c3
 80054cc:	200000c4 	.word	0x200000c4
 80054d0:	200000c5 	.word	0x200000c5

080054d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	32b0      	adds	r2, #176	@ 0xb0
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005500:	2303      	movs	r3, #3
 8005502:	e0bf      	b.n	8005684 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800550c:	2b00      	cmp	r3, #0
 800550e:	d050      	beq.n	80055b2 <USBD_CDC_Setup+0xde>
 8005510:	2b20      	cmp	r3, #32
 8005512:	f040 80af 	bne.w	8005674 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	88db      	ldrh	r3, [r3, #6]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d03a      	beq.n	8005594 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b25b      	sxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	da1b      	bge.n	8005560 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	33b0      	adds	r3, #176	@ 0xb0
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800553e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	88d2      	ldrh	r2, [r2, #6]
 8005544:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	88db      	ldrh	r3, [r3, #6]
 800554a:	2b07      	cmp	r3, #7
 800554c:	bf28      	it	cs
 800554e:	2307      	movcs	r3, #7
 8005550:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	89fa      	ldrh	r2, [r7, #14]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fd93 	bl	8007084 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800555e:	e090      	b.n	8005682 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	785a      	ldrb	r2, [r3, #1]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	88db      	ldrh	r3, [r3, #6]
 800556e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005570:	d803      	bhi.n	800557a <USBD_CDC_Setup+0xa6>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	88db      	ldrh	r3, [r3, #6]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	e000      	b.n	800557c <USBD_CDC_Setup+0xa8>
 800557a:	2240      	movs	r2, #64	@ 0x40
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005582:	6939      	ldr	r1, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800558a:	461a      	mov	r2, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fda5 	bl	80070dc <USBD_CtlPrepareRx>
      break;
 8005592:	e076      	b.n	8005682 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	33b0      	adds	r3, #176	@ 0xb0
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	7850      	ldrb	r0, [r2, #1]
 80055aa:	2200      	movs	r2, #0
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	4798      	blx	r3
      break;
 80055b0:	e067      	b.n	8005682 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b0b      	cmp	r3, #11
 80055b8:	d851      	bhi.n	800565e <USBD_CDC_Setup+0x18a>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <USBD_CDC_Setup+0xec>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	0800566d 	.word	0x0800566d
 80055c8:	0800565f 	.word	0x0800565f
 80055cc:	0800565f 	.word	0x0800565f
 80055d0:	0800565f 	.word	0x0800565f
 80055d4:	0800565f 	.word	0x0800565f
 80055d8:	0800565f 	.word	0x0800565f
 80055dc:	0800565f 	.word	0x0800565f
 80055e0:	0800565f 	.word	0x0800565f
 80055e4:	0800565f 	.word	0x0800565f
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	08005645 	.word	0x08005645
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d107      	bne.n	800560c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055fc:	f107 030a 	add.w	r3, r7, #10
 8005600:	2202      	movs	r2, #2
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 fd3d 	bl	8007084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800560a:	e032      	b.n	8005672 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 fcbb 	bl	8006f8a <USBD_CtlError>
            ret = USBD_FAIL;
 8005614:	2303      	movs	r3, #3
 8005616:	75fb      	strb	r3, [r7, #23]
          break;
 8005618:	e02b      	b.n	8005672 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005626:	f107 030d 	add.w	r3, r7, #13
 800562a:	2201      	movs	r2, #1
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fd28 	bl	8007084 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005634:	e01d      	b.n	8005672 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fca6 	bl	8006f8a <USBD_CtlError>
            ret = USBD_FAIL;
 800563e:	2303      	movs	r3, #3
 8005640:	75fb      	strb	r3, [r7, #23]
          break;
 8005642:	e016      	b.n	8005672 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d00f      	beq.n	8005670 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 fc99 	bl	8006f8a <USBD_CtlError>
            ret = USBD_FAIL;
 8005658:	2303      	movs	r3, #3
 800565a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800565c:	e008      	b.n	8005670 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fc92 	bl	8006f8a <USBD_CtlError>
          ret = USBD_FAIL;
 8005666:	2303      	movs	r3, #3
 8005668:	75fb      	strb	r3, [r7, #23]
          break;
 800566a:	e002      	b.n	8005672 <USBD_CDC_Setup+0x19e>
          break;
 800566c:	bf00      	nop
 800566e:	e008      	b.n	8005682 <USBD_CDC_Setup+0x1ae>
          break;
 8005670:	bf00      	nop
      }
      break;
 8005672:	e006      	b.n	8005682 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 fc87 	bl	8006f8a <USBD_CtlError>
      ret = USBD_FAIL;
 800567c:	2303      	movs	r3, #3
 800567e:	75fb      	strb	r3, [r7, #23]
      break;
 8005680:	bf00      	nop
  }

  return (uint8_t)ret;
 8005682:	7dfb      	ldrb	r3, [r7, #23]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800569e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	32b0      	adds	r2, #176	@ 0xb0
 80056aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e065      	b.n	8005782 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	32b0      	adds	r2, #176	@ 0xb0
 80056c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3318      	adds	r3, #24
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02f      	beq.n	8005740 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	f003 020f 	and.w	r2, r3, #15
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3318      	adds	r3, #24
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 010f 	and.w	r1, r3, #15
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	460b      	mov	r3, r1
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4403      	add	r3, r0
 8005708:	331c      	adds	r3, #28
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005716:	2b00      	cmp	r3, #0
 8005718:	d112      	bne.n	8005740 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3318      	adds	r3, #24
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005732:	78f9      	ldrb	r1, [r7, #3]
 8005734:	2300      	movs	r3, #0
 8005736:	2200      	movs	r2, #0
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f002 f9b0 	bl	8007a9e <USBD_LL_Transmit>
 800573e:	e01f      	b.n	8005780 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	33b0      	adds	r3, #176	@ 0xb0
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	33b0      	adds	r3, #176	@ 0xb0
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	@ 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	32b0      	adds	r2, #176	@ 0xb0
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e01a      	b.n	80057f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f002 f9ae 	bl	8007b22 <USBD_LL_GetRxDataSize>
 80057c6:	4602      	mov	r2, r0
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	33b0      	adds	r3, #176	@ 0xb0
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80057ec:	4611      	mov	r1, r2
 80057ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	32b0      	adds	r2, #176	@ 0xb0
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005818:	2303      	movs	r3, #3
 800581a:	e024      	b.n	8005866 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	33b0      	adds	r3, #176	@ 0xb0
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d019      	beq.n	8005864 <USBD_CDC_EP0_RxReady+0x6a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005836:	2bff      	cmp	r3, #255	@ 0xff
 8005838:	d014      	beq.n	8005864 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	33b0      	adds	r3, #176	@ 0xb0
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005852:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800585a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	22ff      	movs	r2, #255	@ 0xff
 8005860:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005878:	2182      	movs	r1, #130	@ 0x82
 800587a:	4818      	ldr	r0, [pc, #96]	@ (80058dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800587c:	f000 fd4f 	bl	800631e <USBD_GetEpDesc>
 8005880:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005882:	2101      	movs	r1, #1
 8005884:	4815      	ldr	r0, [pc, #84]	@ (80058dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005886:	f000 fd4a 	bl	800631e <USBD_GetEpDesc>
 800588a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800588c:	2181      	movs	r1, #129	@ 0x81
 800588e:	4813      	ldr	r0, [pc, #76]	@ (80058dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005890:	f000 fd45 	bl	800631e <USBD_GetEpDesc>
 8005894:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2210      	movs	r2, #16
 80058a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d006      	beq.n	80058b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058b0:	711a      	strb	r2, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d006      	beq.n	80058ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058c4:	711a      	strb	r2, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2243      	movs	r2, #67	@ 0x43
 80058ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058d0:	4b02      	ldr	r3, [pc, #8]	@ (80058dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000080 	.word	0x20000080

080058e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058e8:	2182      	movs	r1, #130	@ 0x82
 80058ea:	4818      	ldr	r0, [pc, #96]	@ (800594c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80058ec:	f000 fd17 	bl	800631e <USBD_GetEpDesc>
 80058f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058f2:	2101      	movs	r1, #1
 80058f4:	4815      	ldr	r0, [pc, #84]	@ (800594c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80058f6:	f000 fd12 	bl	800631e <USBD_GetEpDesc>
 80058fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058fc:	2181      	movs	r1, #129	@ 0x81
 80058fe:	4813      	ldr	r0, [pc, #76]	@ (800594c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005900:	f000 fd0d 	bl	800631e <USBD_GetEpDesc>
 8005904:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2210      	movs	r2, #16
 8005910:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2200      	movs	r2, #0
 800591c:	711a      	strb	r2, [r3, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f042 0202 	orr.w	r2, r2, #2
 8005924:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	711a      	strb	r2, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f042 0202 	orr.w	r2, r2, #2
 8005938:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2243      	movs	r2, #67	@ 0x43
 800593e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005940:	4b02      	ldr	r3, [pc, #8]	@ (800594c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000080 	.word	0x20000080

08005950 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005958:	2182      	movs	r1, #130	@ 0x82
 800595a:	4818      	ldr	r0, [pc, #96]	@ (80059bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800595c:	f000 fcdf 	bl	800631e <USBD_GetEpDesc>
 8005960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005962:	2101      	movs	r1, #1
 8005964:	4815      	ldr	r0, [pc, #84]	@ (80059bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005966:	f000 fcda 	bl	800631e <USBD_GetEpDesc>
 800596a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800596c:	2181      	movs	r1, #129	@ 0x81
 800596e:	4813      	ldr	r0, [pc, #76]	@ (80059bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005970:	f000 fcd5 	bl	800631e <USBD_GetEpDesc>
 8005974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2210      	movs	r2, #16
 8005980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d006      	beq.n	8005996 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2200      	movs	r2, #0
 800598c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005990:	711a      	strb	r2, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059a4:	711a      	strb	r2, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2243      	movs	r2, #67	@ 0x43
 80059ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059b0:	4b02      	ldr	r3, [pc, #8]	@ (80059bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000080 	.word	0x20000080

080059c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	220a      	movs	r2, #10
 80059cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059ce:	4b03      	ldr	r3, [pc, #12]	@ (80059dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	2000003c 	.word	0x2000003c

080059e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e009      	b.n	8005a08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	33b0      	adds	r3, #176	@ 0xb0
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	32b0      	adds	r2, #176	@ 0xb0
 8005a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e008      	b.n	8005a4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	32b0      	adds	r2, #176	@ 0xb0
 8005a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e004      	b.n	8005a86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	32b0      	adds	r2, #176	@ 0xb0
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e025      	b.n	8005b06 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d11f      	bne.n	8005b04 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005acc:	4b10      	ldr	r3, [pc, #64]	@ (8005b10 <USBD_CDC_TransmitPacket+0x7c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4403      	add	r3, r0
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005aea:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <USBD_CDC_TransmitPacket+0x7c>)
 8005aec:	7819      	ldrb	r1, [r3, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 ffcf 	bl	8007a9e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200000c3 	.word	0x200000c3

08005b14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	32b0      	adds	r2, #176	@ 0xb0
 8005b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	32b0      	adds	r2, #176	@ 0xb0
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e018      	b.n	8005b74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7c1b      	ldrb	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <USBD_CDC_ReceivePacket+0x68>)
 8005b4c:	7819      	ldrb	r1, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 ffc1 	bl	8007ae0 <USBD_LL_PrepareReceive>
 8005b5e:	e008      	b.n	8005b72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b60:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <USBD_CDC_ReceivePacket+0x68>)
 8005b62:	7819      	ldrb	r1, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b6a:	2340      	movs	r3, #64	@ 0x40
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 ffb7 	bl	8007ae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	200000c4 	.word	0x200000c4

08005b80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e01f      	b.n	8005bd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	79fa      	ldrb	r2, [r7, #7]
 8005bca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f001 fe31 	bl	8007834 <USBD_LL_Init>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e025      	b.n	8005c44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	32ae      	adds	r2, #174	@ 0xae
 8005c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00f      	beq.n	8005c34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	32ae      	adds	r2, #174	@ 0xae
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	f107 020e 	add.w	r2, r7, #14
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4798      	blx	r3
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fe39 	bl	80078cc <USBD_LL_Start>
 8005c5a:	4603      	mov	r3, r0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	4798      	blx	r3
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 f90c 	bl	8006f16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d01a      	beq.n	8005d58 <USBD_LL_SetupStage+0x72>
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d822      	bhi.n	8005d6c <USBD_LL_SetupStage+0x86>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <USBD_LL_SetupStage+0x4a>
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d00a      	beq.n	8005d44 <USBD_LL_SetupStage+0x5e>
 8005d2e:	e01d      	b.n	8005d6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb63 	bl	8006404 <USBD_StdDevReq>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
      break;
 8005d42:	e020      	b.n	8005d86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fbcb 	bl	80064e8 <USBD_StdItfReq>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
      break;
 8005d56:	e016      	b.n	8005d86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fc2d 	bl	80065c0 <USBD_StdEPReq>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6a:	e00c      	b.n	8005d86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fe06 	bl	800798c <USBD_LL_StallEP>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	bf00      	nop
  }

  return ret;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d16e      	bne.n	8005e86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005dae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	f040 8098 	bne.w	8005eec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d913      	bls.n	8005df0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bf28      	it	cs
 8005de2:	4613      	movcs	r3, r2
 8005de4:	461a      	mov	r2, r3
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f001 f994 	bl	8007116 <USBD_CtlContinueRx>
 8005dee:	e07d      	b.n	8005eec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d014      	beq.n	8005e28 <USBD_LL_DataOutStage+0x98>
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d81d      	bhi.n	8005e3e <USBD_LL_DataOutStage+0xae>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <USBD_LL_DataOutStage+0x7c>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d003      	beq.n	8005e12 <USBD_LL_DataOutStage+0x82>
 8005e0a:	e018      	b.n	8005e3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e10:	e018      	b.n	8005e44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fa64 	bl	80062ea <USBD_CoreFindIF>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75bb      	strb	r3, [r7, #22]
            break;
 8005e26:	e00d      	b.n	8005e44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fa66 	bl	8006304 <USBD_CoreFindEP>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e3c:	e002      	b.n	8005e44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75bb      	strb	r3, [r7, #22]
            break;
 8005e42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e44:	7dbb      	ldrb	r3, [r7, #22]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d119      	bne.n	8005e7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d113      	bne.n	8005e7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e56:	7dba      	ldrb	r2, [r7, #22]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	32ae      	adds	r2, #174	@ 0xae
 8005e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e66:	7dba      	ldrb	r2, [r7, #22]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e6e:	7dba      	ldrb	r2, [r7, #22]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	32ae      	adds	r2, #174	@ 0xae
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f001 f95a 	bl	8007138 <USBD_CtlSendStatus>
 8005e84:	e032      	b.n	8005eec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fa37 	bl	8006304 <USBD_CoreFindEP>
 8005e96:	4603      	mov	r3, r0
 8005e98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e9a:	7dbb      	ldrb	r3, [r7, #22]
 8005e9c:	2bff      	cmp	r3, #255	@ 0xff
 8005e9e:	d025      	beq.n	8005eec <USBD_LL_DataOutStage+0x15c>
 8005ea0:	7dbb      	ldrb	r3, [r7, #22]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d122      	bne.n	8005eec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d117      	bne.n	8005ee2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005eb2:	7dba      	ldrb	r2, [r7, #22]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	32ae      	adds	r2, #174	@ 0xae
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00f      	beq.n	8005ee2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ec2:	7dba      	ldrb	r2, [r7, #22]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eca:	7dba      	ldrb	r2, [r7, #22]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	32ae      	adds	r2, #174	@ 0xae
 8005ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	7afa      	ldrb	r2, [r7, #11]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	e000      	b.n	8005eee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b086      	sub	sp, #24
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	460b      	mov	r3, r1
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f04:	7afb      	ldrb	r3, [r7, #11]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d16f      	bne.n	8005fea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3314      	adds	r3, #20
 8005f0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d15a      	bne.n	8005fd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d914      	bls.n	8005f50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f001 f8bc 	bl	80070ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f42:	2300      	movs	r3, #0
 8005f44:	2200      	movs	r2, #0
 8005f46:	2100      	movs	r1, #0
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f001 fdc9 	bl	8007ae0 <USBD_LL_PrepareReceive>
 8005f4e:	e03f      	b.n	8005fd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d11c      	bne.n	8005f96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d316      	bcc.n	8005f96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d20f      	bcs.n	8005f96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f76:	2200      	movs	r2, #0
 8005f78:	2100      	movs	r1, #0
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 f89d 	bl	80070ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fda6 	bl	8007ae0 <USBD_LL_PrepareReceive>
 8005f94:	e01c      	b.n	8005fd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d10f      	bne.n	8005fc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d009      	beq.n	8005fc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fc2:	2180      	movs	r1, #128	@ 0x80
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f001 fce1 	bl	800798c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 f8c7 	bl	800715e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d03a      	beq.n	8006050 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff fe42 	bl	8005c64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005fe8:	e032      	b.n	8006050 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f985 	bl	8006304 <USBD_CoreFindEP>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	2bff      	cmp	r3, #255	@ 0xff
 8006002:	d025      	beq.n	8006050 <USBD_LL_DataInStage+0x15a>
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d122      	bne.n	8006050 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b03      	cmp	r3, #3
 8006014:	d11c      	bne.n	8006050 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006016:	7dfa      	ldrb	r2, [r7, #23]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	32ae      	adds	r2, #174	@ 0xae
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d014      	beq.n	8006050 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006026:	7dfa      	ldrb	r2, [r7, #23]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800602e:	7dfa      	ldrb	r2, [r7, #23]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	32ae      	adds	r2, #174	@ 0xae
 8006034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	7afa      	ldrb	r2, [r7, #11]
 800603c:	4611      	mov	r1, r2
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	4798      	blx	r3
 8006042:	4603      	mov	r3, r0
 8006044:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006046:	7dbb      	ldrb	r3, [r7, #22]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800604c:	7dbb      	ldrb	r3, [r7, #22]
 800604e:	e000      	b.n	8006052 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d014      	beq.n	80060c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00e      	beq.n	80060c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6852      	ldr	r2, [r2, #4]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	4611      	mov	r1, r2
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	4798      	blx	r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060c0:	2340      	movs	r3, #64	@ 0x40
 80060c2:	2200      	movs	r2, #0
 80060c4:	2100      	movs	r1, #0
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fc1b 	bl	8007902 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2240      	movs	r2, #64	@ 0x40
 80060d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060dc:	2340      	movs	r3, #64	@ 0x40
 80060de:	2200      	movs	r2, #0
 80060e0:	2180      	movs	r1, #128	@ 0x80
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fc0d 	bl	8007902 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2240      	movs	r2, #64	@ 0x40
 80060f2:	621a      	str	r2, [r3, #32]

  return ret;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b04      	cmp	r3, #4
 8006130:	d006      	beq.n	8006140 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2204      	movs	r2, #4
 8006144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b04      	cmp	r3, #4
 8006168:	d106      	bne.n	8006178 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006170:	b2da      	uxtb	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d110      	bne.n	80061bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	32ae      	adds	r2, #174	@ 0xae
 80061dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e01c      	b.n	8006222 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d115      	bne.n	8006220 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	32ae      	adds	r2, #174	@ 0xae
 80061fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32ae      	adds	r2, #174	@ 0xae
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	4611      	mov	r1, r2
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	32ae      	adds	r2, #174	@ 0xae
 8006240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	e01c      	b.n	8006286 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b03      	cmp	r3, #3
 8006256:	d115      	bne.n	8006284 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	32ae      	adds	r2, #174	@ 0xae
 8006262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	32ae      	adds	r2, #174	@ 0xae
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	4611      	mov	r1, r2
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00e      	beq.n	80062e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6852      	ldr	r2, [r2, #4]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	4611      	mov	r1, r2
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006310:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	885b      	ldrh	r3, [r3, #2]
 800633a:	b29b      	uxth	r3, r3
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	4293      	cmp	r3, r2
 8006342:	d91f      	bls.n	8006384 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800634a:	e013      	b.n	8006374 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800634c:	f107 030a 	add.w	r3, r7, #10
 8006350:	4619      	mov	r1, r3
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f000 f81b 	bl	800638e <USBD_GetNextDesc>
 8006358:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b05      	cmp	r3, #5
 8006360:	d108      	bne.n	8006374 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	789b      	ldrb	r3, [r3, #2]
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	429a      	cmp	r2, r3
 800636e:	d008      	beq.n	8006382 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	b29a      	uxth	r2, r3
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	429a      	cmp	r2, r3
 800637e:	d8e5      	bhi.n	800634c <USBD_GetEpDesc+0x2e>
 8006380:	e000      	b.n	8006384 <USBD_GetEpDesc+0x66>
          break;
 8006382:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006384:	693b      	ldr	r3, [r7, #16]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	7812      	ldrb	r2, [r2, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4413      	add	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	3301      	adds	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	b21a      	sxth	r2, r3
 80063ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b21b      	sxth	r3, r3
 80063f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063f6:	89fb      	ldrh	r3, [r7, #14]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d005      	beq.n	800642a <USBD_StdDevReq+0x26>
 800641e:	2b40      	cmp	r3, #64	@ 0x40
 8006420:	d857      	bhi.n	80064d2 <USBD_StdDevReq+0xce>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00f      	beq.n	8006446 <USBD_StdDevReq+0x42>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d153      	bne.n	80064d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	32ae      	adds	r2, #174	@ 0xae
 8006434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
      break;
 8006444:	e04a      	b.n	80064dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	785b      	ldrb	r3, [r3, #1]
 800644a:	2b09      	cmp	r3, #9
 800644c:	d83b      	bhi.n	80064c6 <USBD_StdDevReq+0xc2>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <USBD_StdDevReq+0x50>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	080064a9 	.word	0x080064a9
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080064c7 	.word	0x080064c7
 8006460:	080064b3 	.word	0x080064b3
 8006464:	080064c7 	.word	0x080064c7
 8006468:	08006487 	.word	0x08006487
 800646c:	0800647d 	.word	0x0800647d
 8006470:	080064c7 	.word	0x080064c7
 8006474:	0800649f 	.word	0x0800649f
 8006478:	08006491 	.word	0x08006491
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa3c 	bl	80068fc <USBD_GetDescriptor>
          break;
 8006484:	e024      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fba1 	bl	8006bd0 <USBD_SetAddress>
          break;
 800648e:	e01f      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fbe0 	bl	8006c58 <USBD_SetConfig>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
          break;
 800649c:	e018      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc83 	bl	8006dac <USBD_GetConfig>
          break;
 80064a6:	e013      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fcb4 	bl	8006e18 <USBD_GetStatus>
          break;
 80064b0:	e00e      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fce3 	bl	8006e80 <USBD_SetFeature>
          break;
 80064ba:	e009      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fd07 	bl	8006ed2 <USBD_ClrFeature>
          break;
 80064c4:	e004      	b.n	80064d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fd5e 	bl	8006f8a <USBD_CtlError>
          break;
 80064ce:	bf00      	nop
      }
      break;
 80064d0:	e004      	b.n	80064dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fd58 	bl	8006f8a <USBD_CtlError>
      break;
 80064da:	bf00      	nop
  }

  return ret;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop

080064e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d005      	beq.n	800650e <USBD_StdItfReq+0x26>
 8006502:	2b40      	cmp	r3, #64	@ 0x40
 8006504:	d852      	bhi.n	80065ac <USBD_StdItfReq+0xc4>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <USBD_StdItfReq+0x26>
 800650a:	2b20      	cmp	r3, #32
 800650c:	d14e      	bne.n	80065ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006514:	b2db      	uxtb	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	2b02      	cmp	r3, #2
 800651a:	d840      	bhi.n	800659e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	889b      	ldrh	r3, [r3, #4]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	d836      	bhi.n	8006594 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	889b      	ldrh	r3, [r3, #4]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fedb 	bl	80062ea <USBD_CoreFindIF>
 8006534:	4603      	mov	r3, r0
 8006536:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	2bff      	cmp	r3, #255	@ 0xff
 800653c:	d01d      	beq.n	800657a <USBD_StdItfReq+0x92>
 800653e:	7bbb      	ldrb	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11a      	bne.n	800657a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006544:	7bba      	ldrb	r2, [r7, #14]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	32ae      	adds	r2, #174	@ 0xae
 800654a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00f      	beq.n	8006574 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006554:	7bba      	ldrb	r2, [r7, #14]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800655c:	7bba      	ldrb	r2, [r7, #14]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32ae      	adds	r2, #174	@ 0xae
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006572:	e004      	b.n	800657e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006578:	e001      	b.n	800657e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d110      	bne.n	80065a8 <USBD_StdItfReq+0xc0>
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10d      	bne.n	80065a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fdd3 	bl	8007138 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006592:	e009      	b.n	80065a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fcf7 	bl	8006f8a <USBD_CtlError>
          break;
 800659c:	e004      	b.n	80065a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fcf2 	bl	8006f8a <USBD_CtlError>
          break;
 80065a6:	e000      	b.n	80065aa <USBD_StdItfReq+0xc2>
          break;
 80065a8:	bf00      	nop
      }
      break;
 80065aa:	e004      	b.n	80065b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fceb 	bl	8006f8a <USBD_CtlError>
      break;
 80065b4:	bf00      	nop
  }

  return ret;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	889b      	ldrh	r3, [r3, #4]
 80065d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065dc:	2b40      	cmp	r3, #64	@ 0x40
 80065de:	d007      	beq.n	80065f0 <USBD_StdEPReq+0x30>
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	f200 817f 	bhi.w	80068e4 <USBD_StdEPReq+0x324>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d02a      	beq.n	8006640 <USBD_StdEPReq+0x80>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	f040 817a 	bne.w	80068e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fe85 	bl	8006304 <USBD_CoreFindEP>
 80065fa:	4603      	mov	r3, r0
 80065fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065fe:	7b7b      	ldrb	r3, [r7, #13]
 8006600:	2bff      	cmp	r3, #255	@ 0xff
 8006602:	f000 8174 	beq.w	80068ee <USBD_StdEPReq+0x32e>
 8006606:	7b7b      	ldrb	r3, [r7, #13]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 8170 	bne.w	80068ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800660e:	7b7a      	ldrb	r2, [r7, #13]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006616:	7b7a      	ldrb	r2, [r7, #13]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	32ae      	adds	r2, #174	@ 0xae
 800661c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8163 	beq.w	80068ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006628:	7b7a      	ldrb	r2, [r7, #13]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32ae      	adds	r2, #174	@ 0xae
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800663e:	e156      	b.n	80068ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b03      	cmp	r3, #3
 8006646:	d008      	beq.n	800665a <USBD_StdEPReq+0x9a>
 8006648:	2b03      	cmp	r3, #3
 800664a:	f300 8145 	bgt.w	80068d8 <USBD_StdEPReq+0x318>
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 809b 	beq.w	800678a <USBD_StdEPReq+0x1ca>
 8006654:	2b01      	cmp	r3, #1
 8006656:	d03c      	beq.n	80066d2 <USBD_StdEPReq+0x112>
 8006658:	e13e      	b.n	80068d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d002      	beq.n	800666c <USBD_StdEPReq+0xac>
 8006666:	2b03      	cmp	r3, #3
 8006668:	d016      	beq.n	8006698 <USBD_StdEPReq+0xd8>
 800666a:	e02c      	b.n	80066c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00d      	beq.n	800668e <USBD_StdEPReq+0xce>
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b80      	cmp	r3, #128	@ 0x80
 8006676:	d00a      	beq.n	800668e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 f985 	bl	800798c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006682:	2180      	movs	r1, #128	@ 0x80
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f981 	bl	800798c <USBD_LL_StallEP>
 800668a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800668c:	e020      	b.n	80066d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc7a 	bl	8006f8a <USBD_CtlError>
              break;
 8006696:	e01b      	b.n	80066d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	885b      	ldrh	r3, [r3, #2]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <USBD_StdEPReq+0xfe>
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b80      	cmp	r3, #128	@ 0x80
 80066aa:	d008      	beq.n	80066be <USBD_StdEPReq+0xfe>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	88db      	ldrh	r3, [r3, #6]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f001 f967 	bl	800798c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fd3a 	bl	8007138 <USBD_CtlSendStatus>

              break;
 80066c4:	e004      	b.n	80066d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc5e 	bl	8006f8a <USBD_CtlError>
              break;
 80066ce:	bf00      	nop
          }
          break;
 80066d0:	e107      	b.n	80068e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d002      	beq.n	80066e4 <USBD_StdEPReq+0x124>
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d016      	beq.n	8006710 <USBD_StdEPReq+0x150>
 80066e2:	e04b      	b.n	800677c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <USBD_StdEPReq+0x146>
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b80      	cmp	r3, #128	@ 0x80
 80066ee:	d00a      	beq.n	8006706 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 f949 	bl	800798c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066fa:	2180      	movs	r1, #128	@ 0x80
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 f945 	bl	800798c <USBD_LL_StallEP>
 8006702:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006704:	e040      	b.n	8006788 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fc3e 	bl	8006f8a <USBD_CtlError>
              break;
 800670e:	e03b      	b.n	8006788 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	885b      	ldrh	r3, [r3, #2]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d136      	bne.n	8006786 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671e:	2b00      	cmp	r3, #0
 8006720:	d004      	beq.n	800672c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 f94f 	bl	80079ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fd03 	bl	8007138 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fde4 	bl	8006304 <USBD_CoreFindEP>
 800673c:	4603      	mov	r3, r0
 800673e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006740:	7b7b      	ldrb	r3, [r7, #13]
 8006742:	2bff      	cmp	r3, #255	@ 0xff
 8006744:	d01f      	beq.n	8006786 <USBD_StdEPReq+0x1c6>
 8006746:	7b7b      	ldrb	r3, [r7, #13]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11c      	bne.n	8006786 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800674c:	7b7a      	ldrb	r2, [r7, #13]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006754:	7b7a      	ldrb	r2, [r7, #13]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	32ae      	adds	r2, #174	@ 0xae
 800675a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d010      	beq.n	8006786 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006764:	7b7a      	ldrb	r2, [r7, #13]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32ae      	adds	r2, #174	@ 0xae
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
 8006776:	4603      	mov	r3, r0
 8006778:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800677a:	e004      	b.n	8006786 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fc03 	bl	8006f8a <USBD_CtlError>
              break;
 8006784:	e000      	b.n	8006788 <USBD_StdEPReq+0x1c8>
              break;
 8006786:	bf00      	nop
          }
          break;
 8006788:	e0ab      	b.n	80068e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d002      	beq.n	800679c <USBD_StdEPReq+0x1dc>
 8006796:	2b03      	cmp	r3, #3
 8006798:	d032      	beq.n	8006800 <USBD_StdEPReq+0x240>
 800679a:	e097      	b.n	80068cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <USBD_StdEPReq+0x1f2>
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b80      	cmp	r3, #128	@ 0x80
 80067a6:	d004      	beq.n	80067b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fbed 	bl	8006f8a <USBD_CtlError>
                break;
 80067b0:	e091      	b.n	80068d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da0b      	bge.n	80067d2 <USBD_StdEPReq+0x212>
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	3310      	adds	r3, #16
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	3304      	adds	r3, #4
 80067d0:	e00b      	b.n	80067ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	3304      	adds	r3, #4
 80067ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2202      	movs	r2, #2
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fc43 	bl	8007084 <USBD_CtlSendData>
              break;
 80067fe:	e06a      	b.n	80068d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006800:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006804:	2b00      	cmp	r3, #0
 8006806:	da11      	bge.n	800682c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	3324      	adds	r3, #36	@ 0x24
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d117      	bne.n	8006852 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fbb0 	bl	8006f8a <USBD_CtlError>
                  break;
 800682a:	e054      	b.n	80068d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	f003 020f 	and.w	r2, r3, #15
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fb9d 	bl	8006f8a <USBD_CtlError>
                  break;
 8006850:	e041      	b.n	80068d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	da0b      	bge.n	8006872 <USBD_StdEPReq+0x2b2>
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3310      	adds	r3, #16
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	e00b      	b.n	800688a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	3304      	adds	r3, #4
 800688a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <USBD_StdEPReq+0x2d8>
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	2b80      	cmp	r3, #128	@ 0x80
 8006896:	d103      	bne.n	80068a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	e00e      	b.n	80068be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f8af 	bl	8007a08 <USBD_LL_IsStallEP>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e002      	b.n	80068be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2202      	movs	r2, #2
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fbdd 	bl	8007084 <USBD_CtlSendData>
              break;
 80068ca:	e004      	b.n	80068d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fb5b 	bl	8006f8a <USBD_CtlError>
              break;
 80068d4:	bf00      	nop
          }
          break;
 80068d6:	e004      	b.n	80068e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb55 	bl	8006f8a <USBD_CtlError>
          break;
 80068e0:	bf00      	nop
      }
      break;
 80068e2:	e005      	b.n	80068f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fb4f 	bl	8006f8a <USBD_CtlError>
      break;
 80068ec:	e000      	b.n	80068f0 <USBD_StdEPReq+0x330>
      break;
 80068ee:	bf00      	nop
  }

  return ret;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	885b      	ldrh	r3, [r3, #2]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	2b06      	cmp	r3, #6
 800691e:	f200 8128 	bhi.w	8006b72 <USBD_GetDescriptor+0x276>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <USBD_GetDescriptor+0x2c>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	08006945 	.word	0x08006945
 800692c:	0800695d 	.word	0x0800695d
 8006930:	0800699d 	.word	0x0800699d
 8006934:	08006b73 	.word	0x08006b73
 8006938:	08006b73 	.word	0x08006b73
 800693c:	08006b13 	.word	0x08006b13
 8006940:	08006b3f 	.word	0x08006b3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
      break;
 800695a:	e112      	b.n	8006b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7c1b      	ldrb	r3, [r3, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10d      	bne.n	8006980 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f107 0208 	add.w	r2, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	2202      	movs	r2, #2
 800697c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800697e:	e100      	b.n	8006b82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	f107 0208 	add.w	r2, r7, #8
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
 8006990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	2202      	movs	r2, #2
 8006998:	701a      	strb	r2, [r3, #0]
      break;
 800699a:	e0f2      	b.n	8006b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	885b      	ldrh	r3, [r3, #2]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	f200 80ac 	bhi.w	8006b00 <USBD_GetDescriptor+0x204>
 80069a8:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <USBD_GetDescriptor+0xb4>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	080069c9 	.word	0x080069c9
 80069b4:	080069fd 	.word	0x080069fd
 80069b8:	08006a31 	.word	0x08006a31
 80069bc:	08006a65 	.word	0x08006a65
 80069c0:	08006a99 	.word	0x08006a99
 80069c4:	08006acd 	.word	0x08006acd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	7c12      	ldrb	r2, [r2, #16]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ea:	e091      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 facb 	bl	8006f8a <USBD_CtlError>
            err++;
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	3301      	adds	r3, #1
 80069f8:	72fb      	strb	r3, [r7, #11]
          break;
 80069fa:	e089      	b.n	8006b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1e:	e077      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fab1 	bl	8006f8a <USBD_CtlError>
            err++;
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2e:	e06f      	b.n	8006b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	7c12      	ldrb	r2, [r2, #16]
 8006a48:	f107 0108 	add.w	r1, r7, #8
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
 8006a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a52:	e05d      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa97 	bl	8006f8a <USBD_CtlError>
            err++;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	72fb      	strb	r3, [r7, #11]
          break;
 8006a62:	e055      	b.n	8006b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	7c12      	ldrb	r2, [r2, #16]
 8006a7c:	f107 0108 	add.w	r1, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a86:	e043      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa7d 	bl	8006f8a <USBD_CtlError>
            err++;
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	3301      	adds	r3, #1
 8006a94:	72fb      	strb	r3, [r7, #11]
          break;
 8006a96:	e03b      	b.n	8006b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	f107 0108 	add.w	r1, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aba:	e029      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa63 	bl	8006f8a <USBD_CtlError>
            err++;
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aca:	e021      	b.n	8006b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	7c12      	ldrb	r2, [r2, #16]
 8006ae4:	f107 0108 	add.w	r1, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aee:	e00f      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa49 	bl	8006f8a <USBD_CtlError>
            err++;
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	3301      	adds	r3, #1
 8006afc:	72fb      	strb	r3, [r7, #11]
          break;
 8006afe:	e007      	b.n	8006b10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa41 	bl	8006f8a <USBD_CtlError>
          err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b0e:	bf00      	nop
      }
      break;
 8006b10:	e037      	b.n	8006b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7c1b      	ldrb	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b22:	f107 0208 	add.w	r2, r7, #8
 8006b26:	4610      	mov	r0, r2
 8006b28:	4798      	blx	r3
 8006b2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b2c:	e029      	b.n	8006b82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fa2a 	bl	8006f8a <USBD_CtlError>
        err++;
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b3c:	e021      	b.n	8006b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	7c1b      	ldrb	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10d      	bne.n	8006b62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	f107 0208 	add.w	r2, r7, #8
 8006b52:	4610      	mov	r0, r2
 8006b54:	4798      	blx	r3
 8006b56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b60:	e00f      	b.n	8006b82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa10 	bl	8006f8a <USBD_CtlError>
        err++;
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b70:	e007      	b.n	8006b82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa08 	bl	8006f8a <USBD_CtlError>
      err++;
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b80:	bf00      	nop
  }

  if (err != 0U)
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d11e      	bne.n	8006bc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d016      	beq.n	8006bbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b90:	893b      	ldrh	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	88da      	ldrh	r2, [r3, #6]
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bf28      	it	cs
 8006ba0:	4613      	movcs	r3, r2
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ba6:	893b      	ldrh	r3, [r7, #8]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fa69 	bl	8007084 <USBD_CtlSendData>
 8006bb2:	e009      	b.n	8006bc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9e7 	bl	8006f8a <USBD_CtlError>
 8006bbc:	e004      	b.n	8006bc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 faba 	bl	8007138 <USBD_CtlSendStatus>
 8006bc4:	e000      	b.n	8006bc8 <USBD_GetDescriptor+0x2cc>
    return;
 8006bc6:	bf00      	nop
  }
}
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop

08006bd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	889b      	ldrh	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d131      	bne.n	8006c46 <USBD_SetAddress+0x76>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	88db      	ldrh	r3, [r3, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d12d      	bne.n	8006c46 <USBD_SetAddress+0x76>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	885b      	ldrh	r3, [r3, #2]
 8006bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf0:	d829      	bhi.n	8006c46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	885b      	ldrh	r3, [r3, #2]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d104      	bne.n	8006c14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f9bc 	bl	8006f8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c12:	e01d      	b.n	8006c50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 ff1d 	bl	8007a60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fa86 	bl	8007138 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3a:	e009      	b.n	8006c50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c44:	e004      	b.n	8006c50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f99e 	bl	8006f8a <USBD_CtlError>
  }
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	885b      	ldrh	r3, [r3, #2]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006c6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c70:	4b4d      	ldr	r3, [pc, #308]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d905      	bls.n	8006c84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f985 	bl	8006f8a <USBD_CtlError>
    return USBD_FAIL;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e08c      	b.n	8006d9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d002      	beq.n	8006c96 <USBD_SetConfig+0x3e>
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d029      	beq.n	8006ce8 <USBD_SetConfig+0x90>
 8006c94:	e075      	b.n	8006d82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c96:	4b44      	ldr	r3, [pc, #272]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d020      	beq.n	8006ce0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c9e:	4b42      	ldr	r3, [pc, #264]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fe ffe3 	bl	8005c7a <USBD_SetClassConfig>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d008      	beq.n	8006cd0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f962 	bl	8006f8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cce:	e065      	b.n	8006d9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa31 	bl	8007138 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2203      	movs	r2, #3
 8006cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cde:	e05d      	b.n	8006d9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa29 	bl	8007138 <USBD_CtlSendStatus>
      break;
 8006ce6:	e059      	b.n	8006d9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d112      	bne.n	8006d16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d02:	4b29      	ldr	r3, [pc, #164]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fe ffd2 	bl	8005cb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa12 	bl	8007138 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d14:	e042      	b.n	8006d9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d16:	4b24      	ldr	r3, [pc, #144]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d02a      	beq.n	8006d7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fe ffc0 	bl	8005cb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d32:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fe ff99 	bl	8005c7a <USBD_SetClassConfig>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00f      	beq.n	8006d72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f918 	bl	8006f8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fe ffa5 	bl	8005cb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d70:	e014      	b.n	8006d9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9e0 	bl	8007138 <USBD_CtlSendStatus>
      break;
 8006d78:	e010      	b.n	8006d9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f9dc 	bl	8007138 <USBD_CtlSendStatus>
      break;
 8006d80:	e00c      	b.n	8006d9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f900 	bl	8006f8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d8a:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <USBD_SetConfig+0x150>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fe ff8e 	bl	8005cb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d96:	2303      	movs	r3, #3
 8006d98:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9a:	bf00      	nop
  }

  return ret;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	2000075c 	.word	0x2000075c

08006dac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d004      	beq.n	8006dc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f8e2 	bl	8006f8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dc6:	e023      	b.n	8006e10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	dc02      	bgt.n	8006dda <USBD_GetConfig+0x2e>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dc03      	bgt.n	8006de0 <USBD_GetConfig+0x34>
 8006dd8:	e015      	b.n	8006e06 <USBD_GetConfig+0x5a>
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d00b      	beq.n	8006df6 <USBD_GetConfig+0x4a>
 8006dde:	e012      	b.n	8006e06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3308      	adds	r3, #8
 8006dea:	2201      	movs	r2, #1
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f948 	bl	8007084 <USBD_CtlSendData>
        break;
 8006df4:	e00c      	b.n	8006e10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f940 	bl	8007084 <USBD_CtlSendData>
        break;
 8006e04:	e004      	b.n	8006e10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8be 	bl	8006f8a <USBD_CtlError>
        break;
 8006e0e:	bf00      	nop
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d81e      	bhi.n	8006e6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	88db      	ldrh	r3, [r3, #6]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d004      	beq.n	8006e42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f8a5 	bl	8006f8a <USBD_CtlError>
        break;
 8006e40:	e01a      	b.n	8006e78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f043 0202 	orr.w	r2, r3, #2
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	330c      	adds	r3, #12
 8006e62:	2202      	movs	r2, #2
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f90c 	bl	8007084 <USBD_CtlSendData>
      break;
 8006e6c:	e004      	b.n	8006e78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f88a 	bl	8006f8a <USBD_CtlError>
      break;
 8006e76:	bf00      	nop
  }
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	885b      	ldrh	r3, [r3, #2]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d107      	bne.n	8006ea2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f94c 	bl	8007138 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ea0:	e013      	b.n	8006eca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d10b      	bne.n	8006ec2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f93c 	bl	8007138 <USBD_CtlSendStatus>
}
 8006ec0:	e003      	b.n	8006eca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f860 	bl	8006f8a <USBD_CtlError>
}
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d80b      	bhi.n	8006f02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	885b      	ldrh	r3, [r3, #2]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d10c      	bne.n	8006f0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f91c 	bl	8007138 <USBD_CtlSendStatus>
      }
      break;
 8006f00:	e004      	b.n	8006f0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f840 	bl	8006f8a <USBD_CtlError>
      break;
 8006f0a:	e000      	b.n	8006f0e <USBD_ClrFeature+0x3c>
      break;
 8006f0c:	bf00      	nop
  }
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fa40 	bl	80063c6 <SWAPBYTE>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fa33 	bl	80063c6 <SWAPBYTE>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fa26 	bl	80063c6 <SWAPBYTE>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	80da      	strh	r2, [r3, #6]
}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f94:	2180      	movs	r1, #128	@ 0x80
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fcf8 	bl	800798c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fcf4 	bl	800798c <USBD_LL_StallEP>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d042      	beq.n	8007048 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f000 f842 	bl	8007050 <USBD_GetLen>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	3301      	adds	r3, #1
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd6:	d808      	bhi.n	8006fea <USBD_GetString+0x3e>
 8006fd8:	6938      	ldr	r0, [r7, #16]
 8006fda:	f000 f839 	bl	8007050 <USBD_GetLen>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	e001      	b.n	8006fee <USBD_GetString+0x42>
 8006fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	3301      	adds	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	2203      	movs	r2, #3
 800700c:	701a      	strb	r2, [r3, #0]
  idx++;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	3301      	adds	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007014:	e013      	b.n	800703e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	4413      	add	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	3301      	adds	r3, #1
 8007026:	613b      	str	r3, [r7, #16]
    idx++;
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	3301      	adds	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	4413      	add	r3, r2
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
    idx++;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	3301      	adds	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e7      	bne.n	8007016 <USBD_GetString+0x6a>
 8007046:	e000      	b.n	800704a <USBD_GetString+0x9e>
    return;
 8007048:	bf00      	nop
  }
}
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007060:	e005      	b.n	800706e <USBD_GetLen+0x1e>
  {
    len++;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	3301      	adds	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	3301      	adds	r3, #1
 800706c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f5      	bne.n	8007062 <USBD_GetLen+0x12>
  }

  return len;
 8007076:	7bfb      	ldrb	r3, [r7, #15]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2202      	movs	r2, #2
 8007094:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	2100      	movs	r1, #0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fcf7 	bl	8007a9e <USBD_LL_Transmit>

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	2100      	movs	r1, #0
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fce6 	bl	8007a9e <USBD_LL_Transmit>

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2203      	movs	r2, #3
 80070ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	2100      	movs	r1, #0
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fcea 	bl	8007ae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fcd9 	bl	8007ae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2204      	movs	r2, #4
 8007144:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007148:	2300      	movs	r3, #0
 800714a:	2200      	movs	r2, #0
 800714c:	2100      	movs	r1, #0
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fca5 	bl	8007a9e <USBD_LL_Transmit>

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2205      	movs	r2, #5
 800716a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800716e:	2300      	movs	r3, #0
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fcb3 	bl	8007ae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007188:	2200      	movs	r2, #0
 800718a:	4912      	ldr	r1, [pc, #72]	@ (80071d4 <MX_USB_DEVICE_Init+0x50>)
 800718c:	4812      	ldr	r0, [pc, #72]	@ (80071d8 <MX_USB_DEVICE_Init+0x54>)
 800718e:	f7fe fcf7 	bl	8005b80 <USBD_Init>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007198:	f7f9 fad8 	bl	800074c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800719c:	490f      	ldr	r1, [pc, #60]	@ (80071dc <MX_USB_DEVICE_Init+0x58>)
 800719e:	480e      	ldr	r0, [pc, #56]	@ (80071d8 <MX_USB_DEVICE_Init+0x54>)
 80071a0:	f7fe fd1e 	bl	8005be0 <USBD_RegisterClass>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071aa:	f7f9 facf 	bl	800074c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071ae:	490c      	ldr	r1, [pc, #48]	@ (80071e0 <MX_USB_DEVICE_Init+0x5c>)
 80071b0:	4809      	ldr	r0, [pc, #36]	@ (80071d8 <MX_USB_DEVICE_Init+0x54>)
 80071b2:	f7fe fc15 	bl	80059e0 <USBD_CDC_RegisterInterface>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071bc:	f7f9 fac6 	bl	800074c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071c0:	4805      	ldr	r0, [pc, #20]	@ (80071d8 <MX_USB_DEVICE_Init+0x54>)
 80071c2:	f7fe fd43 	bl	8005c4c <USBD_Start>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071cc:	f7f9 fabe 	bl	800074c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071d0:	bf00      	nop
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	200000dc 	.word	0x200000dc
 80071d8:	20000760 	.word	0x20000760
 80071dc:	20000048 	.word	0x20000048
 80071e0:	200000c8 	.word	0x200000c8

080071e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80071e8:	2200      	movs	r2, #0
 80071ea:	4905      	ldr	r1, [pc, #20]	@ (8007200 <CDC_Init_FS+0x1c>)
 80071ec:	4805      	ldr	r0, [pc, #20]	@ (8007204 <CDC_Init_FS+0x20>)
 80071ee:	f7fe fc11 	bl	8005a14 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071f2:	4905      	ldr	r1, [pc, #20]	@ (8007208 <CDC_Init_FS+0x24>)
 80071f4:	4803      	ldr	r0, [pc, #12]	@ (8007204 <CDC_Init_FS+0x20>)
 80071f6:	f7fe fc2f 	bl	8005a58 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80071fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2000123c 	.word	0x2000123c
 8007204:	20000760 	.word	0x20000760
 8007208:	20000a3c 	.word	0x20000a3c

0800720c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007210:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007212:	4618      	mov	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
 8007228:	4613      	mov	r3, r2
 800722a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b23      	cmp	r3, #35	@ 0x23
 8007230:	d84a      	bhi.n	80072c8 <CDC_Control_FS+0xac>
 8007232:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <CDC_Control_FS+0x1c>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	080072c9 	.word	0x080072c9
 800723c:	080072c9 	.word	0x080072c9
 8007240:	080072c9 	.word	0x080072c9
 8007244:	080072c9 	.word	0x080072c9
 8007248:	080072c9 	.word	0x080072c9
 800724c:	080072c9 	.word	0x080072c9
 8007250:	080072c9 	.word	0x080072c9
 8007254:	080072c9 	.word	0x080072c9
 8007258:	080072c9 	.word	0x080072c9
 800725c:	080072c9 	.word	0x080072c9
 8007260:	080072c9 	.word	0x080072c9
 8007264:	080072c9 	.word	0x080072c9
 8007268:	080072c9 	.word	0x080072c9
 800726c:	080072c9 	.word	0x080072c9
 8007270:	080072c9 	.word	0x080072c9
 8007274:	080072c9 	.word	0x080072c9
 8007278:	080072c9 	.word	0x080072c9
 800727c:	080072c9 	.word	0x080072c9
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072c9 	.word	0x080072c9
 800728c:	080072c9 	.word	0x080072c9
 8007290:	080072c9 	.word	0x080072c9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072c9 	.word	0x080072c9
 800729c:	080072c9 	.word	0x080072c9
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072c9 	.word	0x080072c9
 80072b8:	080072c9 	.word	0x080072c9
 80072bc:	080072c9 	.word	0x080072c9
 80072c0:	080072c9 	.word	0x080072c9
 80072c4:	080072c9 	.word	0x080072c9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80072c8:	bf00      	nop
	}

	return (USBD_OK);
 80072ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SbW_Request_Received_CB(&S, Buf, (uint16_t) (*Len));
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4807      	ldr	r0, [pc, #28]	@ (800730c <CDC_Receive_FS+0x34>)
 80072ee:	f7fd fdc5 	bl	8004e7c <SbW_Request_Received_CB>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4806      	ldr	r0, [pc, #24]	@ (8007310 <CDC_Receive_FS+0x38>)
 80072f6:	f7fe fbaf 	bl	8005a58 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80072fa:	4805      	ldr	r0, [pc, #20]	@ (8007310 <CDC_Receive_FS+0x38>)
 80072fc:	f7fe fc0a 	bl	8005b14 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007300:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000000 	.word	0x20000000
 8007310:	20000760 	.word	0x20000760

08007314 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8007324:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <CDC_Transmit_FS+0x48>)
 8007326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800732a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8007336:	2301      	movs	r3, #1
 8007338:	e00b      	b.n	8007352 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800733a:	887b      	ldrh	r3, [r7, #2]
 800733c:	461a      	mov	r2, r3
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4806      	ldr	r0, [pc, #24]	@ (800735c <CDC_Transmit_FS+0x48>)
 8007342:	f7fe fb67 	bl	8005a14 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007346:	4805      	ldr	r0, [pc, #20]	@ (800735c <CDC_Transmit_FS+0x48>)
 8007348:	f7fe fba4 	bl	8005a94 <USBD_CDC_TransmitPacket>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000760 	.word	0x20000760

08007360 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	SbW_TxCPLt(&S);
 8007372:	4804      	ldr	r0, [pc, #16]	@ (8007384 <CDC_TransmitCplt_FS+0x24>)
 8007374:	f7fd ff29 	bl	80051ca <SbW_TxCPLt>
  /* USER CODE END 13 */
  return result;
 8007378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000000 	.word	0x20000000

08007388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2212      	movs	r2, #18
 8007398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800739a:	4b03      	ldr	r3, [pc, #12]	@ (80073a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	200000f8 	.word	0x200000f8

080073ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2204      	movs	r2, #4
 80073bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073be:	4b03      	ldr	r3, [pc, #12]	@ (80073cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	2000010c 	.word	0x2000010c

080073d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4907      	ldr	r1, [pc, #28]	@ (8007404 <USBD_FS_ProductStrDescriptor+0x34>)
 80073e6:	4808      	ldr	r0, [pc, #32]	@ (8007408 <USBD_FS_ProductStrDescriptor+0x38>)
 80073e8:	f7ff fde0 	bl	8006fac <USBD_GetString>
 80073ec:	e004      	b.n	80073f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <USBD_FS_ProductStrDescriptor+0x34>)
 80073f2:	4805      	ldr	r0, [pc, #20]	@ (8007408 <USBD_FS_ProductStrDescriptor+0x38>)
 80073f4:	f7ff fdda 	bl	8006fac <USBD_GetString>
  }
  return USBD_StrDesc;
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20001a3c 	.word	0x20001a3c
 8007408:	08007c5c 	.word	0x08007c5c

0800740c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	4904      	ldr	r1, [pc, #16]	@ (800742c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800741c:	4804      	ldr	r0, [pc, #16]	@ (8007430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800741e:	f7ff fdc5 	bl	8006fac <USBD_GetString>
  return USBD_StrDesc;
 8007422:	4b02      	ldr	r3, [pc, #8]	@ (800742c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20001a3c 	.word	0x20001a3c
 8007430:	08007c74 	.word	0x08007c74

08007434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	221a      	movs	r2, #26
 8007444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007446:	f000 f843 	bl	80074d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800744a:	4b02      	ldr	r3, [pc, #8]	@ (8007454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000110 	.word	0x20000110

08007458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4907      	ldr	r1, [pc, #28]	@ (800748c <USBD_FS_ConfigStrDescriptor+0x34>)
 800746e:	4808      	ldr	r0, [pc, #32]	@ (8007490 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007470:	f7ff fd9c 	bl	8006fac <USBD_GetString>
 8007474:	e004      	b.n	8007480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4904      	ldr	r1, [pc, #16]	@ (800748c <USBD_FS_ConfigStrDescriptor+0x34>)
 800747a:	4805      	ldr	r0, [pc, #20]	@ (8007490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800747c:	f7ff fd96 	bl	8006fac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20001a3c 	.word	0x20001a3c
 8007490:	08007c88 	.word	0x08007c88

08007494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4907      	ldr	r1, [pc, #28]	@ (80074c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074aa:	4808      	ldr	r0, [pc, #32]	@ (80074cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074ac:	f7ff fd7e 	bl	8006fac <USBD_GetString>
 80074b0:	e004      	b.n	80074bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4904      	ldr	r1, [pc, #16]	@ (80074c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074b6:	4805      	ldr	r0, [pc, #20]	@ (80074cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074b8:	f7ff fd78 	bl	8006fac <USBD_GetString>
  }
  return USBD_StrDesc;
 80074bc:	4b02      	ldr	r3, [pc, #8]	@ (80074c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20001a3c 	.word	0x20001a3c
 80074cc:	08007c94 	.word	0x08007c94

080074d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <Get_SerialNum+0x44>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <Get_SerialNum+0x48>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074e2:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <Get_SerialNum+0x4c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074f6:	2208      	movs	r2, #8
 80074f8:	4909      	ldr	r1, [pc, #36]	@ (8007520 <Get_SerialNum+0x50>)
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f814 	bl	8007528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007500:	2204      	movs	r2, #4
 8007502:	4908      	ldr	r1, [pc, #32]	@ (8007524 <Get_SerialNum+0x54>)
 8007504:	68b8      	ldr	r0, [r7, #8]
 8007506:	f000 f80f 	bl	8007528 <IntToUnicode>
  }
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	1fff7a10 	.word	0x1fff7a10
 8007518:	1fff7a14 	.word	0x1fff7a14
 800751c:	1fff7a18 	.word	0x1fff7a18
 8007520:	20000112 	.word	0x20000112
 8007524:	20000122 	.word	0x20000122

08007528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
 800753e:	e027      	b.n	8007590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	0f1b      	lsrs	r3, r3, #28
 8007544:	2b09      	cmp	r3, #9
 8007546:	d80b      	bhi.n	8007560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0f1b      	lsrs	r3, r3, #28
 800754c:	b2da      	uxtb	r2, r3
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4619      	mov	r1, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	440b      	add	r3, r1
 8007558:	3230      	adds	r2, #48	@ 0x30
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e00a      	b.n	8007576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	0f1b      	lsrs	r3, r3, #28
 8007564:	b2da      	uxtb	r2, r3
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4619      	mov	r1, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	440b      	add	r3, r1
 8007570:	3237      	adds	r2, #55	@ 0x37
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	3301      	adds	r3, #1
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4413      	add	r3, r2
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	3301      	adds	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
 8007590:	7dfa      	ldrb	r2, [r7, #23]
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d3d3      	bcc.n	8007540 <IntToUnicode+0x18>
  }
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	@ 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	609a      	str	r2, [r3, #8]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075c8:	d13a      	bne.n	8007640 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80075da:	4b1b      	ldr	r3, [pc, #108]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80075ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ec:	2302      	movs	r3, #2
 80075ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f4:	2303      	movs	r3, #3
 80075f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075f8:	230a      	movs	r3, #10
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	4619      	mov	r1, r3
 8007602:	4812      	ldr	r0, [pc, #72]	@ (800764c <HAL_PCD_MspInit+0xa4>)
 8007604:	f7f9 fbbc 	bl	8000d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007608:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800760a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760c:	4a0e      	ldr	r2, [pc, #56]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800760e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007612:	6353      	str	r3, [r2, #52]	@ 0x34
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800761a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761c:	4a0a      	ldr	r2, [pc, #40]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800761e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007622:	6453      	str	r3, [r2, #68]	@ 0x44
 8007624:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	2043      	movs	r0, #67	@ 0x43
 8007636:	f7f9 fb6c 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800763a:	2043      	movs	r0, #67	@ 0x43
 800763c:	f7f9 fb85 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007640:	bf00      	nop
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40023800 	.word	0x40023800
 800764c:	40020000 	.word	0x40020000

08007650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe fb3d 	bl	8005ce6 <USBD_LL_SetupStage>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	4619      	mov	r1, r3
 800769e:	f7fe fb77 	bl	8005d90 <USBD_LL_DataOutStage>
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	3320      	adds	r3, #32
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	4619      	mov	r1, r3
 80076d2:	f7fe fc10 	bl	8005ef6 <USBD_LL_DataInStage>
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fd4a 	bl	8006186 <USBD_LL_SOF>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	79db      	ldrb	r3, [r3, #7]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
 8007712:	e008      	b.n	8007726 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	79db      	ldrb	r3, [r3, #7]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d102      	bne.n	8007722 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e001      	b.n	8007726 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007722:	f7f9 f813 	bl	800074c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800772c:	7bfa      	ldrb	r2, [r7, #15]
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fce4 	bl	80060fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fc8c 	bl	800605a <USBD_LL_Reset>
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe fcdf 	bl	800611e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7adb      	ldrb	r3, [r3, #11]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007780:	4b04      	ldr	r3, [pc, #16]	@ (8007794 <HAL_PCD_SuspendCallback+0x48>)
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	4a03      	ldr	r2, [pc, #12]	@ (8007794 <HAL_PCD_SuspendCallback+0x48>)
 8007786:	f043 0306 	orr.w	r3, r3, #6
 800778a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	e000ed00 	.word	0xe000ed00

08007798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fcd5 	bl	8006156 <USBD_LL_Resume>
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fd2d 	bl	800622a <USBD_LL_IsoOUTIncomplete>
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077ea:	78fa      	ldrb	r2, [r7, #3]
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fce9 	bl	80061c6 <USBD_LL_IsoINIncomplete>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fd3f 	bl	800628e <USBD_LL_DevConnected>
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fd3c 	bl	80062a4 <USBD_LL_DevDisconnected>
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d13c      	bne.n	80078be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007844:	4a20      	ldr	r2, [pc, #128]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1e      	ldr	r2, [pc, #120]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007850:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007854:	4b1c      	ldr	r3, [pc, #112]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007856:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800785a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800785c:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <USBD_LL_Init+0x94>)
 800785e:	2204      	movs	r2, #4
 8007860:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007862:	4b19      	ldr	r3, [pc, #100]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007864:	2202      	movs	r2, #2
 8007866:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007868:	4b17      	ldr	r3, [pc, #92]	@ (80078c8 <USBD_LL_Init+0x94>)
 800786a:	2200      	movs	r2, #0
 800786c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800786e:	4b16      	ldr	r3, [pc, #88]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007870:	2202      	movs	r2, #2
 8007872:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007874:	4b14      	ldr	r3, [pc, #80]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007876:	2200      	movs	r2, #0
 8007878:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800787a:	4b13      	ldr	r3, [pc, #76]	@ (80078c8 <USBD_LL_Init+0x94>)
 800787c:	2200      	movs	r2, #0
 800787e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007880:	4b11      	ldr	r3, [pc, #68]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007882:	2200      	movs	r2, #0
 8007884:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007886:	4b10      	ldr	r3, [pc, #64]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007888:	2200      	movs	r2, #0
 800788a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800788c:	4b0e      	ldr	r3, [pc, #56]	@ (80078c8 <USBD_LL_Init+0x94>)
 800788e:	2200      	movs	r2, #0
 8007890:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007892:	480d      	ldr	r0, [pc, #52]	@ (80078c8 <USBD_LL_Init+0x94>)
 8007894:	f7f9 fc10 	bl	80010b8 <HAL_PCD_Init>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800789e:	f7f8 ff55 	bl	800074c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078a2:	2180      	movs	r1, #128	@ 0x80
 80078a4:	4808      	ldr	r0, [pc, #32]	@ (80078c8 <USBD_LL_Init+0x94>)
 80078a6:	f7fa fe3c 	bl	8002522 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078aa:	2240      	movs	r2, #64	@ 0x40
 80078ac:	2100      	movs	r1, #0
 80078ae:	4806      	ldr	r0, [pc, #24]	@ (80078c8 <USBD_LL_Init+0x94>)
 80078b0:	f7fa fdf0 	bl	8002494 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078b4:	2280      	movs	r2, #128	@ 0x80
 80078b6:	2101      	movs	r1, #1
 80078b8:	4803      	ldr	r0, [pc, #12]	@ (80078c8 <USBD_LL_Init+0x94>)
 80078ba:	f7fa fdeb 	bl	8002494 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20001c3c 	.word	0x20001c3c

080078cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7f9 fcf7 	bl	80012d6 <HAL_PCD_Start>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f942 	bl	8007b78 <USBD_Get_USB_Status>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	4608      	mov	r0, r1
 800790c:	4611      	mov	r1, r2
 800790e:	461a      	mov	r2, r3
 8007910:	4603      	mov	r3, r0
 8007912:	70fb      	strb	r3, [r7, #3]
 8007914:	460b      	mov	r3, r1
 8007916:	70bb      	strb	r3, [r7, #2]
 8007918:	4613      	mov	r3, r2
 800791a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800792a:	78bb      	ldrb	r3, [r7, #2]
 800792c:	883a      	ldrh	r2, [r7, #0]
 800792e:	78f9      	ldrb	r1, [r7, #3]
 8007930:	f7fa f9cb 	bl	8001cca <HAL_PCD_EP_Open>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f91c 	bl	8007b78 <USBD_Get_USB_Status>
 8007940:	4603      	mov	r3, r0
 8007942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007944:	7bbb      	ldrb	r3, [r7, #14]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f7fa fa16 	bl	8001d9e <HAL_PCD_EP_Close>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4618      	mov	r0, r3
 800797a:	f000 f8fd 	bl	8007b78 <USBD_Get_USB_Status>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007982:	7bbb      	ldrb	r3, [r7, #14]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fa face 	bl	8001f4c <HAL_PCD_EP_SetStall>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f8de 	bl	8007b78 <USBD_Get_USB_Status>
 80079bc:	4603      	mov	r3, r0
 80079be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fa fb12 	bl	8002012 <HAL_PCD_EP_ClrStall>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 f8bf 	bl	8007b78 <USBD_Get_USB_Status>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	da0b      	bge.n	8007a3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	440b      	add	r3, r1
 8007a36:	3316      	adds	r3, #22
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	e00b      	b.n	8007a54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	4613      	mov	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fa f8ff 	bl	8001c82 <HAL_PCD_SetAddress>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f874 	bl	8007b78 <USBD_Get_USB_Status>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007abc:	7af9      	ldrb	r1, [r7, #11]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	f7fa fa09 	bl	8001ed8 <HAL_PCD_EP_Transmit>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f853 	bl	8007b78 <USBD_Get_USB_Status>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ad6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	607a      	str	r2, [r7, #4]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	460b      	mov	r3, r1
 8007aee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007afe:	7af9      	ldrb	r1, [r7, #11]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	f7fa f995 	bl	8001e32 <HAL_PCD_EP_Receive>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 f832 	bl	8007b78 <USBD_Get_USB_Status>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b18:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fa f9b5 	bl	8001ea8 <HAL_PCD_EP_GetRxCount>
 8007b3e:	4603      	mov	r3, r0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b50:	4b03      	ldr	r3, [pc, #12]	@ (8007b60 <USBD_static_malloc+0x18>)
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	20002120 	.word	0x20002120

08007b64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]

}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d817      	bhi.n	8007bbc <USBD_Get_USB_Status+0x44>
 8007b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <USBD_Get_USB_Status+0x1c>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007ba5 	.word	0x08007ba5
 8007b98:	08007bab 	.word	0x08007bab
 8007b9c:	08007bb1 	.word	0x08007bb1
 8007ba0:	08007bb7 	.word	0x08007bb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba8:	e00b      	b.n	8007bc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007baa:	2303      	movs	r3, #3
 8007bac:	73fb      	strb	r3, [r7, #15]
    break;
 8007bae:	e008      	b.n	8007bc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e005      	b.n	8007bc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bba:	e002      	b.n	8007bc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	bf00      	nop
  }
  return usb_status;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <memset>:
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d100      	bne.n	8007bda <memset+0xa>
 8007bd8:	4770      	bx	lr
 8007bda:	f803 1b01 	strb.w	r1, [r3], #1
 8007bde:	e7f9      	b.n	8007bd4 <memset+0x4>

08007be0 <__libc_init_array>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	4d0d      	ldr	r5, [pc, #52]	@ (8007c18 <__libc_init_array+0x38>)
 8007be4:	4c0d      	ldr	r4, [pc, #52]	@ (8007c1c <__libc_init_array+0x3c>)
 8007be6:	1b64      	subs	r4, r4, r5
 8007be8:	10a4      	asrs	r4, r4, #2
 8007bea:	2600      	movs	r6, #0
 8007bec:	42a6      	cmp	r6, r4
 8007bee:	d109      	bne.n	8007c04 <__libc_init_array+0x24>
 8007bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8007c20 <__libc_init_array+0x40>)
 8007bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8007c24 <__libc_init_array+0x44>)
 8007bf4:	f000 f826 	bl	8007c44 <_init>
 8007bf8:	1b64      	subs	r4, r4, r5
 8007bfa:	10a4      	asrs	r4, r4, #2
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	42a6      	cmp	r6, r4
 8007c00:	d105      	bne.n	8007c0e <__libc_init_array+0x2e>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c08:	4798      	blx	r3
 8007c0a:	3601      	adds	r6, #1
 8007c0c:	e7ee      	b.n	8007bec <__libc_init_array+0xc>
 8007c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c12:	4798      	blx	r3
 8007c14:	3601      	adds	r6, #1
 8007c16:	e7f2      	b.n	8007bfe <__libc_init_array+0x1e>
 8007c18:	08007cbc 	.word	0x08007cbc
 8007c1c:	08007cbc 	.word	0x08007cbc
 8007c20:	08007cbc 	.word	0x08007cbc
 8007c24:	08007cc0 	.word	0x08007cc0

08007c28 <memcpy>:
 8007c28:	440a      	add	r2, r1
 8007c2a:	4291      	cmp	r1, r2
 8007c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c30:	d100      	bne.n	8007c34 <memcpy+0xc>
 8007c32:	4770      	bx	lr
 8007c34:	b510      	push	{r4, lr}
 8007c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c3e:	4291      	cmp	r1, r2
 8007c40:	d1f9      	bne.n	8007c36 <memcpy+0xe>
 8007c42:	bd10      	pop	{r4, pc}

08007c44 <_init>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr

08007c50 <_fini>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	bf00      	nop
 8007c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c56:	bc08      	pop	{r3}
 8007c58:	469e      	mov	lr, r3
 8007c5a:	4770      	bx	lr
