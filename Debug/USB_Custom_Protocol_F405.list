
USB_Custom_Protocol_F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007b98  08007b98  00008b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf0  08007bf0  0000912c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf8  08007bf8  0000912c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08007c00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000912c  2**0
                  CONTENTS
 10 .bss          00002214  2000012c  2000012c  0000912c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002340  20002340  0000912c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013925  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003585  00000000  00000000  0001ca81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00020008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d28  00000000  00000000  00021168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fbc  00000000  00000000  00021e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179c0  00000000  00000000  00043e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f41  00000000  00000000  0005b80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d74d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047c0  00000000  00000000  0011d790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00121f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b80 	.word	0x08007b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	08007b80 	.word	0x08007b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SbW_Protocol_Reply>:
uint8_t TxBuffer[TxRxBufferSize];
uint8_t RxBuffer[TxRxBufferSize];

extern DataFrame F;

void SbW_Protocol_Reply(uint8_t *data, uint16_t len) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(data, len);
 8000500:	887b      	ldrh	r3, [r7, #2]
 8000502:	4619      	mov	r1, r3
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f006 fea3 	bl	8007250 <CDC_Transmit_FS>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <App_User_Callback>:

void App_User_Callback(SbW_Err_Codes_t Error_Code) {
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	71fb      	strb	r3, [r7, #7]
	// Implement error handling if needed
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	F.G[0]++;
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000532:	7d1b      	ldrb	r3, [r3, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b03      	ldr	r3, [pc, #12]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800053a:	751a      	strb	r2, [r3, #20]
	//SbW_Timer_Callback(&S);
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	20000290 	.word	0x20000290

0800054c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000550:	f000 fa2e 	bl	80009b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000554:	f000 f812 	bl	800057c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000558:	f000 f8cc 	bl	80006f4 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 800055c:	f006 fdb0 	bl	80070c0 <MX_USB_DEVICE_Init>
	MX_TIM1_Init();
 8000560:	f000 f878 	bl	8000654 <MX_TIM1_Init>

	 // Initialize the FIFO before using*/
	//fifo_init(&S.MessageFifo);

	// Simulate periodic callback that queues the frame
	SbW_Init(&S);
 8000564:	4803      	ldr	r0, [pc, #12]	@ (8000574 <main+0x28>)
 8000566:	f004 fc2d 	bl	8004dc4 <SbW_Init>
	HAL_TIM_Base_Start_IT(&htim1);
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <main+0x2c>)
 800056c:	f002 fc9c 	bl	8002ea8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <main+0x24>
 8000574:	20000000 	.word	0x20000000
 8000578:	20000248 	.word	0x20000248

0800057c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	@ 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fabe 	bl	8007b0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b29      	ldr	r3, [pc, #164]	@ (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	@ (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	@ (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <SystemClock_Config+0xd4>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80005f0:	23a8      	movs	r3, #168	@ 0xa8
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 ff6b 	bl	80024dc <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
		Error_Handler();
 800060c:	f000 f89a 	bl	8000744 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f9cc 	bl	80029cc <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
		Error_Handler();
 800063a:	f000 f883 	bl	8000744 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 800063e:	f002 faab 	bl	8002b98 <HAL_RCC_EnableCSS>
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	@ 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <MX_TIM1_Init+0x98>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <MX_TIM1_Init+0x9c>)
 8000674:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 83;
 8000676:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <MX_TIM1_Init+0x98>)
 8000678:	2253      	movs	r2, #83	@ 0x53
 800067a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <MX_TIM1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_TIM1_Init+0x98>)
 8000684:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000688:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_TIM1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <MX_TIM1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_TIM1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800069c:	4813      	ldr	r0, [pc, #76]	@ (80006ec <MX_TIM1_Init+0x98>)
 800069e:	f002 fbb4 	bl	8002e0a <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x58>
		Error_Handler();
 80006a8:	f000 f84c 	bl	8000744 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <MX_TIM1_Init+0x98>)
 80006ba:	f002 fd55 	bl	8003168 <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x74>
		Error_Handler();
 80006c4:	f000 f83e 	bl	8000744 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_TIM1_Init+0x98>)
 80006d6:	f002 ff7d 	bl	80035d4 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80006e0:	f000 f830 	bl	8000744 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000248 	.word	0x20000248
 80006f0:	40010000 	.word	0x40010000

080006f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <MX_GPIO_Init+0x4c>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <MX_GPIO_Init+0x4c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <MX_GPIO_Init+0x4c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_TIM_Base_MspInit+0x48>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d115      	bne.n	80007de <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HAL_TIM_Base_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <HAL_TIM_Base_MspInit+0x4c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_TIM_Base_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2019      	movs	r0, #25
 80007d4:	f000 fa5d 	bl	8000c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007d8:	2019      	movs	r0, #25
 80007da:	f000 fa76 	bl	8000cca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40010000 	.word	0x40010000
 80007ec:	40023800 	.word	0x40023800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007f4:	f002 faee 	bl	8002dd4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <NMI_Handler+0x8>

080007fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <MemManage_Handler+0x4>

0800080c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <UsageFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084a:	f000 f903 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000858:	4802      	ldr	r0, [pc, #8]	@ (8000864 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800085a:	f002 fb95 	bl	8002f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000248 	.word	0x20000248

08000868 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800086c:	4802      	ldr	r0, [pc, #8]	@ (8000878 <OTG_FS_IRQHandler+0x10>)
 800086e:	f000 fd27 	bl	80012c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001c3c 	.word	0x20001c3c

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f007 f925 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d2:	f7ff fe3b 	bl	800054c <main>
  bx  lr    
 80008d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80008e4:	08007c00 	.word	0x08007c00
  ldr r2, =_sbss
 80008e8:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80008ec:	20002340 	.word	0x20002340

080008f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>

080008f2 <fifo_init>:
#include "FIFO.h"

// Initialize the FIFO
void fifo_init(fifo_T *f) {
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	f->head = f->UserHead = -1; // Outside the buffer
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000900:	811a      	strh	r2, [r3, #8]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	801a      	strh	r2, [r3, #0]
	f->tail = f->UserTail = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	815a      	strh	r2, [r3, #10]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	805a      	strh	r2, [r3, #2]
	f->count = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	809a      	strh	r2, [r3, #4]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <fifo_is_empty>:

// Check if the FIFO is empty
int8_t fifo_is_empty(const fifo_T *f) {
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	return (f->count == 0);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	889b      	ldrh	r3, [r3, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf0c      	ite	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	2300      	movne	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	b25b      	sxtb	r3, r3
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <fifo_dequeue>:
	}
	return f->UserHead;
}

// Dequeue data from the FIFO
int16_t fifo_dequeue(fifo_T *f) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(f)) {
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffe7 	bl	800092e <fifo_is_empty>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d119      	bne.n	800099a <fifo_dequeue+0x48>
		f->UserTail = f->tail;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	815a      	strh	r2, [r3, #10]
		f->count--;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	809a      	strh	r2, [r3, #4]
		f->tail = (f->tail + 1) % f->Fifo_Size; // Circular wrap-around
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000982:	3301      	adds	r3, #1
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	88d2      	ldrh	r2, [r2, #6]
 8000988:	fb93 f1f2 	sdiv	r1, r3, r2
 800098c:	fb01 f202 	mul.w	r2, r1, r2
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	b21a      	sxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	805a      	strh	r2, [r3, #2]
 8000998:	e003      	b.n	80009a2 <fifo_dequeue+0x50>
	} else {
		f->UserTail = -1; // FIFO is empty
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a0:	815a      	strh	r2, [r3, #10]
	}
	return f->UserTail;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <HAL_Init+0x40>)
 80009ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_Init+0x40>)
 80009c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x40>)
 80009d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f94f 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff feb4 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023c00 	.word	0x40023c00

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f967 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 f92f 	bl	8000c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000030 	.word	0x20000030
 8000a4c:	20000038 	.word	0x20000038
 8000a50:	20000034 	.word	0x20000034

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000038 	.word	0x20000038
 8000a78:	20000758 	.word	0x20000758

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000758 	.word	0x20000758

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff ffee 	bl	8000a7c <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffde 	bl	8000a7c <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000038 	.word	0x20000038

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4907      	ldr	r1, [pc, #28]	@ (8000b78 <__NVIC_EnableIRQ+0x38>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	@ (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	@ 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	@ 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f7ff ff8e 	bl	8000b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff29 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff3e 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff8e 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5d 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff31 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffa2 	bl	8000c38 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e16b      	b.n	8000ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 815a 	bne.w	8000fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80b4 	beq.w	8000fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b60      	ldr	r3, [pc, #384]	@ (800100c <HAL_GPIO_Init+0x30c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800100c <HAL_GPIO_Init+0x30c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b5d      	ldr	r3, [pc, #372]	@ (800100c <HAL_GPIO_Init+0x30c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8001010 <HAL_GPIO_Init+0x310>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a52      	ldr	r2, [pc, #328]	@ (8001014 <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d02b      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a51      	ldr	r2, [pc, #324]	@ (8001018 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d025      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a50      	ldr	r2, [pc, #320]	@ (800101c <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01f      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8001020 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8001024 <HAL_GPIO_Init+0x324>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x216>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8001028 <HAL_GPIO_Init+0x328>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x212>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <HAL_GPIO_Init+0x32c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	@ (8001030 <HAL_GPIO_Init+0x330>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x20a>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00e      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e00c      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00a      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	@ (8001010 <HAL_GPIO_Init+0x310>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a32      	ldr	r2, [pc, #200]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <HAL_GPIO_Init+0x334>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f ae90 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	@ 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40021400 	.word	0x40021400
 800102c:	40021800 	.word	0x40021800
 8001030:	40021c00 	.word	0x40021c00
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e101      	b.n	800124e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d106      	bne.n	800106a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f006 fa3d 	bl	80074e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2203      	movs	r2, #3
 800106e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001078:	d102      	bne.n	8001080 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fc4c 	bl	8003922 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7c1a      	ldrb	r2, [r3, #16]
 8001092:	f88d 2000 	strb.w	r2, [sp]
 8001096:	3304      	adds	r3, #4
 8001098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109a:	f002 fb2b 	bl	80036f4 <USB_CoreInit>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2202      	movs	r2, #2
 80010a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0ce      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fc44 	bl	8003944 <USB_SetCurrentMode>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2202      	movs	r2, #2
 80010c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e0bf      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e04a      	b.n	800116a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3315      	adds	r3, #21
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	3314      	adds	r3, #20
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	b298      	uxth	r0, r3
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	332e      	adds	r3, #46	@ 0x2e
 8001110:	4602      	mov	r2, r0
 8001112:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3318      	adds	r3, #24
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	331c      	adds	r3, #28
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3320      	adds	r3, #32
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3324      	adds	r3, #36	@ 0x24
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	3301      	adds	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	429a      	cmp	r2, r3
 8001172:	d3af      	bcc.n	80010d4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e044      	b.n	8001204 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	3301      	adds	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3b5      	bcc.n	800117a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7c1a      	ldrb	r2, [r3, #16]
 8001216:	f88d 2000 	strb.w	r2, [sp]
 800121a:	3304      	adds	r3, #4
 800121c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121e:	f002 fbdd 	bl	80039dc <USB_DevInit>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e00c      	b.n	800124e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fc27 	bl	8004a9a <USB_DevDisconnect>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_PCD_Start+0x1c>
 800126e:	2302      	movs	r3, #2
 8001270:	e022      	b.n	80012b8 <HAL_PCD_Start+0x62>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800128a:	2b01      	cmp	r3, #1
 800128c:	d105      	bne.n	800129a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001292:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fb2e 	bl	8003900 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fbd5 	bl	8004a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b08d      	sub	sp, #52	@ 0x34
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fc93 	bl	8004c02 <USB_GetMode>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 848c 	bne.w	8001bfc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fbf7 	bl	8004adc <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8482 	beq.w	8001bfa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fbe4 	bl	8004adc <USB_ReadInterrupts>
 8001314:	4603      	mov	r3, r0
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b02      	cmp	r3, #2
 800131c:	d107      	bne.n	800132e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f002 0202 	and.w	r2, r2, #2
 800132c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fbd2 	bl	8004adc <USB_ReadInterrupts>
 8001338:	4603      	mov	r3, r0
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b10      	cmp	r3, #16
 8001340:	d161      	bne.n	8001406 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0210 	bic.w	r2, r2, #16
 8001350:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f003 020f 	and.w	r2, r3, #15
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	3304      	adds	r3, #4
 8001370:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001378:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800137c:	d124      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d035      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001398:	b29b      	uxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	6a38      	ldr	r0, [r7, #32]
 800139e:	f003 fa09 	bl	80047b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	441a      	add	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c0:	441a      	add	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	e016      	b.n	80013f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80013d2:	d110      	bne.n	80013f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013da:	2208      	movs	r2, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	6a38      	ldr	r0, [r7, #32]
 80013e0:	f003 f9e8 	bl	80047b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f0:	441a      	add	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0210 	orr.w	r2, r2, #16
 8001404:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fb66 	bl	8004adc <USB_ReadInterrupts>
 8001410:	4603      	mov	r3, r0
 8001412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001416:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800141a:	f040 80a7 	bne.w	800156c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fb6b 	bl	8004b02 <USB_ReadDevAllOutEpInterrupt>
 800142c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800142e:	e099      	b.n	8001564 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 808e 	beq.w	8001558 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fb8f 	bl	8004b6a <USB_ReadDevOutEPInterrupt>
 800144c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00c      	beq.n	8001472 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	4413      	add	r3, r2
 8001460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001464:	461a      	mov	r2, r3
 8001466:	2301      	movs	r3, #1
 8001468:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800146a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fea3 	bl	80021b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00c      	beq.n	8001496 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001488:	461a      	mov	r2, r3
 800148a:	2308      	movs	r3, #8
 800148c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800148e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 ff79 	bl	8002388 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	015a      	lsls	r2, r3, #5
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ac:	461a      	mov	r2, r3
 80014ae:	2310      	movs	r3, #16
 80014b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d030      	beq.n	800151e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c4:	2b80      	cmp	r3, #128	@ 0x80
 80014c6:	d109      	bne.n	80014dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	3304      	adds	r3, #4
 80014f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	78db      	ldrb	r3, [r3, #3]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d108      	bne.n	800150c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2200      	movs	r2, #0
 80014fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f006 f8f2 	bl	80076f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001518:	461a      	mov	r2, r3
 800151a:	2302      	movs	r3, #2
 800151c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001534:	461a      	mov	r2, r3
 8001536:	2320      	movs	r3, #32
 8001538:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	015a      	lsls	r2, r3, #5
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001550:	461a      	mov	r2, r3
 8001552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001556:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	3301      	adds	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800155e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001566:	2b00      	cmp	r3, #0
 8001568:	f47f af62 	bne.w	8001430 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fab3 	bl	8004adc <USB_ReadInterrupts>
 8001576:	4603      	mov	r3, r0
 8001578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001580:	f040 80db 	bne.w	800173a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fad4 	bl	8004b36 <USB_ReadDevAllInEpInterrupt>
 800158e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001594:	e0cd      	b.n	8001732 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80c2 	beq.w	8001726 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fafa 	bl	8004ba6 <USB_ReadDevInEPInterrupt>
 80015b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d057      	beq.n	800166e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	2201      	movs	r2, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69f9      	ldr	r1, [r7, #28]
 80015da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015de:	4013      	ands	r3, r2
 80015e0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2301      	movs	r3, #1
 80015f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	799b      	ldrb	r3, [r3, #6]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d132      	bne.n	8001662 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3320      	adds	r3, #32
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4403      	add	r3, r0
 800161c:	331c      	adds	r3, #28
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4419      	add	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4403      	add	r3, r0
 8001630:	3320      	adds	r3, #32
 8001632:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	2b00      	cmp	r3, #0
 8001638:	d113      	bne.n	8001662 <HAL_PCD_IRQHandler+0x3a2>
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	3324      	adds	r3, #36	@ 0x24
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800165a:	461a      	mov	r2, r3
 800165c:	2101      	movs	r1, #1
 800165e:	f003 fb01 	bl	8004c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f005 ffbc 	bl	80075e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001684:	461a      	mov	r2, r3
 8001686:	2308      	movs	r3, #8
 8001688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016a0:	461a      	mov	r2, r3
 80016a2:	2310      	movs	r3, #16
 80016a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016bc:	461a      	mov	r2, r3
 80016be:	2340      	movs	r3, #64	@ 0x40
 80016c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016ce:	6a38      	ldr	r0, [r7, #32]
 80016d0:	f002 fae8 	bl	8003ca4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	3310      	adds	r3, #16
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	78db      	ldrb	r3, [r3, #3]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d108      	bne.n	8001702 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2200      	movs	r2, #0
 80016f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f006 f809 	bl	8007714 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	015a      	lsls	r2, r3, #5
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800170e:	461a      	mov	r2, r3
 8001710:	2302      	movs	r3, #2
 8001712:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800171e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fcbd 	bl	80020a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800172c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f af2e 	bne.w	8001596 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f003 f9cc 	bl	8004adc <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800174a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800174e:	d122      	bne.n	8001796 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001776:	2100      	movs	r1, #0
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fea3 	bl	80024c4 <HAL_PCDEx_LPM_Callback>
 800177e:	e002      	b.n	8001786 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f005 ffa7 	bl	80076d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f99e 	bl	8004adc <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017aa:	d112      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d102      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f005 ff63 	bl	8007688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017d0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 f980 	bl	8004adc <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e6:	f040 80b7 	bne.w	8001958 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2110      	movs	r1, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fa4d 	bl	8003ca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800180e:	e046      	b.n	800189e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800181c:	461a      	mov	r2, r3
 800181e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001822:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001834:	0151      	lsls	r1, r2, #5
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	440a      	add	r2, r1
 800183a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800183e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001850:	461a      	mov	r2, r3
 8001852:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001856:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001868:	0151      	lsls	r1, r2, #5
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	440a      	add	r2, r1
 800186e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001872:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	015a      	lsls	r2, r3, #5
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001888:	0151      	lsls	r1, r2, #5
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	440a      	add	r2, r1
 800188e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001892:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001896:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189a:	3301      	adds	r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	791b      	ldrb	r3, [r3, #4]
 80018a2:	461a      	mov	r2, r3
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d3b2      	bcc.n	8001810 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80018bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7bdb      	ldrb	r3, [r3, #15]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d016      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d6:	f043 030b 	orr.w	r3, r3, #11
 80018da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ec:	f043 030b 	orr.w	r3, r3, #11
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	e015      	b.n	8001920 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001902:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001906:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800190a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800191a:	f043 030b 	orr.w	r3, r3, #11
 800191e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800192e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001932:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001942:	461a      	mov	r2, r3
 8001944:	f003 f98e 	bl	8004c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f8bd 	bl	8004adc <USB_ReadInterrupts>
 8001962:	4603      	mov	r3, r0
 8001964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800196c:	d123      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f953 	bl	8004c1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fa0a 	bl	8003d96 <USB_GetDevSpeed>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681c      	ldr	r4, [r3, #0]
 800198e:	f001 fa15 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8001992:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001998:	461a      	mov	r2, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f001 ff0e 	bl	80037bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f005 fe48 	bl	8007636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695a      	ldr	r2, [r3, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80019b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 f88e 	bl	8004adc <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d10a      	bne.n	80019e0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f005 fe25 	bl	800761a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f002 0208 	and.w	r2, r2, #8
 80019de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 f879 	bl	8004adc <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f0:	2b80      	cmp	r3, #128	@ 0x80
 80019f2:	d123      	bne.n	8001a3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a00:	2301      	movs	r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a04:	e014      	b.n	8001a30 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fb0a 	bl	800203e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	461a      	mov	r2, r3
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d3e4      	bcc.n	8001a06 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 f84b 	bl	8004adc <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a50:	d13c      	bne.n	8001acc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a56:	e02b      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	3318      	adds	r3, #24
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d115      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da12      	bge.n	8001aaa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3317      	adds	r3, #23
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 faca 	bl	800203e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d3cd      	bcc.n	8001a58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 f803 	bl	8004adc <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ae0:	d156      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae6:	e045      	b.n	8001b74 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d12e      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da2b      	bge.n	8001b6e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d121      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6a:	6053      	str	r3, [r2, #4]
            break;
 8001b6c:	e008      	b.n	8001b80 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	3301      	adds	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	791b      	ldrb	r3, [r3, #4]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d3b3      	bcc.n	8001ae8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 ffa1 	bl	8004adc <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba4:	d10a      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f005 fdc6 	bl	8007738 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 ff8b 	bl	8004adc <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d115      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f005 fdb6 	bl	8007754 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	e000      	b.n	8001bfc <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bfa:	bf00      	nop
    }
  }
}
 8001bfc:	3734      	adds	r7, #52	@ 0x34
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}

08001c02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_PCD_SetAddress+0x1a>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e012      	b.n	8001c42 <HAL_PCD_SetAddress+0x40>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 feea 	bl	8004a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	4608      	mov	r0, r1
 8001c54:	4611      	mov	r1, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	4603      	mov	r3, r0
 8001c5a:	70fb      	strb	r3, [r7, #3]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	803b      	strh	r3, [r7, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da0f      	bge.n	8001c90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 020f 	and.w	r2, r3, #15
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3310      	adds	r3, #16
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	3304      	adds	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	705a      	strb	r2, [r3, #1]
 8001c8e:	e00f      	b.n	8001cb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 020f 	and.w	r2, r3, #15
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001cbc:	883b      	ldrh	r3, [r7, #0]
 8001cbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	78ba      	ldrb	r2, [r7, #2]
 8001cca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cde:	78bb      	ldrb	r3, [r7, #2]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d102      	bne.n	8001cea <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_EP_Open+0xae>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e00e      	b.n	8001d16 <HAL_PCD_EP_Open+0xcc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68f9      	ldr	r1, [r7, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 f86a 	bl	8003de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da0f      	bge.n	8001d52 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3310      	adds	r3, #16
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	705a      	strb	r2, [r3, #1]
 8001d50:	e00f      	b.n	8001d72 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 020f 	and.w	r2, r3, #15
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_PCD_EP_Close+0x6e>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e00e      	b.n	8001daa <HAL_PCD_EP_Close+0x8c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 f8a8 	bl	8003ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	799b      	ldrb	r3, [r3, #6]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	799b      	ldrb	r3, [r3, #6]
 8001e16:	461a      	mov	r2, r3
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	f002 f945 	bl	80040a8 <USB_EPStartXfer>

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	460b      	mov	r3, r1
 8001e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3310      	adds	r3, #16
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2201      	movs	r2, #1
 8001e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	799b      	ldrb	r3, [r3, #6]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	799b      	ldrb	r3, [r3, #6]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	6979      	ldr	r1, [r7, #20]
 8001ebe:	f002 f8f3 	bl	80040a8 <USB_EPStartXfer>

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	7912      	ldrb	r2, [r2, #4]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e04f      	b.n	8001f8a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3310      	adds	r3, #16
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00d      	b.n	8001f2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_EP_SetStall+0x82>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e01d      	b.n	8001f8a <HAL_PCD_EP_SetStall+0xbe>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 fc81 	bl	8004864 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7999      	ldrb	r1, [r3, #6]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f002 fe72 	bl	8004c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	7912      	ldrb	r2, [r2, #4]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e042      	b.n	8002036 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da0f      	bge.n	8001fd8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 020f 	and.w	r2, r3, #15
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3310      	adds	r3, #16
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	705a      	strb	r2, [r3, #1]
 8001fd6:	e00f      	b.n	8001ff8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_PCD_EP_ClrStall+0x86>
 8002014:	2302      	movs	r3, #2
 8002016:	e00e      	b.n	8002036 <HAL_PCD_EP_ClrStall+0xa4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fc8a 	bl	8004940 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800204a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	da0c      	bge.n	800206c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	3310      	adds	r3, #16
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e00c      	b.n	8002086 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	f002 faa9 	bl	80045e4 <USB_EPStopXfer>
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002096:	7afb      	ldrb	r3, [r7, #11]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	@ 0x28
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	3310      	adds	r3, #16
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d901      	bls.n	80020d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e06b      	b.n	80021b0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d902      	bls.n	80020f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	3303      	adds	r3, #3
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fc:	e02a      	b.n	8002154 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	d902      	bls.n	800211a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3303      	adds	r3, #3
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4603      	mov	r3, r0
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f002 fafe 	bl	8004738 <USB_WritePacket>

    ep->xfer_buff  += len;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	441a      	add	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	441a      	add	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	429a      	cmp	r2, r3
 8002168:	d809      	bhi.n	800217e <PCD_WriteEmptyTxFifo+0xde>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002172:	429a      	cmp	r2, r3
 8002174:	d203      	bcs.n	800217e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1bf      	bne.n	80020fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	429a      	cmp	r2, r3
 8002188:	d811      	bhi.n	80021ae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2201      	movs	r2, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800219e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	6939      	ldr	r1, [r7, #16]
 80021a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021aa:	4013      	ands	r3, r2
 80021ac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	333c      	adds	r3, #60	@ 0x3c
 80021d0:	3304      	adds	r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	799b      	ldrb	r3, [r3, #6]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d17b      	bne.n	80022e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4a61      	ldr	r2, [pc, #388]	@ (8002380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f240 80b9 	bls.w	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80b3 	beq.w	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800221a:	461a      	mov	r2, r3
 800221c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002220:	6093      	str	r3, [r2, #8]
 8002222:	e0a7      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	2320      	movs	r3, #32
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e098      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 8093 	bne.w	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a4b      	ldr	r2, [pc, #300]	@ (8002380 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d90f      	bls.n	8002276 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	e07e      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	3304      	adds	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	440b      	add	r3, r1
 8002298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	1ad2      	subs	r2, r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d114      	bne.n	80022d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022c0:	461a      	mov	r2, r3
 80022c2:	2101      	movs	r1, #1
 80022c4:	f002 fcce 	bl	8004c64 <USB_EP0_OutStart>
 80022c8:	e006      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	441a      	add	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f005 f966 	bl	80075b0 <HAL_PCD_DataOutStageCallback>
 80022e4:	e046      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	4a26      	ldr	r2, [pc, #152]	@ (8002384 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d124      	bne.n	8002338 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	e032      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	2320      	movs	r3, #32
 8002328:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f005 f93d 	bl	80075b0 <HAL_PCD_DataOutStageCallback>
 8002336:	e01d      	b.n	8002374 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d114      	bne.n	8002368 <PCD_EP_OutXfrComplete_int+0x1b0>
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002360:	461a      	mov	r2, r3
 8002362:	2100      	movs	r1, #0
 8002364:	f002 fc7e 	bl	8004c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f005 f91e 	bl	80075b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	4f54300a 	.word	0x4f54300a
 8002384:	4f54310a 	.word	0x4f54310a

08002388 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	333c      	adds	r3, #60	@ 0x3c
 80023a0:	3304      	adds	r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a15      	ldr	r2, [pc, #84]	@ (8002410 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d90e      	bls.n	80023dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d4:	461a      	mov	r2, r3
 80023d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 f8d5 	bl	800758c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <PCD_EP_OutSetupPacket_int+0x88>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d90c      	bls.n	8002404 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	799b      	ldrb	r3, [r3, #6]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023fc:	461a      	mov	r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	f002 fc30 	bl	8004c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	4f54300a 	.word	0x4f54300a

08002414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
 8002420:	4613      	mov	r3, r2
 8002422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002432:	883b      	ldrh	r3, [r7, #0]
 8002434:	0419      	lsls	r1, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	430a      	orrs	r2, r1
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002440:	e028      	b.n	8002494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e00d      	b.n	8002472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3340      	adds	r3, #64	@ 0x40
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4413      	add	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	3301      	adds	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	3b01      	subs	r3, #1
 8002478:	429a      	cmp	r2, r3
 800247a:	d3ec      	bcc.n	8002456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800247c:	883b      	ldrh	r3, [r7, #0]
 800247e:	0418      	lsls	r0, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	3b01      	subs	r3, #1
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	4302      	orrs	r2, r0
 800248c:	3340      	adds	r3, #64	@ 0x40
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e267      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024fa:	4b88      	ldr	r3, [pc, #544]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b85      	ldr	r3, [pc, #532]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800250e:	2b08      	cmp	r3, #8
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b82      	ldr	r3, [pc, #520]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b7e      	ldr	r3, [pc, #504]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e242      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b76      	ldr	r3, [pc, #472]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a75      	ldr	r2, [pc, #468]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b70      	ldr	r3, [pc, #448]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6f      	ldr	r2, [pc, #444]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6d      	ldr	r3, [pc, #436]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6c      	ldr	r2, [pc, #432]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b69      	ldr	r3, [pc, #420]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a68      	ldr	r2, [pc, #416]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b66      	ldr	r3, [pc, #408]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fa72 	bl	8000a7c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fa6e 	bl	8000a7c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e207      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b5b      	ldr	r3, [pc, #364]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fa5e 	bl	8000a7c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fa5a 	bl	8000a7c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1f3      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b51      	ldr	r3, [pc, #324]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025f2:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b44      	ldr	r3, [pc, #272]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b41      	ldr	r3, [pc, #260]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1c7      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4937      	ldr	r1, [pc, #220]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fa13 	bl	8000a7c <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fa0f 	bl	8000a7c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1a8      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b28      	ldr	r3, [pc, #160]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4925      	ldr	r1, [pc, #148]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe f9f2 	bl	8000a7c <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe f9ee 	bl	8000a7c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e187      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d036      	beq.n	8002734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_RCC_OscConfig+0x248>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe f9d2 	bl	8000a7c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe f9ce 	bl	8000a7c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e167      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026fa:	e01b      	b.n	8002734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_RCC_OscConfig+0x248>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe f9bb 	bl	8000a7c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e00e      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe f9b7 	bl	8000a7c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d907      	bls.n	8002728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e150      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
 800271c:	40023800 	.word	0x40023800
 8002720:	42470000 	.word	0x42470000
 8002724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	4b88      	ldr	r3, [pc, #544]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ea      	bne.n	800270a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8097 	beq.w	8002870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b7d      	ldr	r3, [pc, #500]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4a7c      	ldr	r2, [pc, #496]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	@ 0x40
 8002762:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b77      	ldr	r3, [pc, #476]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277e:	4b74      	ldr	r3, [pc, #464]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a73      	ldr	r2, [pc, #460]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7fe f977 	bl	8000a7c <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7fe f973 	bl	8000a7c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e10c      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2ea>
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a63      	ldr	r2, [pc, #396]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c4:	e01c      	b.n	8002800 <HAL_RCC_OscConfig+0x324>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x30c>
 80027ce:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a5e      	ldr	r2, [pc, #376]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027da:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0x324>
 80027e8:	4b58      	ldr	r3, [pc, #352]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a57      	ldr	r2, [pc, #348]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	4b55      	ldr	r3, [pc, #340]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a54      	ldr	r2, [pc, #336]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe f938 	bl	8000a7c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe f934 	bl	8000a7c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0cb      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	4b49      	ldr	r3, [pc, #292]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ee      	beq.n	8002810 <HAL_RCC_OscConfig+0x334>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fe f922 	bl	8000a7c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe f91e 	bl	8000a7c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0b5      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	4b3e      	ldr	r3, [pc, #248]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ee      	bne.n	800283c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	4a38      	ldr	r2, [pc, #224]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a1 	beq.w	80029bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287a:	4b34      	ldr	r3, [pc, #208]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b08      	cmp	r3, #8
 8002884:	d05c      	beq.n	8002940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d141      	bne.n	8002912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe f8f2 	bl	8000a7c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe f8ee 	bl	8000a7c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e087      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b27      	ldr	r3, [pc, #156]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	491b      	ldr	r1, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x478>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe f8c7 	bl	8000a7c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe f8c3 	bl	8000a7c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e05c      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x416>
 8002910:	e054      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <HAL_RCC_OscConfig+0x478>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe f8b0 	bl	8000a7c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe f8ac 	bl	8000a7c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e045      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
 800293e:	e03d      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e038      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
 8002954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d028      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d121      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d11a      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800298e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b65      	ldr	r3, [pc, #404]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a58      	ldr	r2, [pc, #352]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d044      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e067      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4934      	ldr	r1, [pc, #208]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fd ffde 	bl	8000a7c <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fd ffda 	bl	8000a7c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d20c      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f82d 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	@ (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd ff3e 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08007be0 	.word	0x08007be0
 8002b90:	20000030 	.word	0x20000030
 8002b94:	20000034 	.word	0x20000034

08002b98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_RCC_EnableCSS+0x14>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	4247004c 	.word	0x4247004c

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b094      	sub	sp, #80	@ 0x50
 8002bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc8:	4b79      	ldr	r3, [pc, #484]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	f200 80e1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x3a>
 8002be2:	e0db      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b73      	ldr	r3, [pc, #460]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002be8:	e0db      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bea:	4b73      	ldr	r3, [pc, #460]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bee:	e0d8      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c06:	4b6a      	ldr	r3, [pc, #424]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c22:	4622      	mov	r2, r4
 8002c24:	462b      	mov	r3, r5
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	1a51      	subs	r1, r2, r1
 8002c3e:	6139      	str	r1, [r7, #16]
 8002c40:	4629      	mov	r1, r5
 8002c42:	eb63 0301 	sbc.w	r3, r3, r1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c54:	4659      	mov	r1, fp
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	4651      	mov	r1, sl
 8002c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5e:	4651      	mov	r1, sl
 8002c60:	018a      	lsls	r2, r1, #6
 8002c62:	4651      	mov	r1, sl
 8002c64:	ebb2 0801 	subs.w	r8, r2, r1
 8002c68:	4659      	mov	r1, fp
 8002c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c82:	4690      	mov	r8, r2
 8002c84:	4699      	mov	r9, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	eb18 0303 	adds.w	r3, r8, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	462b      	mov	r3, r5
 8002c90:	eb49 0303 	adc.w	r3, r9, r3
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	024b      	lsls	r3, r1, #9
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cac:	4621      	mov	r1, r4
 8002cae:	024a      	lsls	r2, r1, #9
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cc0:	f7fd fa82 	bl	80001c8 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ccc:	e058      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cce:	4b38      	ldr	r3, [pc, #224]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4611      	mov	r1, r2
 8002cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	0159      	lsls	r1, r3, #5
 8002cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cfa:	0150      	lsls	r0, r2, #5
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4641      	mov	r1, r8
 8002d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d06:	4649      	mov	r1, r9
 8002d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d20:	ebb2 040a 	subs.w	r4, r2, sl
 8002d24:	eb63 050b 	sbc.w	r5, r3, fp
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	00eb      	lsls	r3, r5, #3
 8002d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d36:	00e2      	lsls	r2, r4, #3
 8002d38:	4614      	mov	r4, r2
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	4643      	mov	r3, r8
 8002d3e:	18e3      	adds	r3, r4, r3
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	464b      	mov	r3, r9
 8002d44:	eb45 0303 	adc.w	r3, r5, r3
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d56:	4629      	mov	r1, r5
 8002d58:	028b      	lsls	r3, r1, #10
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d60:	4621      	mov	r1, r4
 8002d62:	028a      	lsls	r2, r1, #10
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	61fa      	str	r2, [r7, #28]
 8002d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d74:	f7fd fa28 	bl	80001c8 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3750      	adds	r7, #80	@ 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000030 	.word	0x20000030

08002dd4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b80      	cmp	r3, #128	@ 0x80
 8002de2:	d104      	bne.n	8002dee <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002de4:	f000 f80a 	bl	8002dfc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002dea:	2280      	movs	r2, #128	@ 0x80
 8002dec:	701a      	strb	r2, [r3, #0]
  }
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	4002380e 	.word	0x4002380e

08002dfc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e041      	b.n	8002ea0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fcb5 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f000 fa7d 	bl	8003348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d001      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e04e      	b.n	8002f5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d022      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eea:	d01d      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d018      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1e      	ldr	r2, [pc, #120]	@ (8002f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a19      	ldr	r2, [pc, #100]	@ (8002f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x80>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a18      	ldr	r2, [pc, #96]	@ (8002f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d111      	bne.n	8002f4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d010      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	e007      	b.n	8002f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40001800 	.word	0x40001800

08002f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d020      	beq.n	8002fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0202 	mvn.w	r2, #2
 8002fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f999 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f98b 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f99c 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0204 	mvn.w	r2, #4
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f973 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f965 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f976 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0208 	mvn.w	r2, #8
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f94d 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f93f 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f950 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d020      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0210 	mvn.w	r2, #16
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2208      	movs	r2, #8
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f927 	bl	800330a <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f919 	bl	80032f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f92a 	bl	800331e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d007      	beq.n	80030f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0201 	mvn.w	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fa1a 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fae4 	bl	80036e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00c      	beq.n	800313c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8fb 	bl	8003332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0220 	mvn.w	r2, #32
 8003158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fab6 	bl	80036cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_TIM_ConfigClockSource+0x1c>
 8003180:	2302      	movs	r3, #2
 8003182:	e0b4      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x186>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031bc:	d03e      	beq.n	800323c <HAL_TIM_ConfigClockSource+0xd4>
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c2:	f200 8087 	bhi.w	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ca:	f000 8086 	beq.w	80032da <HAL_TIM_ConfigClockSource+0x172>
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d2:	d87f      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b70      	cmp	r3, #112	@ 0x70
 80031d6:	d01a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0xa6>
 80031d8:	2b70      	cmp	r3, #112	@ 0x70
 80031da:	d87b      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b60      	cmp	r3, #96	@ 0x60
 80031de:	d050      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x11a>
 80031e0:	2b60      	cmp	r3, #96	@ 0x60
 80031e2:	d877      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b50      	cmp	r3, #80	@ 0x50
 80031e6:	d03c      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0xfa>
 80031e8:	2b50      	cmp	r3, #80	@ 0x50
 80031ea:	d873      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	d058      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x13a>
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d86f      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b30      	cmp	r3, #48	@ 0x30
 80031f6:	d064      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	2b30      	cmp	r3, #48	@ 0x30
 80031fa:	d86b      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d060      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d867      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05c      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003208:	2b10      	cmp	r3, #16
 800320a:	d05a      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	e062      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	f000 f9b9 	bl	8003594 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	609a      	str	r2, [r3, #8]
      break;
 800323a:	e04f      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	f000 f9a2 	bl	8003594 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800325e:	609a      	str	r2, [r3, #8]
      break;
 8003260:	e03c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 f916 	bl	80034a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2150      	movs	r1, #80	@ 0x50
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f96f 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8003280:	e02c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800328e:	461a      	mov	r2, r3
 8003290:	f000 f935 	bl	80034fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2160      	movs	r1, #96	@ 0x60
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f95f 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 80032a0:	e01c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	461a      	mov	r2, r3
 80032b0:	f000 f8f6 	bl	80034a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2140      	movs	r1, #64	@ 0x40
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f94f 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 80032c0:	e00c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f000 f946 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 80032d2:	e003      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e000      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a46      	ldr	r2, [pc, #280]	@ (8003474 <TIM_Base_SetConfig+0x12c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003366:	d00f      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a43      	ldr	r2, [pc, #268]	@ (8003478 <TIM_Base_SetConfig+0x130>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a42      	ldr	r2, [pc, #264]	@ (800347c <TIM_Base_SetConfig+0x134>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a41      	ldr	r2, [pc, #260]	@ (8003480 <TIM_Base_SetConfig+0x138>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a40      	ldr	r2, [pc, #256]	@ (8003484 <TIM_Base_SetConfig+0x13c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a35      	ldr	r2, [pc, #212]	@ (8003474 <TIM_Base_SetConfig+0x12c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a8:	d027      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a32      	ldr	r2, [pc, #200]	@ (8003478 <TIM_Base_SetConfig+0x130>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d023      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a31      	ldr	r2, [pc, #196]	@ (800347c <TIM_Base_SetConfig+0x134>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a30      	ldr	r2, [pc, #192]	@ (8003480 <TIM_Base_SetConfig+0x138>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003484 <TIM_Base_SetConfig+0x13c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d017      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003488 <TIM_Base_SetConfig+0x140>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2d      	ldr	r2, [pc, #180]	@ (800348c <TIM_Base_SetConfig+0x144>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00f      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <TIM_Base_SetConfig+0x148>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00b      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <TIM_Base_SetConfig+0x14c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003498 <TIM_Base_SetConfig+0x150>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	@ (800349c <TIM_Base_SetConfig+0x154>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a10      	ldr	r2, [pc, #64]	@ (8003474 <TIM_Base_SetConfig+0x12c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0xf8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <TIM_Base_SetConfig+0x13c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f023 0201 	bic.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]
  }
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800
 8003480:	40000c00 	.word	0x40000c00
 8003484:	40010400 	.word	0x40010400
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800
 8003494:	40001800 	.word	0x40001800
 8003498:	40001c00 	.word	0x40001c00
 800349c:	40002000 	.word	0x40002000

080034a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0201 	bic.w	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 030a 	bic.w	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f023 0210 	bic.w	r2, r3, #16
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800353a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	f043 0307 	orr.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	021a      	lsls	r2, r3, #8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e05a      	b.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a21      	ldr	r2, [pc, #132]	@ (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003638:	d01d      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d018      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1a      	ldr	r2, [pc, #104]	@ (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00e      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a17      	ldr	r2, [pc, #92]	@ (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10c      	bne.n	8003690 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800367c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4313      	orrs	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40010400 	.word	0x40010400
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40001800 	.word	0x40001800

080036cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036f4:	b084      	sub	sp, #16
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	f107 001c 	add.w	r0, r7, #28
 8003702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003706:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800370a:	2b01      	cmp	r3, #1
 800370c:	d123      	bne.n	8003756 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f001 fae8 	bl	8004d20 <USB_CoreReset>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e01b      	b.n	800378e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f001 fadc 	bl	8004d20 <USB_CoreReset>
 8003768:	4603      	mov	r3, r0
 800376a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800376c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003780:	e005      	b.n	800378e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800378e:	7fbb      	ldrb	r3, [r7, #30]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10b      	bne.n	80037ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f043 0206 	orr.w	r2, r3, #6
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037b8:	b004      	add	sp, #16
 80037ba:	4770      	bx	lr

080037bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d165      	bne.n	800389c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4a41      	ldr	r2, [pc, #260]	@ (80038d8 <USB_SetTurnaroundTime+0x11c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d906      	bls.n	80037e6 <USB_SetTurnaroundTime+0x2a>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a40      	ldr	r2, [pc, #256]	@ (80038dc <USB_SetTurnaroundTime+0x120>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d202      	bcs.n	80037e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037e0:	230f      	movs	r3, #15
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e062      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4a3c      	ldr	r2, [pc, #240]	@ (80038dc <USB_SetTurnaroundTime+0x120>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d306      	bcc.n	80037fc <USB_SetTurnaroundTime+0x40>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4a3b      	ldr	r2, [pc, #236]	@ (80038e0 <USB_SetTurnaroundTime+0x124>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d202      	bcs.n	80037fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037f6:	230e      	movs	r3, #14
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e057      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a38      	ldr	r2, [pc, #224]	@ (80038e0 <USB_SetTurnaroundTime+0x124>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d306      	bcc.n	8003812 <USB_SetTurnaroundTime+0x56>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a37      	ldr	r2, [pc, #220]	@ (80038e4 <USB_SetTurnaroundTime+0x128>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d202      	bcs.n	8003812 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800380c:	230d      	movs	r3, #13
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e04c      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a33      	ldr	r2, [pc, #204]	@ (80038e4 <USB_SetTurnaroundTime+0x128>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d306      	bcc.n	8003828 <USB_SetTurnaroundTime+0x6c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a32      	ldr	r2, [pc, #200]	@ (80038e8 <USB_SetTurnaroundTime+0x12c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d802      	bhi.n	8003828 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003822:	230c      	movs	r3, #12
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e041      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a2f      	ldr	r2, [pc, #188]	@ (80038e8 <USB_SetTurnaroundTime+0x12c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d906      	bls.n	800383e <USB_SetTurnaroundTime+0x82>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a2e      	ldr	r2, [pc, #184]	@ (80038ec <USB_SetTurnaroundTime+0x130>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d802      	bhi.n	800383e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003838:	230b      	movs	r3, #11
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e036      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a2a      	ldr	r2, [pc, #168]	@ (80038ec <USB_SetTurnaroundTime+0x130>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d906      	bls.n	8003854 <USB_SetTurnaroundTime+0x98>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <USB_SetTurnaroundTime+0x134>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d802      	bhi.n	8003854 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800384e:	230a      	movs	r3, #10
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e02b      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a26      	ldr	r2, [pc, #152]	@ (80038f0 <USB_SetTurnaroundTime+0x134>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d906      	bls.n	800386a <USB_SetTurnaroundTime+0xae>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a25      	ldr	r2, [pc, #148]	@ (80038f4 <USB_SetTurnaroundTime+0x138>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d202      	bcs.n	800386a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003864:	2309      	movs	r3, #9
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e020      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <USB_SetTurnaroundTime+0x138>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d306      	bcc.n	8003880 <USB_SetTurnaroundTime+0xc4>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a20      	ldr	r2, [pc, #128]	@ (80038f8 <USB_SetTurnaroundTime+0x13c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d802      	bhi.n	8003880 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800387a:	2308      	movs	r3, #8
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e015      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <USB_SetTurnaroundTime+0x13c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d906      	bls.n	8003896 <USB_SetTurnaroundTime+0xda>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <USB_SetTurnaroundTime+0x140>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d202      	bcs.n	8003896 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003890:	2307      	movs	r3, #7
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e00a      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003896:	2306      	movs	r3, #6
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e007      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038a2:	2309      	movs	r3, #9
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e001      	b.n	80038ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038a8:	2309      	movs	r3, #9
 80038aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	029b      	lsls	r3, r3, #10
 80038c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	00d8acbf 	.word	0x00d8acbf
 80038dc:	00e4e1c0 	.word	0x00e4e1c0
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	01067380 	.word	0x01067380
 80038e8:	011a499f 	.word	0x011a499f
 80038ec:	01312cff 	.word	0x01312cff
 80038f0:	014ca43f 	.word	0x014ca43f
 80038f4:	016e3600 	.word	0x016e3600
 80038f8:	01a6ab1f 	.word	0x01a6ab1f
 80038fc:	01e84800 	.word	0x01e84800

08003900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d115      	bne.n	8003992 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003972:	200a      	movs	r0, #10
 8003974:	f7fd f88e 	bl	8000a94 <HAL_Delay>
      ms += 10U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	330a      	adds	r3, #10
 800397c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f001 f93f 	bl	8004c02 <USB_GetMode>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d01e      	beq.n	80039c8 <USB_SetCurrentMode+0x84>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2bc7      	cmp	r3, #199	@ 0xc7
 800398e:	d9f0      	bls.n	8003972 <USB_SetCurrentMode+0x2e>
 8003990:	e01a      	b.n	80039c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d115      	bne.n	80039c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039a4:	200a      	movs	r0, #10
 80039a6:	f7fd f875 	bl	8000a94 <HAL_Delay>
      ms += 10U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	330a      	adds	r3, #10
 80039ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f001 f926 	bl	8004c02 <USB_GetMode>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <USB_SetCurrentMode+0x84>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2bc7      	cmp	r3, #199	@ 0xc7
 80039c0:	d9f0      	bls.n	80039a4 <USB_SetCurrentMode+0x60>
 80039c2:	e001      	b.n	80039c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e005      	b.n	80039d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80039cc:	d101      	bne.n	80039d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039dc:	b084      	sub	sp, #16
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80039ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e009      	b.n	8003a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3340      	adds	r3, #64	@ 0x40
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b0e      	cmp	r3, #14
 8003a14:	d9f2      	bls.n	80039fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11c      	bne.n	8003a58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a56:	e00b      	b.n	8003a70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10d      	bne.n	8003aa0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f968 	bl	8003d64 <USB_SetDevSpeed>
 8003a94:	e008      	b.n	8003aa8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a96:	2101      	movs	r1, #1
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f963 	bl	8003d64 <USB_SetDevSpeed>
 8003a9e:	e003      	b.n	8003aa8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aa0:	2103      	movs	r1, #3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f95e 	bl	8003d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aa8:	2110      	movs	r1, #16
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8fa 	bl	8003ca4 <USB_FlushTxFifo>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f924 	bl	8003d08 <USB_FlushRxFifo>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003adc:	461a      	mov	r2, r3
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2300      	movs	r3, #0
 8003aec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e043      	b.n	8003b7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b0a:	d118      	bne.n	8003b3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e013      	b.n	8003b50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b34:	461a      	mov	r2, r3
 8003b36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e008      	b.n	8003b50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b80:	461a      	mov	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d3b5      	bcc.n	8003af4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e043      	b.n	8003c16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba4:	d118      	bne.n	8003bd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	e013      	b.n	8003bea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e008      	b.n	8003bea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3301      	adds	r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d3b5      	bcc.n	8003b8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003c42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f043 0210 	orr.w	r2, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <USB_DevInit+0x2c4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f043 0208 	orr.w	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c9c:	b004      	add	sp, #16
 8003c9e:	4770      	bx	lr
 8003ca0:	803c3800 	.word	0x803c3800

08003ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cbe:	d901      	bls.n	8003cc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e01b      	b.n	8003cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	daf2      	bge.n	8003cb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	019b      	lsls	r3, r3, #6
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ce8:	d901      	bls.n	8003cee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e006      	b.n	8003cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d0f0      	beq.n	8003cdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d20:	d901      	bls.n	8003d26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e018      	b.n	8003d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	daf2      	bge.n	8003d14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2210      	movs	r2, #16
 8003d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d44:	d901      	bls.n	8003d4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e006      	b.n	8003d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d0f0      	beq.n	8003d38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 0306 	and.w	r3, r3, #6
 8003dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
 8003dba:	e00a      	b.n	8003dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d002      	beq.n	8003dc8 <USB_GetDevSpeed+0x32>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d102      	bne.n	8003dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
 8003dcc:	e001      	b.n	8003dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003dce:	230f      	movs	r3, #15
 8003dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d13a      	bne.n	8003e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d155      	bne.n	8003ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	791b      	ldrb	r3, [r3, #4]
 8003e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	059b      	lsls	r3, r3, #22
 8003e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e036      	b.n	8003ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11a      	bne.n	8003ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	785b      	ldrb	r3, [r3, #1]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d161      	bne.n	8003fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f22:	d11f      	bne.n	8003f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f84:	4013      	ands	r3, r2
 8003f86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4b35      	ldr	r3, [pc, #212]	@ (80040a0 <USB_DeactivateEndpoint+0x1b0>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
 8003fce:	e060      	b.n	8004092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fe6:	d11f      	bne.n	8004028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	43db      	mvns	r3, r3
 8004042:	68f9      	ldr	r1, [r7, #12]
 8004044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004048:	4013      	ands	r3, r2
 800404a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2101      	movs	r1, #1
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	43db      	mvns	r3, r3
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800406c:	4013      	ands	r3, r2
 800406e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	0159      	lsls	r1, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	440b      	add	r3, r1
 8004086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408a:	4619      	mov	r1, r3
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <USB_DeactivateEndpoint+0x1b4>)
 800408e:	4013      	ands	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	ec337800 	.word	0xec337800
 80040a4:	eff37800 	.word	0xeff37800

080040a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	@ 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 817f 	bne.w	80043c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d132      	bne.n	8004138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004130:	0cdb      	lsrs	r3, r3, #19
 8004132:	04db      	lsls	r3, r3, #19
 8004134:	6113      	str	r3, [r2, #16]
 8004136:	e097      	b.n	8004268 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004152:	0cdb      	lsrs	r3, r3, #19
 8004154:	04db      	lsls	r3, r3, #19
 8004156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004172:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004176:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800417a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11a      	bne.n	80041b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d903      	bls.n	8004196 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041b4:	6113      	str	r3, [r2, #16]
 80041b6:	e044      	b.n	8004242 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	1e5a      	subs	r2, r3, #1
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	8afb      	ldrh	r3, [r7, #22]
 80041de:	04d9      	lsls	r1, r3, #19
 80041e0:	4ba4      	ldr	r3, [pc, #656]	@ (8004474 <USB_EPStartXfer+0x3cc>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	0148      	lsls	r0, r1, #5
 80041e8:	69f9      	ldr	r1, [r7, #28]
 80041ea:	4401      	add	r1, r0
 80041ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80041f0:	4313      	orrs	r3, r2
 80041f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d122      	bne.n	8004242 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004216:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800421a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	8afb      	ldrh	r3, [r7, #22]
 800422c:	075b      	lsls	r3, r3, #29
 800422e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004232:	69b9      	ldr	r1, [r7, #24]
 8004234:	0148      	lsls	r0, r1, #5
 8004236:	69f9      	ldr	r1, [r7, #28]
 8004238:	4401      	add	r1, r0
 800423a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	0148      	lsls	r0, r1, #5
 800425c:	69f9      	ldr	r1, [r7, #28]
 800425e:	4401      	add	r1, r0
 8004260:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d14b      	bne.n	8004306 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d128      	bne.n	80042e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d110      	bne.n	80042c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00f      	b.n	80042e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	0151      	lsls	r1, r2, #5
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	440a      	add	r2, r1
 80042fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e166      	b.n	80045d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004320:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004324:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	791b      	ldrb	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d015      	beq.n	800435a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 814e 	beq.w	80045d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	69f9      	ldr	r1, [r7, #28]
 8004350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004354:	4313      	orrs	r3, r2
 8004356:	634b      	str	r3, [r1, #52]	@ 0x34
 8004358:	e13c      	b.n	80045d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d110      	bne.n	800438c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e00f      	b.n	80043ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	68d9      	ldr	r1, [r3, #12]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	b298      	uxth	r0, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4603      	mov	r3, r0
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f9b9 	bl	8004738 <USB_WritePacket>
 80043c6:	e105      	b.n	80045d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043e2:	0cdb      	lsrs	r3, r3, #19
 80043e4:	04db      	lsls	r3, r3, #19
 80043e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004402:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004406:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800440a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d132      	bne.n	8004478 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	0148      	lsls	r0, r1, #5
 8004444:	69f9      	ldr	r1, [r7, #28]
 8004446:	4401      	add	r1, r0
 8004448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800444c:	4313      	orrs	r3, r2
 800444e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	0151      	lsls	r1, r2, #5
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	440a      	add	r2, r1
 8004466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800446a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800446e:	6113      	str	r3, [r2, #16]
 8004470:	e062      	b.n	8004538 <USB_EPStartXfer+0x490>
 8004472:	bf00      	nop
 8004474:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d123      	bne.n	80044c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	0148      	lsls	r0, r1, #5
 800449a:	69f9      	ldr	r1, [r7, #28]
 800449c:	4401      	add	r1, r0
 800449e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044c4:	6113      	str	r3, [r2, #16]
 80044c6:	e037      	b.n	8004538 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	8afa      	ldrh	r2, [r7, #22]
 80044e4:	fb03 f202 	mul.w	r2, r3, r2
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	8afb      	ldrh	r3, [r7, #22]
 80044fc:	04d9      	lsls	r1, r3, #19
 80044fe:	4b38      	ldr	r3, [pc, #224]	@ (80045e0 <USB_EPStartXfer+0x538>)
 8004500:	400b      	ands	r3, r1
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	0148      	lsls	r0, r1, #5
 8004506:	69f9      	ldr	r1, [r7, #28]
 8004508:	4401      	add	r1, r0
 800450a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800450e:	4313      	orrs	r3, r2
 8004510:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	0148      	lsls	r0, r1, #5
 800452c:	69f9      	ldr	r1, [r7, #28]
 800452e:	4401      	add	r1, r0
 8004530:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d10d      	bne.n	800455a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004556:	460a      	mov	r2, r1
 8004558:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	791b      	ldrb	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d128      	bne.n	80045b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d110      	bne.n	8004594 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800458c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e00f      	b.n	80045b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80045d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	1ff80000 	.word	0x1ff80000

080045e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d14a      	bne.n	8004698 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800461a:	f040 8086 	bne.w	800472a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	7812      	ldrb	r2, [r2, #0]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004640:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	7812      	ldrb	r2, [r2, #0]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004672:	4293      	cmp	r3, r2
 8004674:	d902      	bls.n	800467c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
          break;
 800467a:	e056      	b.n	800472a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004694:	d0e7      	beq.n	8004666 <USB_EPStopXfer+0x82>
 8004696:	e048      	b.n	800472a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046b0:	d13b      	bne.n	800472a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004706:	4293      	cmp	r3, r2
 8004708:	d902      	bls.n	8004710 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
          break;
 800470e:	e00c      	b.n	800472a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004728:	d0e7      	beq.n	80046fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	@ 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	460b      	mov	r3, r1
 8004748:	71fb      	strb	r3, [r7, #7]
 800474a:	4613      	mov	r3, r2
 800474c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004756:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d123      	bne.n	80047a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800475e:	88bb      	ldrh	r3, [r7, #4]
 8004760:	3303      	adds	r3, #3
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e018      	b.n	800479e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	031a      	lsls	r2, r3, #12
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4413      	add	r3, r2
 8004774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004778:	461a      	mov	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3301      	adds	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	3301      	adds	r3, #1
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3e2      	bcc.n	800476c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3724      	adds	r7, #36	@ 0x24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b08b      	sub	sp, #44	@ 0x2c
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	089b      	lsrs	r3, r3, #2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	e014      	b.n	800480a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	3301      	adds	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	3301      	adds	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	3301      	adds	r3, #1
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	3301      	adds	r3, #1
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	429a      	cmp	r2, r3
 8004810:	d3e6      	bcc.n	80047e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004812:	8bfb      	ldrh	r3, [r7, #30]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01e      	beq.n	8004856 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004822:	461a      	mov	r2, r3
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	b2da      	uxtb	r2, r3
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	701a      	strb	r2, [r3, #0]
      i++;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	3301      	adds	r3, #1
 8004842:	623b      	str	r3, [r7, #32]
      pDest++;
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	3301      	adds	r3, #1
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800484a:	8bfb      	ldrh	r3, [r7, #30]
 800484c:	3b01      	subs	r3, #1
 800484e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004850:	8bfb      	ldrh	r3, [r7, #30]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ea      	bne.n	800482c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004858:	4618      	mov	r0, r3
 800485a:	372c      	adds	r7, #44	@ 0x2c
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	785b      	ldrb	r3, [r3, #1]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d12c      	bne.n	80048da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	db12      	blt.n	80048b8 <USB_EPSetStall+0x54>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00f      	beq.n	80048b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e02b      	b.n	8004932 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	db12      	blt.n	8004912 <USB_EPSetStall+0xae>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00f      	beq.n	8004912 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800490c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004910:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800492c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d128      	bne.n	80049ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	440a      	add	r2, r1
 8004972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800497a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	791b      	ldrb	r3, [r3, #4]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <USB_EPClearStall+0x4c>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	791b      	ldrb	r3, [r3, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d138      	bne.n	80049fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e027      	b.n	80049fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	791b      	ldrb	r3, [r3, #4]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d003      	beq.n	80049de <USB_EPClearStall+0x9e>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	791b      	ldrb	r3, [r3, #4]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d10f      	bne.n	80049fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a86:	f023 0302 	bic.w	r3, r3, #2
 8004a8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	0c1b      	lsrs	r3, r3, #16
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	b29b      	uxth	r3, r3
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b98:	68bb      	ldr	r3, [r7, #8]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	01db      	lsls	r3, r3, #7
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c3c:	f023 0307 	bic.w	r3, r3, #7
 8004c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	333c      	adds	r3, #60	@ 0x3c
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <USB_EP0_OutStart+0xb8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d90a      	bls.n	8004c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c98:	d101      	bne.n	8004c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e037      	b.n	8004d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ccc:	f043 0318 	orr.w	r3, r3, #24
 8004cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10f      	bne.n	8004d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	4f54300a 	.word	0x4f54300a

08004d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d38:	d901      	bls.n	8004d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e01b      	b.n	8004d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	daf2      	bge.n	8004d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d62:	d901      	bls.n	8004d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e006      	b.n	8004d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d0f0      	beq.n	8004d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <CRC16>:
 * Computes the CRC value of a certain data frame and returns it
 * @param data ptr to the data buffer
 * @param len number of bytes for the CRC to be calculated for
 * @return CRC byte value
 */
static uint16_t CRC16(uint8_t *data, uint16_t len) {
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	807b      	strh	r3, [r7, #2]
	uint16_t CRC = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004d92:	2300      	movs	r3, #0
 8004d94:	81bb      	strh	r3, [r7, #12]
 8004d96:	e00a      	b.n	8004dae <CRC16+0x2c>
		CRC += data[x];
 8004d98:	89bb      	ldrh	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	89fb      	ldrh	r3, [r7, #14]
 8004da4:	4413      	add	r3, r2
 8004da6:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 8004da8:	89bb      	ldrh	r3, [r7, #12]
 8004daa:	3301      	adds	r3, #1
 8004dac:	81bb      	strh	r3, [r7, #12]
 8004dae:	89ba      	ldrh	r2, [r7, #12]
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3f0      	bcc.n	8004d98 <CRC16+0x16>
	}
	return CRC;
 8004db6:	89fb      	ldrh	r3, [r7, #14]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <SbW_Init>:

void SbW_Init(SbW_Protocol_t *S) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	S->MessageFifo.Fifo_Size = S->Fifo_Buffer_Size / S->Frame_Len;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8b9b      	ldrh	r3, [r3, #28]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	799b      	ldrb	r3, [r3, #6]
 8004dd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	825a      	strh	r2, [r3, #18]
	fifo_init(&S->MessageFifo);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	330c      	adds	r3, #12
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb fd84 	bl	80008f2 <fifo_init>
	S->Mutex = 0; //ensures that the Mutex flag starts in the unlocked state (0)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <SbW_Request_Received_CB>:

void SbW_Request_Received_CB(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
	uint8_t NoReply = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
	uint16_t CRC_Result = CRC16(data, len - 2);
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	3b02      	subs	r3, #2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	68b8      	ldr	r0, [r7, #8]
 8004e18:	f7ff ffb3 	bl	8004d82 <CRC16>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	82bb      	strh	r3, [r7, #20]
	if (S->RemainingFrames) {
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 811d 	bne.w	8005066 <SbW_Request_Received_CB+0x26a>
		return;
	}
	// Check the data integrity
	if (CRC_Result
			!= (((uint16_t) data[len - 1] << 8) | (uint16_t) data[len - 2])) {
 8004e2c:	8aba      	ldrh	r2, [r7, #20]
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	440b      	add	r3, r1
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	88f9      	ldrh	r1, [r7, #6]
 8004e3c:	3902      	subs	r1, #2
 8004e3e:	68b8      	ldr	r0, [r7, #8]
 8004e40:	4401      	add	r1, r0
 8004e42:	7809      	ldrb	r1, [r1, #0]
 8004e44:	430b      	orrs	r3, r1
	if (CRC_Result
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d003      	beq.n	8004e52 <SbW_Request_Received_CB+0x56>
		S->HW_Interface_t.User_Callback(SbW_ERROR_CRC);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	2001      	movs	r0, #1
 8004e50:	4798      	blx	r3
		// SbW_ERROR_CRC // Ignoring this frame
	}
	// SbW_ERROR_NoERROR
	S->R_W = data[1] >> 7;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	3301      	adds	r3, #1
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	09db      	lsrs	r3, r3, #7
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	b2d9      	uxtb	r1, r3
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	7913      	ldrb	r3, [r2, #4]
 8004e66:	f361 0300 	bfi	r3, r1, #0, #1
 8004e6a:	7113      	strb	r3, [r2, #4]
	S->CMD = data[1] & 0b01111111;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	715a      	strb	r2, [r3, #5]

	switch (S->CMD) {
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	795b      	ldrb	r3, [r3, #5]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	2b05      	cmp	r3, #5
 8004e84:	f200 80f1 	bhi.w	800506a <SbW_Request_Received_CB+0x26e>
 8004e88:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <SbW_Request_Received_CB+0x94>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004f15 	.word	0x08004f15
 8004e98:	08004f59 	.word	0x08004f59
 8004e9c:	08004fb1 	.word	0x08004fb1
 8004ea0:	0800506b 	.word	0x0800506b
 8004ea4:	08004fd7 	.word	0x08004fd7
	case 0x01: // Get or Set Sampling Frequency
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	2000      	movs	r0, #0
 8004eae:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	791b      	ldrb	r3, [r3, #4]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d014      	beq.n	8004ee8 <SbW_Request_Received_CB+0xec>
			len = 7;
 8004ebe:	2307      	movs	r3, #7
 8004ec0:	80fb      	strh	r3, [r7, #6]
			data[2] = 2; // Number of Data Bytes =2
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
			data[3] = (uint8_t) (S->SamplingFreq >> 8);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	885b      	ldrh	r3, [r3, #2]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3303      	adds	r3, #3
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) S->SamplingFreq;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	885a      	ldrh	r2, [r3, #2]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004ee6:	e09b      	b.n	8005020 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004ee8:	2305      	movs	r3, #5
 8004eea:	80fb      	strh	r3, [r7, #6]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	b21b      	sxth	r3, r3
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3304      	adds	r3, #4
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	4313      	orrs	r3, r2
 8004f02:	b21b      	sxth	r3, r3
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	805a      	strh	r2, [r3, #2]
			data[2] = 0; // Number of Data Bytes =0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
		break;
 8004f12:	e085      	b.n	8005020 <SbW_Request_Received_CB+0x224>

	case 0x02: // Get or Set Frame Length
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	2000      	movs	r0, #0
 8004f1a:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	791b      	ldrb	r3, [r3, #4]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <SbW_Request_Received_CB+0x146>
			len = 6;
 8004f2a:	2306      	movs	r3, #6
 8004f2c:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // Number of Data Bytes =1
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3302      	adds	r3, #2
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
			data[3] = S->Frame_Len; // Get Frame_Len
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	7992      	ldrb	r2, [r2, #6]
 8004f3e:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->Frame_Len = data[3]; // Set Frame_Len
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004f40:	e06e      	b.n	8005020 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004f42:	2305      	movs	r3, #5
 8004f44:	80fb      	strh	r3, [r7, #6]
			S->Frame_Len = data[3]; // Set Frame_Len
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	78da      	ldrb	r2, [r3, #3]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	719a      	strb	r2, [r3, #6]
			data[2] = 0; // Number of Data Bytes =0
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3302      	adds	r3, #2
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
		break;
 8004f56:	e063      	b.n	8005020 <SbW_Request_Received_CB+0x224>
	case 0x03: // Get or Set Stream ON
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	791b      	ldrb	r3, [r3, #4]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00e      	beq.n	8004f8c <SbW_Request_Received_CB+0x190>
			len = 6;
 8004f6e:	2306      	movs	r3, #6
 8004f70:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; // Number of Data Bytes =1
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3302      	adds	r3, #2
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]
			data[3] = S->Stream_ON; // Get Stream_ON
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	3303      	adds	r3, #3
 8004f88:	701a      	strb	r2, [r3, #0]
			len = 5;
			S->Stream_ON = data[3]; // Set Stream_ON
			data[2] = 0; // Number of Data Bytes =0
			// data[3] | data[4] for CRC_Result
		}
		break;
 8004f8a:	e049      	b.n	8005020 <SbW_Request_Received_CB+0x224>
			len = 5;
 8004f8c:	2305      	movs	r3, #5
 8004f8e:	80fb      	strh	r3, [r7, #6]
			S->Stream_ON = data[3]; // Set Stream_ON
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3303      	adds	r3, #3
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	b2d9      	uxtb	r1, r3
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	7813      	ldrb	r3, [r2, #0]
 8004fa0:	f361 0300 	bfi	r3, r1, #0, #1
 8004fa4:	7013      	strb	r3, [r2, #0]
			data[2] = 0; // Number of Data Bytes =0
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	3302      	adds	r3, #2
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]
		break;
 8004fae:	e037      	b.n	8005020 <SbW_Request_Received_CB+0x224>
	case 0x04: // Get number of frames to be reported by the controller
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	4798      	blx	r3
		if (!S->R_W) { // ??
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	791b      	ldrb	r3, [r3, #4]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d129      	bne.n	800501a <SbW_Request_Received_CB+0x21e>
			NoReply = 1; // means do not issue a standard reply
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
			S->RemainingFrames = data[3];
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	78da      	ldrb	r2, [r3, #3]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			// SbW_TxFrame_processor(S);
		}
		break;
 8004fd4:	e021      	b.n	800501a <SbW_Request_Received_CB+0x21e>

	case 0x06: // Get the frame buffer depth
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	2000      	movs	r0, #0
 8004fdc:	4798      	blx	r3
		if (S->R_W) { // Get Request (ECU -> PC)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	791b      	ldrb	r3, [r3, #4]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d018      	beq.n	800501e <SbW_Request_Received_CB+0x222>
			len = 7;
 8004fec:	2307      	movs	r3, #7
 8004fee:	80fb      	strh	r3, [r7, #6]
			uint16_t FrameBufferDepth = S->Fifo_Buffer_Size / S->Frame_Len;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8b9b      	ldrh	r3, [r3, #28]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	799b      	ldrb	r3, [r3, #6]
 8004ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ffe:	827b      	strh	r3, [r7, #18]
			data[3] = (uint8_t) (FrameBufferDepth >> 8);
 8005000:	8a7b      	ldrh	r3, [r7, #18]
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	b29a      	uxth	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3303      	adds	r3, #3
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) FrameBufferDepth;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	3304      	adds	r3, #4
 8005012:	8a7a      	ldrh	r2, [r7, #18]
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005018:	e001      	b.n	800501e <SbW_Request_Received_CB+0x222>
		break;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <SbW_Request_Received_CB+0x224>
		break;
 800501e:	bf00      	nop

	default:
		return;
	}

	if (!NoReply) {
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d122      	bne.n	800506c <SbW_Request_Received_CB+0x270>
		CRC_Result = CRC16(data, len - 2);
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	3b02      	subs	r3, #2
 800502a:	b29b      	uxth	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	68b8      	ldr	r0, [r7, #8]
 8005030:	f7ff fea7 	bl	8004d82 <CRC16>
 8005034:	4603      	mov	r3, r0
 8005036:	82bb      	strh	r3, [r7, #20]
		data[len - 2] = (uint8_t) (CRC_Result >> 8);
 8005038:	8abb      	ldrh	r3, [r7, #20]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	b299      	uxth	r1, r3
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	3b02      	subs	r3, #2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	4413      	add	r3, r2
 8005046:	b2ca      	uxtb	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]
		data[len - 1] = (uint8_t) (CRC_Result);
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	3b01      	subs	r3, #1
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	8aba      	ldrh	r2, [r7, #20]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
		S->HW_Interface_t.Send_Reply(data, len);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	4611      	mov	r1, r2
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	4798      	blx	r3
 8005064:	e002      	b.n	800506c <SbW_Request_Received_CB+0x270>
		return;
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <SbW_Request_Received_CB+0x270>
		return;
 800506a:	bf00      	nop
	}
}
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop

08005074 <SbW_TxFrame_processor>:
		SbW_TxFrame_processor(S);
		S->Mutex = 0;
	}
}

void SbW_TxFrame_processor(SbW_Protocol_t *S) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(&S->MessageFifo) && S->RemainingFrames != 0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	330c      	adds	r3, #12
 8005080:	4618      	mov	r0, r3
 8005082:	f7fb fc54 	bl	800092e <fifo_is_empty>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d138      	bne.n	80050fe <SbW_TxFrame_processor+0x8a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d033      	beq.n	80050fe <SbW_TxFrame_processor+0x8a>
			&& !S->Mutex) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800509c:	2b00      	cmp	r3, #0
 800509e:	d12e      	bne.n	80050fe <SbW_TxFrame_processor+0x8a>
		S->Mutex = 1;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		int16_t H = fifo_dequeue(&S->MessageFifo);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	330c      	adds	r3, #12
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fb fc50 	bl	8000952 <fifo_dequeue>
 80050b2:	4603      	mov	r3, r0
 80050b4:	81fb      	strh	r3, [r7, #14]
		S->RemainingFrames--;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80050bc:	3b01      	subs	r3, #1
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a18      	ldr	r0, [r3, #32]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	7989      	ldrb	r1, [r1, #6]
 80050d6:	fb01 f202 	mul.w	r2, r1, r2
 80050da:	1899      	adds	r1, r3, r2
				S->Frame_Len);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	799b      	ldrb	r3, [r3, #6]
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 80050e0:	461a      	mov	r2, r3
 80050e2:	f002 fd3f 	bl	8007b64 <memcpy>
		S->HW_Interface_t.Send_Reply(S->P_TXBuffer, S->Frame_Len);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a10      	ldr	r0, [r2, #32]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	7992      	ldrb	r2, [r2, #6]
 80050f2:	4611      	mov	r1, r2
 80050f4:	4798      	blx	r3
		S->Mutex = 0;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	}
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <SbW_TxCPLt>:

void SbW_TxCPLt(SbW_Protocol_t *S) {
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
	SbW_TxFrame_processor(S);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff ffb0 	bl	8005074 <SbW_TxFrame_processor>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005128:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800512c:	f002 fcaa 	bl	8007a84 <USBD_static_malloc>
 8005130:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	32b0      	adds	r2, #176	@ 0xb0
 8005142:	2100      	movs	r1, #0
 8005144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005148:	2302      	movs	r3, #2
 800514a:	e0d4      	b.n	80052f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800514c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005150:	2100      	movs	r1, #0
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f002 fcda 	bl	8007b0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	32b0      	adds	r2, #176	@ 0xb0
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	32b0      	adds	r2, #176	@ 0xb0
 8005172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	7c1b      	ldrb	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d138      	bne.n	80051f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005184:	4b5e      	ldr	r3, [pc, #376]	@ (8005300 <USBD_CDC_Init+0x1e4>)
 8005186:	7819      	ldrb	r1, [r3, #0]
 8005188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800518c:	2202      	movs	r2, #2
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f002 fb55 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005194:	4b5a      	ldr	r3, [pc, #360]	@ (8005300 <USBD_CDC_Init+0x1e4>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	3324      	adds	r3, #36	@ 0x24
 80051aa:	2201      	movs	r2, #1
 80051ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051ae:	4b55      	ldr	r3, [pc, #340]	@ (8005304 <USBD_CDC_Init+0x1e8>)
 80051b0:	7819      	ldrb	r1, [r3, #0]
 80051b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051b6:	2202      	movs	r2, #2
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f002 fb40 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051be:	4b51      	ldr	r3, [pc, #324]	@ (8005304 <USBD_CDC_Init+0x1e8>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	f003 020f 	and.w	r2, r3, #15
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051d6:	2201      	movs	r2, #1
 80051d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80051da:	4b4b      	ldr	r3, [pc, #300]	@ (8005308 <USBD_CDC_Init+0x1ec>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	f003 020f 	and.w	r2, r3, #15
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	3326      	adds	r3, #38	@ 0x26
 80051f0:	2210      	movs	r2, #16
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e035      	b.n	8005262 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051f6:	4b42      	ldr	r3, [pc, #264]	@ (8005300 <USBD_CDC_Init+0x1e4>)
 80051f8:	7819      	ldrb	r1, [r3, #0]
 80051fa:	2340      	movs	r3, #64	@ 0x40
 80051fc:	2202      	movs	r2, #2
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f002 fb1d 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005204:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <USBD_CDC_Init+0x1e4>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3324      	adds	r3, #36	@ 0x24
 800521a:	2201      	movs	r2, #1
 800521c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800521e:	4b39      	ldr	r3, [pc, #228]	@ (8005304 <USBD_CDC_Init+0x1e8>)
 8005220:	7819      	ldrb	r1, [r3, #0]
 8005222:	2340      	movs	r3, #64	@ 0x40
 8005224:	2202      	movs	r2, #2
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f002 fb09 	bl	800783e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800522c:	4b35      	ldr	r3, [pc, #212]	@ (8005304 <USBD_CDC_Init+0x1e8>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f003 020f 	and.w	r2, r3, #15
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005244:	2201      	movs	r2, #1
 8005246:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005248:	4b2f      	ldr	r3, [pc, #188]	@ (8005308 <USBD_CDC_Init+0x1ec>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 020f 	and.w	r2, r3, #15
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3326      	adds	r3, #38	@ 0x26
 800525e:	2210      	movs	r2, #16
 8005260:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005262:	4b29      	ldr	r3, [pc, #164]	@ (8005308 <USBD_CDC_Init+0x1ec>)
 8005264:	7819      	ldrb	r1, [r3, #0]
 8005266:	2308      	movs	r3, #8
 8005268:	2203      	movs	r2, #3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f002 fae7 	bl	800783e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005270:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <USBD_CDC_Init+0x1ec>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3324      	adds	r3, #36	@ 0x24
 8005286:	2201      	movs	r2, #1
 8005288:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	33b0      	adds	r3, #176	@ 0xb0
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052c0:	2302      	movs	r3, #2
 80052c2:	e018      	b.n	80052f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7c1b      	ldrb	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <USBD_CDC_Init+0x1e8>)
 80052ce:	7819      	ldrb	r1, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f002 fb9e 	bl	8007a1c <USBD_LL_PrepareReceive>
 80052e0:	e008      	b.n	80052f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <USBD_CDC_Init+0x1e8>)
 80052e4:	7819      	ldrb	r1, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80052ec:	2340      	movs	r3, #64	@ 0x40
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f002 fb94 	bl	8007a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200000c3 	.word	0x200000c3
 8005304:	200000c4 	.word	0x200000c4
 8005308:	200000c5 	.word	0x200000c5

0800530c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005318:	4b3a      	ldr	r3, [pc, #232]	@ (8005404 <USBD_CDC_DeInit+0xf8>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f002 fab3 	bl	800788a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005324:	4b37      	ldr	r3, [pc, #220]	@ (8005404 <USBD_CDC_DeInit+0xf8>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3324      	adds	r3, #36	@ 0x24
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800533e:	4b32      	ldr	r3, [pc, #200]	@ (8005408 <USBD_CDC_DeInit+0xfc>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f002 faa0 	bl	800788a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800534a:	4b2f      	ldr	r3, [pc, #188]	@ (8005408 <USBD_CDC_DeInit+0xfc>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	f003 020f 	and.w	r2, r3, #15
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005362:	2200      	movs	r2, #0
 8005364:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005366:	4b29      	ldr	r3, [pc, #164]	@ (800540c <USBD_CDC_DeInit+0x100>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f002 fa8c 	bl	800788a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005372:	4b26      	ldr	r3, [pc, #152]	@ (800540c <USBD_CDC_DeInit+0x100>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	f003 020f 	and.w	r2, r3, #15
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	3324      	adds	r3, #36	@ 0x24
 8005388:	2200      	movs	r2, #0
 800538a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800538c:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <USBD_CDC_DeInit+0x100>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f003 020f 	and.w	r2, r3, #15
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	3326      	adds	r3, #38	@ 0x26
 80053a2:	2200      	movs	r2, #0
 80053a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	32b0      	adds	r2, #176	@ 0xb0
 80053b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01f      	beq.n	80053f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	33b0      	adds	r3, #176	@ 0xb0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32b0      	adds	r2, #176	@ 0xb0
 80053d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053da:	4618      	mov	r0, r3
 80053dc:	f002 fb60 	bl	8007aa0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	32b0      	adds	r2, #176	@ 0xb0
 80053ea:	2100      	movs	r1, #0
 80053ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200000c3 	.word	0x200000c3
 8005408:	200000c4 	.word	0x200000c4
 800540c:	200000c5 	.word	0x200000c5

08005410 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	32b0      	adds	r2, #176	@ 0xb0
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800543c:	2303      	movs	r3, #3
 800543e:	e0bf      	b.n	80055c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005448:	2b00      	cmp	r3, #0
 800544a:	d050      	beq.n	80054ee <USBD_CDC_Setup+0xde>
 800544c:	2b20      	cmp	r3, #32
 800544e:	f040 80af 	bne.w	80055b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	88db      	ldrh	r3, [r3, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d03a      	beq.n	80054d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b25b      	sxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	da1b      	bge.n	800549c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	33b0      	adds	r3, #176	@ 0xb0
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800547a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	88d2      	ldrh	r2, [r2, #6]
 8005480:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	88db      	ldrh	r3, [r3, #6]
 8005486:	2b07      	cmp	r3, #7
 8005488:	bf28      	it	cs
 800548a:	2307      	movcs	r3, #7
 800548c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	89fa      	ldrh	r2, [r7, #14]
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 fd93 	bl	8006fc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800549a:	e090      	b.n	80055be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785a      	ldrb	r2, [r3, #1]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	88db      	ldrh	r3, [r3, #6]
 80054aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80054ac:	d803      	bhi.n	80054b6 <USBD_CDC_Setup+0xa6>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	88db      	ldrh	r3, [r3, #6]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	e000      	b.n	80054b8 <USBD_CDC_Setup+0xa8>
 80054b6:	2240      	movs	r2, #64	@ 0x40
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054be:	6939      	ldr	r1, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80054c6:	461a      	mov	r2, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 fda5 	bl	8007018 <USBD_CtlPrepareRx>
      break;
 80054ce:	e076      	b.n	80055be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	33b0      	adds	r3, #176	@ 0xb0
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	7850      	ldrb	r0, [r2, #1]
 80054e6:	2200      	movs	r2, #0
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	4798      	blx	r3
      break;
 80054ec:	e067      	b.n	80055be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b0b      	cmp	r3, #11
 80054f4:	d851      	bhi.n	800559a <USBD_CDC_Setup+0x18a>
 80054f6:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <USBD_CDC_Setup+0xec>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	0800552d 	.word	0x0800552d
 8005500:	080055a9 	.word	0x080055a9
 8005504:	0800559b 	.word	0x0800559b
 8005508:	0800559b 	.word	0x0800559b
 800550c:	0800559b 	.word	0x0800559b
 8005510:	0800559b 	.word	0x0800559b
 8005514:	0800559b 	.word	0x0800559b
 8005518:	0800559b 	.word	0x0800559b
 800551c:	0800559b 	.word	0x0800559b
 8005520:	0800559b 	.word	0x0800559b
 8005524:	08005557 	.word	0x08005557
 8005528:	08005581 	.word	0x08005581
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b03      	cmp	r3, #3
 8005536:	d107      	bne.n	8005548 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005538:	f107 030a 	add.w	r3, r7, #10
 800553c:	2202      	movs	r2, #2
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 fd3d 	bl	8006fc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005546:	e032      	b.n	80055ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fcbb 	bl	8006ec6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005550:	2303      	movs	r3, #3
 8005552:	75fb      	strb	r3, [r7, #23]
          break;
 8005554:	e02b      	b.n	80055ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d107      	bne.n	8005572 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005562:	f107 030d 	add.w	r3, r7, #13
 8005566:	2201      	movs	r2, #1
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fd28 	bl	8006fc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005570:	e01d      	b.n	80055ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fca6 	bl	8006ec6 <USBD_CtlError>
            ret = USBD_FAIL;
 800557a:	2303      	movs	r3, #3
 800557c:	75fb      	strb	r3, [r7, #23]
          break;
 800557e:	e016      	b.n	80055ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d00f      	beq.n	80055ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 fc99 	bl	8006ec6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005594:	2303      	movs	r3, #3
 8005596:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005598:	e008      	b.n	80055ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 fc92 	bl	8006ec6 <USBD_CtlError>
          ret = USBD_FAIL;
 80055a2:	2303      	movs	r3, #3
 80055a4:	75fb      	strb	r3, [r7, #23]
          break;
 80055a6:	e002      	b.n	80055ae <USBD_CDC_Setup+0x19e>
          break;
 80055a8:	bf00      	nop
 80055aa:	e008      	b.n	80055be <USBD_CDC_Setup+0x1ae>
          break;
 80055ac:	bf00      	nop
      }
      break;
 80055ae:	e006      	b.n	80055be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 fc87 	bl	8006ec6 <USBD_CtlError>
      ret = USBD_FAIL;
 80055b8:	2303      	movs	r3, #3
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80055da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	32b0      	adds	r2, #176	@ 0xb0
 80055e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e065      	b.n	80056be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	32b0      	adds	r2, #176	@ 0xb0
 80055fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005600:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	3318      	adds	r3, #24
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02f      	beq.n	800567c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3318      	adds	r3, #24
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f003 010f 	and.w	r1, r3, #15
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	460b      	mov	r3, r1
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	440b      	add	r3, r1
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4403      	add	r3, r0
 8005644:	331c      	adds	r3, #28
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	fbb2 f1f3 	udiv	r1, r2, r3
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005652:	2b00      	cmp	r3, #0
 8005654:	d112      	bne.n	800567c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3318      	adds	r3, #24
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800566e:	78f9      	ldrb	r1, [r7, #3]
 8005670:	2300      	movs	r3, #0
 8005672:	2200      	movs	r2, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f002 f9b0 	bl	80079da <USBD_LL_Transmit>
 800567a:	e01f      	b.n	80056bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	33b0      	adds	r3, #176	@ 0xb0
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	33b0      	adds	r3, #176	@ 0xb0
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	32b0      	adds	r2, #176	@ 0xb0
 80056dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	32b0      	adds	r2, #176	@ 0xb0
 80056ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e01a      	b.n	800572e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f002 f9ae 	bl	8007a5e <USBD_LL_GetRxDataSize>
 8005702:	4602      	mov	r2, r0
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	33b0      	adds	r3, #176	@ 0xb0
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005728:	4611      	mov	r1, r2
 800572a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	32b0      	adds	r2, #176	@ 0xb0
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005754:	2303      	movs	r3, #3
 8005756:	e024      	b.n	80057a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	33b0      	adds	r3, #176	@ 0xb0
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d019      	beq.n	80057a0 <USBD_CDC_EP0_RxReady+0x6a>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005772:	2bff      	cmp	r3, #255	@ 0xff
 8005774:	d014      	beq.n	80057a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	33b0      	adds	r3, #176	@ 0xb0
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800578e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005796:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	22ff      	movs	r2, #255	@ 0xff
 800579c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057b4:	2182      	movs	r1, #130	@ 0x82
 80057b6:	4818      	ldr	r0, [pc, #96]	@ (8005818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057b8:	f000 fd4f 	bl	800625a <USBD_GetEpDesc>
 80057bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057be:	2101      	movs	r1, #1
 80057c0:	4815      	ldr	r0, [pc, #84]	@ (8005818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057c2:	f000 fd4a 	bl	800625a <USBD_GetEpDesc>
 80057c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057c8:	2181      	movs	r1, #129	@ 0x81
 80057ca:	4813      	ldr	r0, [pc, #76]	@ (8005818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057cc:	f000 fd45 	bl	800625a <USBD_GetEpDesc>
 80057d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2210      	movs	r2, #16
 80057dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d006      	beq.n	80057f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ec:	711a      	strb	r2, [r3, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d006      	beq.n	8005806 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005800:	711a      	strb	r2, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2243      	movs	r2, #67	@ 0x43
 800580a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800580c:	4b02      	ldr	r3, [pc, #8]	@ (8005818 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000080 	.word	0x20000080

0800581c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005824:	2182      	movs	r1, #130	@ 0x82
 8005826:	4818      	ldr	r0, [pc, #96]	@ (8005888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005828:	f000 fd17 	bl	800625a <USBD_GetEpDesc>
 800582c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800582e:	2101      	movs	r1, #1
 8005830:	4815      	ldr	r0, [pc, #84]	@ (8005888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005832:	f000 fd12 	bl	800625a <USBD_GetEpDesc>
 8005836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005838:	2181      	movs	r1, #129	@ 0x81
 800583a:	4813      	ldr	r0, [pc, #76]	@ (8005888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800583c:	f000 fd0d 	bl	800625a <USBD_GetEpDesc>
 8005840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2210      	movs	r2, #16
 800584c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d006      	beq.n	8005862 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2200      	movs	r2, #0
 8005858:	711a      	strb	r2, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f042 0202 	orr.w	r2, r2, #2
 8005860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	711a      	strb	r2, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f042 0202 	orr.w	r2, r2, #2
 8005874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2243      	movs	r2, #67	@ 0x43
 800587a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800587c:	4b02      	ldr	r3, [pc, #8]	@ (8005888 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000080 	.word	0x20000080

0800588c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005894:	2182      	movs	r1, #130	@ 0x82
 8005896:	4818      	ldr	r0, [pc, #96]	@ (80058f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005898:	f000 fcdf 	bl	800625a <USBD_GetEpDesc>
 800589c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800589e:	2101      	movs	r1, #1
 80058a0:	4815      	ldr	r0, [pc, #84]	@ (80058f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058a2:	f000 fcda 	bl	800625a <USBD_GetEpDesc>
 80058a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058a8:	2181      	movs	r1, #129	@ 0x81
 80058aa:	4813      	ldr	r0, [pc, #76]	@ (80058f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058ac:	f000 fcd5 	bl	800625a <USBD_GetEpDesc>
 80058b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2210      	movs	r2, #16
 80058bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058cc:	711a      	strb	r2, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058e0:	711a      	strb	r2, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2243      	movs	r2, #67	@ 0x43
 80058ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058ec:	4b02      	ldr	r3, [pc, #8]	@ (80058f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000080 	.word	0x20000080

080058fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	220a      	movs	r2, #10
 8005908:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800590a:	4b03      	ldr	r3, [pc, #12]	@ (8005918 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	2000003c 	.word	0x2000003c

0800591c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	e009      	b.n	8005944 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	33b0      	adds	r3, #176	@ 0xb0
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	32b0      	adds	r2, #176	@ 0xb0
 8005966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005972:	2303      	movs	r3, #3
 8005974:	e008      	b.n	8005988 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	32b0      	adds	r2, #176	@ 0xb0
 80059a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e004      	b.n	80059c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	32b0      	adds	r2, #176	@ 0xb0
 80059e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e025      	b.n	8005a42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11f      	bne.n	8005a40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a08:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <USBD_CDC_TransmitPacket+0x7c>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4403      	add	r3, r0
 8005a22:	3318      	adds	r3, #24
 8005a24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a26:	4b09      	ldr	r3, [pc, #36]	@ (8005a4c <USBD_CDC_TransmitPacket+0x7c>)
 8005a28:	7819      	ldrb	r1, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 ffcf 	bl	80079da <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200000c3 	.word	0x200000c3

08005a50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	32b0      	adds	r2, #176	@ 0xb0
 8005a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32b0      	adds	r2, #176	@ 0xb0
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e018      	b.n	8005ab0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7c1b      	ldrb	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a86:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab8 <USBD_CDC_ReceivePacket+0x68>)
 8005a88:	7819      	ldrb	r1, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 ffc1 	bl	8007a1c <USBD_LL_PrepareReceive>
 8005a9a:	e008      	b.n	8005aae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <USBD_CDC_ReceivePacket+0x68>)
 8005a9e:	7819      	ldrb	r1, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005aa6:	2340      	movs	r3, #64	@ 0x40
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 ffb7 	bl	8007a1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	200000c4 	.word	0x200000c4

08005abc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01f      	b.n	8005b14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	79fa      	ldrb	r2, [r7, #7]
 8005b06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f001 fe31 	bl	8007770 <USBD_LL_Init>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e025      	b.n	8005b80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32ae      	adds	r2, #174	@ 0xae
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32ae      	adds	r2, #174	@ 0xae
 8005b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	f107 020e 	add.w	r2, r7, #14
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	4602      	mov	r2, r0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fe39 	bl	8007808 <USBD_LL_Start>
 8005b96:	4603      	mov	r3, r0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ba8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f90c 	bl	8006e52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d01a      	beq.n	8005c94 <USBD_LL_SetupStage+0x72>
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d822      	bhi.n	8005ca8 <USBD_LL_SetupStage+0x86>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <USBD_LL_SetupStage+0x4a>
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d00a      	beq.n	8005c80 <USBD_LL_SetupStage+0x5e>
 8005c6a:	e01d      	b.n	8005ca8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb63 	bl	8006340 <USBD_StdDevReq>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7e:	e020      	b.n	8005cc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fbcb 	bl	8006424 <USBD_StdItfReq>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
      break;
 8005c92:	e016      	b.n	8005cc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fc2d 	bl	80064fc <USBD_StdEPReq>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca6:	e00c      	b.n	8005cc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 fe06 	bl	80078c8 <USBD_LL_StallEP>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc0:	bf00      	nop
  }

  return ret;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d16e      	bne.n	8005dc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005cea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	f040 8098 	bne.w	8005e28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d913      	bls.n	8005d2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	1ad2      	subs	r2, r2, r3
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	bf28      	it	cs
 8005d1e:	4613      	movcs	r3, r2
 8005d20:	461a      	mov	r2, r3
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f001 f994 	bl	8007052 <USBD_CtlContinueRx>
 8005d2a:	e07d      	b.n	8005e28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d014      	beq.n	8005d64 <USBD_LL_DataOutStage+0x98>
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d81d      	bhi.n	8005d7a <USBD_LL_DataOutStage+0xae>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <USBD_LL_DataOutStage+0x7c>
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d003      	beq.n	8005d4e <USBD_LL_DataOutStage+0x82>
 8005d46:	e018      	b.n	8005d7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	75bb      	strb	r3, [r7, #22]
            break;
 8005d4c:	e018      	b.n	8005d80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fa64 	bl	8006226 <USBD_CoreFindIF>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75bb      	strb	r3, [r7, #22]
            break;
 8005d62:	e00d      	b.n	8005d80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa66 	bl	8006240 <USBD_CoreFindEP>
 8005d74:	4603      	mov	r3, r0
 8005d76:	75bb      	strb	r3, [r7, #22]
            break;
 8005d78:	e002      	b.n	8005d80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75bb      	strb	r3, [r7, #22]
            break;
 8005d7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d80:	7dbb      	ldrb	r3, [r7, #22]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d113      	bne.n	8005dba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d92:	7dba      	ldrb	r2, [r7, #22]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	32ae      	adds	r2, #174	@ 0xae
 8005d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005da2:	7dba      	ldrb	r2, [r7, #22]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005daa:	7dba      	ldrb	r2, [r7, #22]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	32ae      	adds	r2, #174	@ 0xae
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f001 f95a 	bl	8007074 <USBD_CtlSendStatus>
 8005dc0:	e032      	b.n	8005e28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005dc2:	7afb      	ldrb	r3, [r7, #11]
 8005dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fa37 	bl	8006240 <USBD_CoreFindEP>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dd6:	7dbb      	ldrb	r3, [r7, #22]
 8005dd8:	2bff      	cmp	r3, #255	@ 0xff
 8005dda:	d025      	beq.n	8005e28 <USBD_LL_DataOutStage+0x15c>
 8005ddc:	7dbb      	ldrb	r3, [r7, #22]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d122      	bne.n	8005e28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d117      	bne.n	8005e1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005dee:	7dba      	ldrb	r2, [r7, #22]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	32ae      	adds	r2, #174	@ 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00f      	beq.n	8005e1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005dfe:	7dba      	ldrb	r2, [r7, #22]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e06:	7dba      	ldrb	r2, [r7, #22]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	32ae      	adds	r2, #174	@ 0xae
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	7afa      	ldrb	r2, [r7, #11]
 8005e14:	4611      	mov	r1, r2
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	4798      	blx	r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	e000      	b.n	8005e2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b086      	sub	sp, #24
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d16f      	bne.n	8005f26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3314      	adds	r3, #20
 8005e4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d15a      	bne.n	8005f0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d914      	bls.n	8005e8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 f8bc 	bl	8006ff6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2200      	movs	r2, #0
 8005e82:	2100      	movs	r1, #0
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f001 fdc9 	bl	8007a1c <USBD_LL_PrepareReceive>
 8005e8a:	e03f      	b.n	8005f0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d11c      	bne.n	8005ed2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d316      	bcc.n	8005ed2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d20f      	bcs.n	8005ed2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f001 f89d 	bl	8006ff6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	2100      	movs	r1, #0
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f001 fda6 	bl	8007a1c <USBD_LL_PrepareReceive>
 8005ed0:	e01c      	b.n	8005f0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d10f      	bne.n	8005efe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005efe:	2180      	movs	r1, #128	@ 0x80
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f001 fce1 	bl	80078c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f001 f8c7 	bl	800709a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d03a      	beq.n	8005f8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fe42 	bl	8005ba0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f24:	e032      	b.n	8005f8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f985 	bl	8006240 <USBD_CoreFindEP>
 8005f36:	4603      	mov	r3, r0
 8005f38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2bff      	cmp	r3, #255	@ 0xff
 8005f3e:	d025      	beq.n	8005f8c <USBD_LL_DataInStage+0x15a>
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d122      	bne.n	8005f8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d11c      	bne.n	8005f8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f52:	7dfa      	ldrb	r2, [r7, #23]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	32ae      	adds	r2, #174	@ 0xae
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d014      	beq.n	8005f8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f62:	7dfa      	ldrb	r2, [r7, #23]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f6a:	7dfa      	ldrb	r2, [r7, #23]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	32ae      	adds	r2, #174	@ 0xae
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	7afa      	ldrb	r2, [r7, #11]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	4798      	blx	r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f88:	7dbb      	ldrb	r3, [r7, #22]
 8005f8a:	e000      	b.n	8005f8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6852      	ldr	r2, [r2, #4]
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	4611      	mov	r1, r2
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ffc:	2340      	movs	r3, #64	@ 0x40
 8005ffe:	2200      	movs	r2, #0
 8006000:	2100      	movs	r1, #0
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fc1b 	bl	800783e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2240      	movs	r2, #64	@ 0x40
 8006014:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	2200      	movs	r2, #0
 800601c:	2180      	movs	r1, #128	@ 0x80
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 fc0d 	bl	800783e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2240      	movs	r2, #64	@ 0x40
 800602e:	621a      	str	r2, [r3, #32]

  return ret;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	78fa      	ldrb	r2, [r7, #3]
 800604a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b04      	cmp	r3, #4
 800606c:	d006      	beq.n	800607c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006074:	b2da      	uxtb	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2204      	movs	r2, #4
 8006080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d106      	bne.n	80060b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d110      	bne.n	80060f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	32ae      	adds	r2, #174	@ 0xae
 8006118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006120:	2303      	movs	r3, #3
 8006122:	e01c      	b.n	800615e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b03      	cmp	r3, #3
 800612e:	d115      	bne.n	800615c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	32ae      	adds	r2, #174	@ 0xae
 800613a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32ae      	adds	r2, #174	@ 0xae
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	4611      	mov	r1, r2
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	32ae      	adds	r2, #174	@ 0xae
 800617c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	e01c      	b.n	80061c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b03      	cmp	r3, #3
 8006192:	d115      	bne.n	80061c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	32ae      	adds	r2, #174	@ 0xae
 800619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00b      	beq.n	80061c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32ae      	adds	r2, #174	@ 0xae
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00e      	beq.n	800621c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6852      	ldr	r2, [r2, #4]
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	4611      	mov	r1, r2
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006232:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800624c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	885b      	ldrh	r3, [r3, #2]
 8006276:	b29b      	uxth	r3, r3
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	7812      	ldrb	r2, [r2, #0]
 800627c:	4293      	cmp	r3, r2
 800627e:	d91f      	bls.n	80062c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006286:	e013      	b.n	80062b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006288:	f107 030a 	add.w	r3, r7, #10
 800628c:	4619      	mov	r1, r3
 800628e:	6978      	ldr	r0, [r7, #20]
 8006290:	f000 f81b 	bl	80062ca <USBD_GetNextDesc>
 8006294:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	2b05      	cmp	r3, #5
 800629c:	d108      	bne.n	80062b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d008      	beq.n	80062be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	885b      	ldrh	r3, [r3, #2]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	897b      	ldrh	r3, [r7, #10]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d8e5      	bhi.n	8006288 <USBD_GetEpDesc+0x2e>
 80062bc:	e000      	b.n	80062c0 <USBD_GetEpDesc+0x66>
          break;
 80062be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80062c0:	693b      	ldr	r3, [r7, #16]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	4413      	add	r3, r2
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006320:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	b21a      	sxth	r2, r3
 8006328:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800632c:	4313      	orrs	r3, r2
 800632e:	b21b      	sxth	r3, r3
 8006330:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006332:	89fb      	ldrh	r3, [r7, #14]
}
 8006334:	4618      	mov	r0, r3
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006356:	2b40      	cmp	r3, #64	@ 0x40
 8006358:	d005      	beq.n	8006366 <USBD_StdDevReq+0x26>
 800635a:	2b40      	cmp	r3, #64	@ 0x40
 800635c:	d857      	bhi.n	800640e <USBD_StdDevReq+0xce>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00f      	beq.n	8006382 <USBD_StdDevReq+0x42>
 8006362:	2b20      	cmp	r3, #32
 8006364:	d153      	bne.n	800640e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	32ae      	adds	r2, #174	@ 0xae
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
      break;
 8006380:	e04a      	b.n	8006418 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b09      	cmp	r3, #9
 8006388:	d83b      	bhi.n	8006402 <USBD_StdDevReq+0xc2>
 800638a:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <USBD_StdDevReq+0x50>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063e5 	.word	0x080063e5
 8006394:	080063f9 	.word	0x080063f9
 8006398:	08006403 	.word	0x08006403
 800639c:	080063ef 	.word	0x080063ef
 80063a0:	08006403 	.word	0x08006403
 80063a4:	080063c3 	.word	0x080063c3
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	08006403 	.word	0x08006403
 80063b0:	080063db 	.word	0x080063db
 80063b4:	080063cd 	.word	0x080063cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa3c 	bl	8006838 <USBD_GetDescriptor>
          break;
 80063c0:	e024      	b.n	800640c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fba1 	bl	8006b0c <USBD_SetAddress>
          break;
 80063ca:	e01f      	b.n	800640c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fbe0 	bl	8006b94 <USBD_SetConfig>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
          break;
 80063d8:	e018      	b.n	800640c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc83 	bl	8006ce8 <USBD_GetConfig>
          break;
 80063e2:	e013      	b.n	800640c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fcb4 	bl	8006d54 <USBD_GetStatus>
          break;
 80063ec:	e00e      	b.n	800640c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fce3 	bl	8006dbc <USBD_SetFeature>
          break;
 80063f6:	e009      	b.n	800640c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd07 	bl	8006e0e <USBD_ClrFeature>
          break;
 8006400:	e004      	b.n	800640c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fd5e 	bl	8006ec6 <USBD_CtlError>
          break;
 800640a:	bf00      	nop
      }
      break;
 800640c:	e004      	b.n	8006418 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fd58 	bl	8006ec6 <USBD_CtlError>
      break;
 8006416:	bf00      	nop
  }

  return ret;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d005      	beq.n	800644a <USBD_StdItfReq+0x26>
 800643e:	2b40      	cmp	r3, #64	@ 0x40
 8006440:	d852      	bhi.n	80064e8 <USBD_StdItfReq+0xc4>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <USBD_StdItfReq+0x26>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d14e      	bne.n	80064e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	2b02      	cmp	r3, #2
 8006456:	d840      	bhi.n	80064da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	889b      	ldrh	r3, [r3, #4]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d836      	bhi.n	80064d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	889b      	ldrh	r3, [r3, #4]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fedb 	bl	8006226 <USBD_CoreFindIF>
 8006470:	4603      	mov	r3, r0
 8006472:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	2bff      	cmp	r3, #255	@ 0xff
 8006478:	d01d      	beq.n	80064b6 <USBD_StdItfReq+0x92>
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11a      	bne.n	80064b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006480:	7bba      	ldrb	r2, [r7, #14]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32ae      	adds	r2, #174	@ 0xae
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00f      	beq.n	80064b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006490:	7bba      	ldrb	r2, [r7, #14]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006498:	7bba      	ldrb	r2, [r7, #14]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	32ae      	adds	r2, #174	@ 0xae
 800649e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064ae:	e004      	b.n	80064ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80064b0:	2303      	movs	r3, #3
 80064b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064b4:	e001      	b.n	80064ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064b6:	2303      	movs	r3, #3
 80064b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	88db      	ldrh	r3, [r3, #6]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d110      	bne.n	80064e4 <USBD_StdItfReq+0xc0>
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10d      	bne.n	80064e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fdd3 	bl	8007074 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064ce:	e009      	b.n	80064e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fcf7 	bl	8006ec6 <USBD_CtlError>
          break;
 80064d8:	e004      	b.n	80064e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fcf2 	bl	8006ec6 <USBD_CtlError>
          break;
 80064e2:	e000      	b.n	80064e6 <USBD_StdItfReq+0xc2>
          break;
 80064e4:	bf00      	nop
      }
      break;
 80064e6:	e004      	b.n	80064f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fceb 	bl	8006ec6 <USBD_CtlError>
      break;
 80064f0:	bf00      	nop
  }

  return ret;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	889b      	ldrh	r3, [r3, #4]
 800650e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d007      	beq.n	800652c <USBD_StdEPReq+0x30>
 800651c:	2b40      	cmp	r3, #64	@ 0x40
 800651e:	f200 817f 	bhi.w	8006820 <USBD_StdEPReq+0x324>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02a      	beq.n	800657c <USBD_StdEPReq+0x80>
 8006526:	2b20      	cmp	r3, #32
 8006528:	f040 817a 	bne.w	8006820 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff fe85 	bl	8006240 <USBD_CoreFindEP>
 8006536:	4603      	mov	r3, r0
 8006538:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800653a:	7b7b      	ldrb	r3, [r7, #13]
 800653c:	2bff      	cmp	r3, #255	@ 0xff
 800653e:	f000 8174 	beq.w	800682a <USBD_StdEPReq+0x32e>
 8006542:	7b7b      	ldrb	r3, [r7, #13]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 8170 	bne.w	800682a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800654a:	7b7a      	ldrb	r2, [r7, #13]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006552:	7b7a      	ldrb	r2, [r7, #13]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	32ae      	adds	r2, #174	@ 0xae
 8006558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8163 	beq.w	800682a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006564:	7b7a      	ldrb	r2, [r7, #13]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32ae      	adds	r2, #174	@ 0xae
 800656a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800657a:	e156      	b.n	800682a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b03      	cmp	r3, #3
 8006582:	d008      	beq.n	8006596 <USBD_StdEPReq+0x9a>
 8006584:	2b03      	cmp	r3, #3
 8006586:	f300 8145 	bgt.w	8006814 <USBD_StdEPReq+0x318>
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 809b 	beq.w	80066c6 <USBD_StdEPReq+0x1ca>
 8006590:	2b01      	cmp	r3, #1
 8006592:	d03c      	beq.n	800660e <USBD_StdEPReq+0x112>
 8006594:	e13e      	b.n	8006814 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d002      	beq.n	80065a8 <USBD_StdEPReq+0xac>
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d016      	beq.n	80065d4 <USBD_StdEPReq+0xd8>
 80065a6:	e02c      	b.n	8006602 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <USBD_StdEPReq+0xce>
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	2b80      	cmp	r3, #128	@ 0x80
 80065b2:	d00a      	beq.n	80065ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f985 	bl	80078c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065be:	2180      	movs	r1, #128	@ 0x80
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f981 	bl	80078c8 <USBD_LL_StallEP>
 80065c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065c8:	e020      	b.n	800660c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc7a 	bl	8006ec6 <USBD_CtlError>
              break;
 80065d2:	e01b      	b.n	800660c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	885b      	ldrh	r3, [r3, #2]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10e      	bne.n	80065fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <USBD_StdEPReq+0xfe>
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	d008      	beq.n	80065fa <USBD_StdEPReq+0xfe>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	88db      	ldrh	r3, [r3, #6]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f967 	bl	80078c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fd3a 	bl	8007074 <USBD_CtlSendStatus>

              break;
 8006600:	e004      	b.n	800660c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fc5e 	bl	8006ec6 <USBD_CtlError>
              break;
 800660a:	bf00      	nop
          }
          break;
 800660c:	e107      	b.n	800681e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d002      	beq.n	8006620 <USBD_StdEPReq+0x124>
 800661a:	2b03      	cmp	r3, #3
 800661c:	d016      	beq.n	800664c <USBD_StdEPReq+0x150>
 800661e:	e04b      	b.n	80066b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <USBD_StdEPReq+0x146>
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b80      	cmp	r3, #128	@ 0x80
 800662a:	d00a      	beq.n	8006642 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f949 	bl	80078c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006636:	2180      	movs	r1, #128	@ 0x80
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 f945 	bl	80078c8 <USBD_LL_StallEP>
 800663e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006640:	e040      	b.n	80066c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc3e 	bl	8006ec6 <USBD_CtlError>
              break;
 800664a:	e03b      	b.n	80066c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	885b      	ldrh	r3, [r3, #2]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d136      	bne.n	80066c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 f94f 	bl	8007906 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd03 	bl	8007074 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fde4 	bl	8006240 <USBD_CoreFindEP>
 8006678:	4603      	mov	r3, r0
 800667a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800667c:	7b7b      	ldrb	r3, [r7, #13]
 800667e:	2bff      	cmp	r3, #255	@ 0xff
 8006680:	d01f      	beq.n	80066c2 <USBD_StdEPReq+0x1c6>
 8006682:	7b7b      	ldrb	r3, [r7, #13]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11c      	bne.n	80066c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006688:	7b7a      	ldrb	r2, [r7, #13]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006690:	7b7a      	ldrb	r2, [r7, #13]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	32ae      	adds	r2, #174	@ 0xae
 8006696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d010      	beq.n	80066c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066a0:	7b7a      	ldrb	r2, [r7, #13]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	32ae      	adds	r2, #174	@ 0xae
 80066a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066b6:	e004      	b.n	80066c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fc03 	bl	8006ec6 <USBD_CtlError>
              break;
 80066c0:	e000      	b.n	80066c4 <USBD_StdEPReq+0x1c8>
              break;
 80066c2:	bf00      	nop
          }
          break;
 80066c4:	e0ab      	b.n	800681e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d002      	beq.n	80066d8 <USBD_StdEPReq+0x1dc>
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d032      	beq.n	800673c <USBD_StdEPReq+0x240>
 80066d6:	e097      	b.n	8006808 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <USBD_StdEPReq+0x1f2>
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	2b80      	cmp	r3, #128	@ 0x80
 80066e2:	d004      	beq.n	80066ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fbed 	bl	8006ec6 <USBD_CtlError>
                break;
 80066ec:	e091      	b.n	8006812 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da0b      	bge.n	800670e <USBD_StdEPReq+0x212>
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	3310      	adds	r3, #16
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	3304      	adds	r3, #4
 800670c:	e00b      	b.n	8006726 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	3304      	adds	r3, #4
 8006726:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2202      	movs	r2, #2
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc43 	bl	8006fc0 <USBD_CtlSendData>
              break;
 800673a:	e06a      	b.n	8006812 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800673c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	da11      	bge.n	8006768 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	f003 020f 	and.w	r2, r3, #15
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	3324      	adds	r3, #36	@ 0x24
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d117      	bne.n	800678e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fbb0 	bl	8006ec6 <USBD_CtlError>
                  break;
 8006766:	e054      	b.n	8006812 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fb9d 	bl	8006ec6 <USBD_CtlError>
                  break;
 800678c:	e041      	b.n	8006812 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800678e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006792:	2b00      	cmp	r3, #0
 8006794:	da0b      	bge.n	80067ae <USBD_StdEPReq+0x2b2>
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	3310      	adds	r3, #16
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	3304      	adds	r3, #4
 80067ac:	e00b      	b.n	80067c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	3304      	adds	r3, #4
 80067c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <USBD_StdEPReq+0x2d8>
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b80      	cmp	r3, #128	@ 0x80
 80067d2:	d103      	bne.n	80067dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e00e      	b.n	80067fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 f8af 	bl	8007944 <USBD_LL_IsStallEP>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e002      	b.n	80067fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2202      	movs	r2, #2
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fbdd 	bl	8006fc0 <USBD_CtlSendData>
              break;
 8006806:	e004      	b.n	8006812 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb5b 	bl	8006ec6 <USBD_CtlError>
              break;
 8006810:	bf00      	nop
          }
          break;
 8006812:	e004      	b.n	800681e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fb55 	bl	8006ec6 <USBD_CtlError>
          break;
 800681c:	bf00      	nop
      }
      break;
 800681e:	e005      	b.n	800682c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb4f 	bl	8006ec6 <USBD_CtlError>
      break;
 8006828:	e000      	b.n	800682c <USBD_StdEPReq+0x330>
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	2b06      	cmp	r3, #6
 800685a:	f200 8128 	bhi.w	8006aae <USBD_GetDescriptor+0x276>
 800685e:	a201      	add	r2, pc, #4	@ (adr r2, 8006864 <USBD_GetDescriptor+0x2c>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006881 	.word	0x08006881
 8006868:	08006899 	.word	0x08006899
 800686c:	080068d9 	.word	0x080068d9
 8006870:	08006aaf 	.word	0x08006aaf
 8006874:	08006aaf 	.word	0x08006aaf
 8006878:	08006a4f 	.word	0x08006a4f
 800687c:	08006a7b 	.word	0x08006a7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7c12      	ldrb	r2, [r2, #16]
 800688c:	f107 0108 	add.w	r1, r7, #8
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	60f8      	str	r0, [r7, #12]
      break;
 8006896:	e112      	b.n	8006abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7c1b      	ldrb	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10d      	bne.n	80068bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	f107 0208 	add.w	r2, r7, #8
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	2202      	movs	r2, #2
 80068b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ba:	e100      	b.n	8006abe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	f107 0208 	add.w	r2, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
      break;
 80068d6:	e0f2      	b.n	8006abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	885b      	ldrh	r3, [r3, #2]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b05      	cmp	r3, #5
 80068e0:	f200 80ac 	bhi.w	8006a3c <USBD_GetDescriptor+0x204>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <USBD_GetDescriptor+0xb4>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006905 	.word	0x08006905
 80068f0:	08006939 	.word	0x08006939
 80068f4:	0800696d 	.word	0x0800696d
 80068f8:	080069a1 	.word	0x080069a1
 80068fc:	080069d5 	.word	0x080069d5
 8006900:	08006a09 	.word	0x08006a09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006926:	e091      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 facb 	bl	8006ec6 <USBD_CtlError>
            err++;
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	3301      	adds	r3, #1
 8006934:	72fb      	strb	r3, [r7, #11]
          break;
 8006936:	e089      	b.n	8006a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695a:	e077      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fab1 	bl	8006ec6 <USBD_CtlError>
            err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
          break;
 800696a:	e06f      	b.n	8006a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698e:	e05d      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa97 	bl	8006ec6 <USBD_CtlError>
            err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
          break;
 800699e:	e055      	b.n	8006a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e043      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa7d 	bl	8006ec6 <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e03b      	b.n	8006a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f6:	e029      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa63 	bl	8006ec6 <USBD_CtlError>
            err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
          break;
 8006a06:	e021      	b.n	8006a4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2a:	e00f      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa49 	bl	8006ec6 <USBD_CtlError>
            err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3a:	e007      	b.n	8006a4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa41 	bl	8006ec6 <USBD_CtlError>
          err++;
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	3301      	adds	r3, #1
 8006a48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a4a:	bf00      	nop
      }
      break;
 8006a4c:	e037      	b.n	8006abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7c1b      	ldrb	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5e:	f107 0208 	add.w	r2, r7, #8
 8006a62:	4610      	mov	r0, r2
 8006a64:	4798      	blx	r3
 8006a66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a68:	e029      	b.n	8006abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa2a 	bl	8006ec6 <USBD_CtlError>
        err++;
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	3301      	adds	r3, #1
 8006a76:	72fb      	strb	r3, [r7, #11]
      break;
 8006a78:	e021      	b.n	8006abe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7c1b      	ldrb	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10d      	bne.n	8006a9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	f107 0208 	add.w	r2, r7, #8
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4798      	blx	r3
 8006a92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	2207      	movs	r2, #7
 8006a9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a9c:	e00f      	b.n	8006abe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fa10 	bl	8006ec6 <USBD_CtlError>
        err++;
 8006aa6:	7afb      	ldrb	r3, [r7, #11]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8006aac:	e007      	b.n	8006abe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa08 	bl	8006ec6 <USBD_CtlError>
      err++;
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	72fb      	strb	r3, [r7, #11]
      break;
 8006abc:	bf00      	nop
  }

  if (err != 0U)
 8006abe:	7afb      	ldrb	r3, [r7, #11]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11e      	bne.n	8006b02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	88db      	ldrh	r3, [r3, #6]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d016      	beq.n	8006afa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006acc:	893b      	ldrh	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00e      	beq.n	8006af0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	88da      	ldrh	r2, [r3, #6]
 8006ad6:	893b      	ldrh	r3, [r7, #8]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	bf28      	it	cs
 8006adc:	4613      	movcs	r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ae2:	893b      	ldrh	r3, [r7, #8]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fa69 	bl	8006fc0 <USBD_CtlSendData>
 8006aee:	e009      	b.n	8006b04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9e7 	bl	8006ec6 <USBD_CtlError>
 8006af8:	e004      	b.n	8006b04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 faba 	bl	8007074 <USBD_CtlSendStatus>
 8006b00:	e000      	b.n	8006b04 <USBD_GetDescriptor+0x2cc>
    return;
 8006b02:	bf00      	nop
  }
}
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop

08006b0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	889b      	ldrh	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d131      	bne.n	8006b82 <USBD_SetAddress+0x76>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d12d      	bne.n	8006b82 <USBD_SetAddress+0x76>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b2c:	d829      	bhi.n	8006b82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d104      	bne.n	8006b50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9bc 	bl	8006ec6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4e:	e01d      	b.n	8006b8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7bfa      	ldrb	r2, [r7, #15]
 8006b54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 ff1d 	bl	800799c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa86 	bl	8007074 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	e009      	b.n	8006b8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b80:	e004      	b.n	8006b8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f99e 	bl	8006ec6 <USBD_CtlError>
  }
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	885b      	ldrh	r3, [r3, #2]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bac:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d905      	bls.n	8006bc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f985 	bl	8006ec6 <USBD_CtlError>
    return USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e08c      	b.n	8006cda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d002      	beq.n	8006bd2 <USBD_SetConfig+0x3e>
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d029      	beq.n	8006c24 <USBD_SetConfig+0x90>
 8006bd0:	e075      	b.n	8006cbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bd2:	4b44      	ldr	r3, [pc, #272]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d020      	beq.n	8006c1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006bda:	4b42      	ldr	r3, [pc, #264]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006be4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fe ffe3 	bl	8005bb6 <USBD_SetClassConfig>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f962 	bl	8006ec6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c0a:	e065      	b.n	8006cd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa31 	bl	8007074 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2203      	movs	r2, #3
 8006c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c1a:	e05d      	b.n	8006cd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa29 	bl	8007074 <USBD_CtlSendStatus>
      break;
 8006c22:	e059      	b.n	8006cd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d112      	bne.n	8006c52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006c34:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fe ffd2 	bl	8005bee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa12 	bl	8007074 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c50:	e042      	b.n	8006cd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c52:	4b24      	ldr	r3, [pc, #144]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d02a      	beq.n	8006cb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fe ffc0 	bl	8005bee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fe ff99 	bl	8005bb6 <USBD_SetClassConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00f      	beq.n	8006cae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f918 	bl	8006ec6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fe ffa5 	bl	8005bee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cac:	e014      	b.n	8006cd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9e0 	bl	8007074 <USBD_CtlSendStatus>
      break;
 8006cb4:	e010      	b.n	8006cd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9dc 	bl	8007074 <USBD_CtlSendStatus>
      break;
 8006cbc:	e00c      	b.n	8006cd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f900 	bl	8006ec6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cc6:	4b07      	ldr	r3, [pc, #28]	@ (8006ce4 <USBD_SetConfig+0x150>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fe ff8e 	bl	8005bee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd6:	bf00      	nop
  }

  return ret;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	2000075c 	.word	0x2000075c

08006ce8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d004      	beq.n	8006d04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8e2 	bl	8006ec6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d02:	e023      	b.n	8006d4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	dc02      	bgt.n	8006d16 <USBD_GetConfig+0x2e>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dc03      	bgt.n	8006d1c <USBD_GetConfig+0x34>
 8006d14:	e015      	b.n	8006d42 <USBD_GetConfig+0x5a>
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d00b      	beq.n	8006d32 <USBD_GetConfig+0x4a>
 8006d1a:	e012      	b.n	8006d42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3308      	adds	r3, #8
 8006d26:	2201      	movs	r2, #1
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f948 	bl	8006fc0 <USBD_CtlSendData>
        break;
 8006d30:	e00c      	b.n	8006d4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	2201      	movs	r2, #1
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f940 	bl	8006fc0 <USBD_CtlSendData>
        break;
 8006d40:	e004      	b.n	8006d4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8be 	bl	8006ec6 <USBD_CtlError>
        break;
 8006d4a:	bf00      	nop
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d81e      	bhi.n	8006daa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d004      	beq.n	8006d7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8a5 	bl	8006ec6 <USBD_CtlError>
        break;
 8006d7c:	e01a      	b.n	8006db4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f043 0202 	orr.w	r2, r3, #2
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	2202      	movs	r2, #2
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f90c 	bl	8006fc0 <USBD_CtlSendData>
      break;
 8006da8:	e004      	b.n	8006db4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f88a 	bl	8006ec6 <USBD_CtlError>
      break;
 8006db2:	bf00      	nop
  }
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	885b      	ldrh	r3, [r3, #2]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d107      	bne.n	8006dde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f94c 	bl	8007074 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ddc:	e013      	b.n	8006e06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	885b      	ldrh	r3, [r3, #2]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d10b      	bne.n	8006dfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	889b      	ldrh	r3, [r3, #4]
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f93c 	bl	8007074 <USBD_CtlSendStatus>
}
 8006dfc:	e003      	b.n	8006e06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f860 	bl	8006ec6 <USBD_CtlError>
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d80b      	bhi.n	8006e3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	885b      	ldrh	r3, [r3, #2]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d10c      	bne.n	8006e48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f91c 	bl	8007074 <USBD_CtlSendStatus>
      }
      break;
 8006e3c:	e004      	b.n	8006e48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f840 	bl	8006ec6 <USBD_CtlError>
      break;
 8006e46:	e000      	b.n	8006e4a <USBD_ClrFeature+0x3c>
      break;
 8006e48:	bf00      	nop
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff fa40 	bl	8006302 <SWAPBYTE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff fa33 	bl	8006302 <SWAPBYTE>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fa26 	bl	8006302 <SWAPBYTE>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	80da      	strh	r2, [r3, #6]
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ed0:	2180      	movs	r1, #128	@ 0x80
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fcf8 	bl	80078c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ed8:	2100      	movs	r1, #0
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fcf4 	bl	80078c8 <USBD_LL_StallEP>
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d042      	beq.n	8006f84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f02:	6938      	ldr	r0, [r7, #16]
 8006f04:	f000 f842 	bl	8006f8c <USBD_GetLen>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f12:	d808      	bhi.n	8006f26 <USBD_GetString+0x3e>
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f000 f839 	bl	8006f8c <USBD_GetLen>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	e001      	b.n	8006f2a <USBD_GetString+0x42>
 8006f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	4413      	add	r3, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7812      	ldrb	r2, [r2, #0]
 8006f38:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	4413      	add	r3, r2
 8006f46:	2203      	movs	r2, #3
 8006f48:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f50:	e013      	b.n	8006f7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4413      	add	r3, r2
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3301      	adds	r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
    idx++;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	3301      	adds	r3, #1
 8006f68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	4413      	add	r3, r2
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	3301      	adds	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e7      	bne.n	8006f52 <USBD_GetString+0x6a>
 8006f82:	e000      	b.n	8006f86 <USBD_GetString+0x9e>
    return;
 8006f84:	bf00      	nop
  }
}
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f9c:	e005      	b.n	8006faa <USBD_GetLen+0x1e>
  {
    len++;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f5      	bne.n	8006f9e <USBD_GetLen+0x12>
  }

  return len;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fcf7 	bl	80079da <USBD_LL_Transmit>

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	2100      	movs	r1, #0
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fce6 	bl	80079da <USBD_LL_Transmit>

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2203      	movs	r2, #3
 8007028:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	2100      	movs	r1, #0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fcea 	bl	8007a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	2100      	movs	r1, #0
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fcd9 	bl	8007a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2204      	movs	r2, #4
 8007080:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007084:	2300      	movs	r3, #0
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fca5 	bl	80079da <USBD_LL_Transmit>

  return USBD_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2205      	movs	r2, #5
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070aa:	2300      	movs	r3, #0
 80070ac:	2200      	movs	r2, #0
 80070ae:	2100      	movs	r1, #0
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fcb3 	bl	8007a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070c4:	2200      	movs	r2, #0
 80070c6:	4912      	ldr	r1, [pc, #72]	@ (8007110 <MX_USB_DEVICE_Init+0x50>)
 80070c8:	4812      	ldr	r0, [pc, #72]	@ (8007114 <MX_USB_DEVICE_Init+0x54>)
 80070ca:	f7fe fcf7 	bl	8005abc <USBD_Init>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070d4:	f7f9 fb36 	bl	8000744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070d8:	490f      	ldr	r1, [pc, #60]	@ (8007118 <MX_USB_DEVICE_Init+0x58>)
 80070da:	480e      	ldr	r0, [pc, #56]	@ (8007114 <MX_USB_DEVICE_Init+0x54>)
 80070dc:	f7fe fd1e 	bl	8005b1c <USBD_RegisterClass>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070e6:	f7f9 fb2d 	bl	8000744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80070ea:	490c      	ldr	r1, [pc, #48]	@ (800711c <MX_USB_DEVICE_Init+0x5c>)
 80070ec:	4809      	ldr	r0, [pc, #36]	@ (8007114 <MX_USB_DEVICE_Init+0x54>)
 80070ee:	f7fe fc15 	bl	800591c <USBD_CDC_RegisterInterface>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070f8:	f7f9 fb24 	bl	8000744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070fc:	4805      	ldr	r0, [pc, #20]	@ (8007114 <MX_USB_DEVICE_Init+0x54>)
 80070fe:	f7fe fd43 	bl	8005b88 <USBD_Start>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007108:	f7f9 fb1c 	bl	8000744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800710c:	bf00      	nop
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200000dc 	.word	0x200000dc
 8007114:	20000760 	.word	0x20000760
 8007118:	20000048 	.word	0x20000048
 800711c:	200000c8 	.word	0x200000c8

08007120 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007124:	2200      	movs	r2, #0
 8007126:	4905      	ldr	r1, [pc, #20]	@ (800713c <CDC_Init_FS+0x1c>)
 8007128:	4805      	ldr	r0, [pc, #20]	@ (8007140 <CDC_Init_FS+0x20>)
 800712a:	f7fe fc11 	bl	8005950 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800712e:	4905      	ldr	r1, [pc, #20]	@ (8007144 <CDC_Init_FS+0x24>)
 8007130:	4803      	ldr	r0, [pc, #12]	@ (8007140 <CDC_Init_FS+0x20>)
 8007132:	f7fe fc2f 	bl	8005994 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007136:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007138:	4618      	mov	r0, r3
 800713a:	bd80      	pop	{r7, pc}
 800713c:	2000123c 	.word	0x2000123c
 8007140:	20000760 	.word	0x20000760
 8007144:	20000a3c 	.word	0x20000a3c

08007148 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800714c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800714e:	4618      	mov	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	71fb      	strb	r3, [r7, #7]
 8007164:	4613      	mov	r3, r2
 8007166:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	2b23      	cmp	r3, #35	@ 0x23
 800716c:	d84a      	bhi.n	8007204 <CDC_Control_FS+0xac>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <CDC_Control_FS+0x1c>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007205 	.word	0x08007205
 8007178:	08007205 	.word	0x08007205
 800717c:	08007205 	.word	0x08007205
 8007180:	08007205 	.word	0x08007205
 8007184:	08007205 	.word	0x08007205
 8007188:	08007205 	.word	0x08007205
 800718c:	08007205 	.word	0x08007205
 8007190:	08007205 	.word	0x08007205
 8007194:	08007205 	.word	0x08007205
 8007198:	08007205 	.word	0x08007205
 800719c:	08007205 	.word	0x08007205
 80071a0:	08007205 	.word	0x08007205
 80071a4:	08007205 	.word	0x08007205
 80071a8:	08007205 	.word	0x08007205
 80071ac:	08007205 	.word	0x08007205
 80071b0:	08007205 	.word	0x08007205
 80071b4:	08007205 	.word	0x08007205
 80071b8:	08007205 	.word	0x08007205
 80071bc:	08007205 	.word	0x08007205
 80071c0:	08007205 	.word	0x08007205
 80071c4:	08007205 	.word	0x08007205
 80071c8:	08007205 	.word	0x08007205
 80071cc:	08007205 	.word	0x08007205
 80071d0:	08007205 	.word	0x08007205
 80071d4:	08007205 	.word	0x08007205
 80071d8:	08007205 	.word	0x08007205
 80071dc:	08007205 	.word	0x08007205
 80071e0:	08007205 	.word	0x08007205
 80071e4:	08007205 	.word	0x08007205
 80071e8:	08007205 	.word	0x08007205
 80071ec:	08007205 	.word	0x08007205
 80071f0:	08007205 	.word	0x08007205
 80071f4:	08007205 	.word	0x08007205
 80071f8:	08007205 	.word	0x08007205
 80071fc:	08007205 	.word	0x08007205
 8007200:	08007205 	.word	0x08007205
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007204:	bf00      	nop
	}

	return (USBD_OK);
 8007206:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	SbW_Request_Received_CB(&S, Buf, (uint16_t) (*Len));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	4807      	ldr	r0, [pc, #28]	@ (8007248 <CDC_Receive_FS+0x34>)
 800722a:	f7fd fde7 	bl	8004dfc <SbW_Request_Received_CB>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4806      	ldr	r0, [pc, #24]	@ (800724c <CDC_Receive_FS+0x38>)
 8007232:	f7fe fbaf 	bl	8005994 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007236:	4805      	ldr	r0, [pc, #20]	@ (800724c <CDC_Receive_FS+0x38>)
 8007238:	f7fe fc0a 	bl	8005a50 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800723c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000000 	.word	0x20000000
 800724c:	20000760 	.word	0x20000760

08007250 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8007260:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <CDC_Transmit_FS+0x48>)
 8007262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007266:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8007272:	2301      	movs	r3, #1
 8007274:	e00b      	b.n	800728e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007276:	887b      	ldrh	r3, [r7, #2]
 8007278:	461a      	mov	r2, r3
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4806      	ldr	r0, [pc, #24]	@ (8007298 <CDC_Transmit_FS+0x48>)
 800727e:	f7fe fb67 	bl	8005950 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007282:	4805      	ldr	r0, [pc, #20]	@ (8007298 <CDC_Transmit_FS+0x48>)
 8007284:	f7fe fba4 	bl	80059d0 <USBD_CDC_TransmitPacket>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000760 	.word	0x20000760

0800729c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	SbW_TxCPLt(&S);
 80072ae:	4804      	ldr	r0, [pc, #16]	@ (80072c0 <CDC_TransmitCplt_FS+0x24>)
 80072b0:	f7fd ff29 	bl	8005106 <SbW_TxCPLt>
  /* USER CODE END 13 */
  return result;
 80072b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000000 	.word	0x20000000

080072c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2212      	movs	r2, #18
 80072d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072d6:	4b03      	ldr	r3, [pc, #12]	@ (80072e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	200000f8 	.word	0x200000f8

080072e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2204      	movs	r2, #4
 80072f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072fa:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	2000010c 	.word	0x2000010c

0800730c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4907      	ldr	r1, [pc, #28]	@ (8007340 <USBD_FS_ProductStrDescriptor+0x34>)
 8007322:	4808      	ldr	r0, [pc, #32]	@ (8007344 <USBD_FS_ProductStrDescriptor+0x38>)
 8007324:	f7ff fde0 	bl	8006ee8 <USBD_GetString>
 8007328:	e004      	b.n	8007334 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	4904      	ldr	r1, [pc, #16]	@ (8007340 <USBD_FS_ProductStrDescriptor+0x34>)
 800732e:	4805      	ldr	r0, [pc, #20]	@ (8007344 <USBD_FS_ProductStrDescriptor+0x38>)
 8007330:	f7ff fdda 	bl	8006ee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	@ (8007340 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20001a3c 	.word	0x20001a3c
 8007344:	08007b98 	.word	0x08007b98

08007348 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	4904      	ldr	r1, [pc, #16]	@ (8007368 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007358:	4804      	ldr	r0, [pc, #16]	@ (800736c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800735a:	f7ff fdc5 	bl	8006ee8 <USBD_GetString>
  return USBD_StrDesc;
 800735e:	4b02      	ldr	r3, [pc, #8]	@ (8007368 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20001a3c 	.word	0x20001a3c
 800736c:	08007bb0 	.word	0x08007bb0

08007370 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	221a      	movs	r2, #26
 8007380:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007382:	f000 f843 	bl	800740c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007386:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000110 	.word	0x20000110

08007394 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4907      	ldr	r1, [pc, #28]	@ (80073c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073aa:	4808      	ldr	r0, [pc, #32]	@ (80073cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073ac:	f7ff fd9c 	bl	8006ee8 <USBD_GetString>
 80073b0:	e004      	b.n	80073bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073b6:	4805      	ldr	r0, [pc, #20]	@ (80073cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80073b8:	f7ff fd96 	bl	8006ee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073bc:	4b02      	ldr	r3, [pc, #8]	@ (80073c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20001a3c 	.word	0x20001a3c
 80073cc:	08007bc4 	.word	0x08007bc4

080073d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4907      	ldr	r1, [pc, #28]	@ (8007404 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073e6:	4808      	ldr	r0, [pc, #32]	@ (8007408 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073e8:	f7ff fd7e 	bl	8006ee8 <USBD_GetString>
 80073ec:	e004      	b.n	80073f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073f2:	4805      	ldr	r0, [pc, #20]	@ (8007408 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073f4:	f7ff fd78 	bl	8006ee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20001a3c 	.word	0x20001a3c
 8007408:	08007bd0 	.word	0x08007bd0

0800740c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007412:	4b0f      	ldr	r3, [pc, #60]	@ (8007450 <Get_SerialNum+0x44>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007418:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <Get_SerialNum+0x48>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800741e:	4b0e      	ldr	r3, [pc, #56]	@ (8007458 <Get_SerialNum+0x4c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4413      	add	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007432:	2208      	movs	r2, #8
 8007434:	4909      	ldr	r1, [pc, #36]	@ (800745c <Get_SerialNum+0x50>)
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f814 	bl	8007464 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800743c:	2204      	movs	r2, #4
 800743e:	4908      	ldr	r1, [pc, #32]	@ (8007460 <Get_SerialNum+0x54>)
 8007440:	68b8      	ldr	r0, [r7, #8]
 8007442:	f000 f80f 	bl	8007464 <IntToUnicode>
  }
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	1fff7a10 	.word	0x1fff7a10
 8007454:	1fff7a14 	.word	0x1fff7a14
 8007458:	1fff7a18 	.word	0x1fff7a18
 800745c:	20000112 	.word	0x20000112
 8007460:	20000122 	.word	0x20000122

08007464 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
 800747a:	e027      	b.n	80074cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	0f1b      	lsrs	r3, r3, #28
 8007480:	2b09      	cmp	r3, #9
 8007482:	d80b      	bhi.n	800749c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0f1b      	lsrs	r3, r3, #28
 8007488:	b2da      	uxtb	r2, r3
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	4619      	mov	r1, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	440b      	add	r3, r1
 8007494:	3230      	adds	r2, #48	@ 0x30
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	e00a      	b.n	80074b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	0f1b      	lsrs	r3, r3, #28
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4619      	mov	r1, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	440b      	add	r3, r1
 80074ac:	3237      	adds	r2, #55	@ 0x37
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	3301      	adds	r3, #1
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	3301      	adds	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
 80074cc:	7dfa      	ldrb	r2, [r7, #23]
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d3d3      	bcc.n	800747c <IntToUnicode+0x18>
  }
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	@ 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ec:	f107 0314 	add.w	r3, r7, #20
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007504:	d13a      	bne.n	800757c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	4b1e      	ldr	r3, [pc, #120]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	4a1d      	ldr	r2, [pc, #116]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	6313      	str	r3, [r2, #48]	@ 0x30
 8007516:	4b1b      	ldr	r3, [pc, #108]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007522:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007528:	2302      	movs	r3, #2
 800752a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007530:	2303      	movs	r3, #3
 8007532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007534:	230a      	movs	r3, #10
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	4619      	mov	r1, r3
 800753e:	4812      	ldr	r0, [pc, #72]	@ (8007588 <HAL_PCD_MspInit+0xa4>)
 8007540:	f7f9 fbde 	bl	8000d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007544:	4b0f      	ldr	r3, [pc, #60]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007548:	4a0e      	ldr	r2, [pc, #56]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 800754a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007558:	4a0a      	ldr	r2, [pc, #40]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 800755a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800755e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007560:	4b08      	ldr	r3, [pc, #32]	@ (8007584 <HAL_PCD_MspInit+0xa0>)
 8007562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800756c:	2200      	movs	r2, #0
 800756e:	2100      	movs	r1, #0
 8007570:	2043      	movs	r0, #67	@ 0x43
 8007572:	f7f9 fb8e 	bl	8000c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007576:	2043      	movs	r0, #67	@ 0x43
 8007578:	f7f9 fba7 	bl	8000cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800757c:	bf00      	nop
 800757e:	3728      	adds	r7, #40	@ 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40023800 	.word	0x40023800
 8007588:	40020000 	.word	0x40020000

0800758c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075a0:	4619      	mov	r1, r3
 80075a2:	4610      	mov	r0, r2
 80075a4:	f7fe fb3d 	bl	8005c22 <USBD_LL_SetupStage>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	4619      	mov	r1, r3
 80075da:	f7fe fb77 	bl	8005ccc <USBD_LL_DataOutStage>
}
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	3320      	adds	r3, #32
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	4619      	mov	r1, r3
 800760e:	f7fe fc10 	bl	8005e32 <USBD_LL_DataInStage>
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fd4a 	bl	80060c2 <USBD_LL_SOF>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800763e:	2301      	movs	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	79db      	ldrb	r3, [r3, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
 800764e:	e008      	b.n	8007662 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	79db      	ldrb	r3, [r3, #7]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d102      	bne.n	800765e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
 800765c:	e001      	b.n	8007662 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800765e:	f7f9 f871 	bl	8000744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fce4 	bl	800603a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fc8c 	bl	8005f96 <USBD_LL_Reset>
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fcdf 	bl	800605a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7adb      	ldrb	r3, [r3, #11]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076bc:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <HAL_PCD_SuspendCallback+0x48>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	4a03      	ldr	r2, [pc, #12]	@ (80076d0 <HAL_PCD_SuspendCallback+0x48>)
 80076c2:	f043 0306 	orr.w	r3, r3, #6
 80076c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076c8:	bf00      	nop
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	e000ed00 	.word	0xe000ed00

080076d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fcd5 	bl	8006092 <USBD_LL_Resume>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe fd2d 	bl	8006166 <USBD_LL_IsoOUTIncomplete>
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007726:	78fa      	ldrb	r2, [r7, #3]
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fce9 	bl	8006102 <USBD_LL_IsoINIncomplete>
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fd3f 	bl	80061ca <USBD_LL_DevConnected>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fd3c 	bl	80061e0 <USBD_LL_DevDisconnected>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d13c      	bne.n	80077fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007780:	4a20      	ldr	r2, [pc, #128]	@ (8007804 <USBD_LL_Init+0x94>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a1e      	ldr	r2, [pc, #120]	@ (8007804 <USBD_LL_Init+0x94>)
 800778c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007790:	4b1c      	ldr	r3, [pc, #112]	@ (8007804 <USBD_LL_Init+0x94>)
 8007792:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007796:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007798:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <USBD_LL_Init+0x94>)
 800779a:	2204      	movs	r2, #4
 800779c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800779e:	4b19      	ldr	r3, [pc, #100]	@ (8007804 <USBD_LL_Init+0x94>)
 80077a0:	2202      	movs	r2, #2
 80077a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077a4:	4b17      	ldr	r3, [pc, #92]	@ (8007804 <USBD_LL_Init+0x94>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077aa:	4b16      	ldr	r3, [pc, #88]	@ (8007804 <USBD_LL_Init+0x94>)
 80077ac:	2202      	movs	r2, #2
 80077ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077b0:	4b14      	ldr	r3, [pc, #80]	@ (8007804 <USBD_LL_Init+0x94>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077b6:	4b13      	ldr	r3, [pc, #76]	@ (8007804 <USBD_LL_Init+0x94>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077bc:	4b11      	ldr	r3, [pc, #68]	@ (8007804 <USBD_LL_Init+0x94>)
 80077be:	2200      	movs	r2, #0
 80077c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <USBD_LL_Init+0x94>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007804 <USBD_LL_Init+0x94>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077ce:	480d      	ldr	r0, [pc, #52]	@ (8007804 <USBD_LL_Init+0x94>)
 80077d0:	f7f9 fc32 	bl	8001038 <HAL_PCD_Init>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077da:	f7f8 ffb3 	bl	8000744 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077de:	2180      	movs	r1, #128	@ 0x80
 80077e0:	4808      	ldr	r0, [pc, #32]	@ (8007804 <USBD_LL_Init+0x94>)
 80077e2:	f7fa fe5e 	bl	80024a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	2100      	movs	r1, #0
 80077ea:	4806      	ldr	r0, [pc, #24]	@ (8007804 <USBD_LL_Init+0x94>)
 80077ec:	f7fa fe12 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077f0:	2280      	movs	r2, #128	@ 0x80
 80077f2:	2101      	movs	r1, #1
 80077f4:	4803      	ldr	r0, [pc, #12]	@ (8007804 <USBD_LL_Init+0x94>)
 80077f6:	f7fa fe0d 	bl	8002414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20001c3c 	.word	0x20001c3c

08007808 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800781e:	4618      	mov	r0, r3
 8007820:	f7f9 fd19 	bl	8001256 <HAL_PCD_Start>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	4618      	mov	r0, r3
 800782c:	f000 f942 	bl	8007ab4 <USBD_Get_USB_Status>
 8007830:	4603      	mov	r3, r0
 8007832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007834:	7bbb      	ldrb	r3, [r7, #14]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	4608      	mov	r0, r1
 8007848:	4611      	mov	r1, r2
 800784a:	461a      	mov	r2, r3
 800784c:	4603      	mov	r3, r0
 800784e:	70fb      	strb	r3, [r7, #3]
 8007850:	460b      	mov	r3, r1
 8007852:	70bb      	strb	r3, [r7, #2]
 8007854:	4613      	mov	r3, r2
 8007856:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007866:	78bb      	ldrb	r3, [r7, #2]
 8007868:	883a      	ldrh	r2, [r7, #0]
 800786a:	78f9      	ldrb	r1, [r7, #3]
 800786c:	f7fa f9ed 	bl	8001c4a <HAL_PCD_EP_Open>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	4618      	mov	r0, r3
 8007878:	f000 f91c 	bl	8007ab4 <USBD_Get_USB_Status>
 800787c:	4603      	mov	r3, r0
 800787e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007880:	7bbb      	ldrb	r3, [r7, #14]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078a4:	78fa      	ldrb	r2, [r7, #3]
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fa fa38 	bl	8001d1e <HAL_PCD_EP_Close>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f8fd 	bl	8007ab4 <USBD_Get_USB_Status>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078be:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fa faf0 	bl	8001ecc <HAL_PCD_EP_SetStall>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f8de 	bl	8007ab4 <USBD_Get_USB_Status>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007920:	78fa      	ldrb	r2, [r7, #3]
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f7fa fb34 	bl	8001f92 <HAL_PCD_EP_ClrStall>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f8bf 	bl	8007ab4 <USBD_Get_USB_Status>
 8007936:	4603      	mov	r3, r0
 8007938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800793a:	7bbb      	ldrb	r3, [r7, #14]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007956:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800795c:	2b00      	cmp	r3, #0
 800795e:	da0b      	bge.n	8007978 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	3316      	adds	r3, #22
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	e00b      	b.n	8007990 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	4613      	mov	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800798e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fa f921 	bl	8001c02 <HAL_PCD_SetAddress>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f874 	bl	8007ab4 <USBD_Get_USB_Status>
 80079cc:	4603      	mov	r3, r0
 80079ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	460b      	mov	r3, r1
 80079e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80079f8:	7af9      	ldrb	r1, [r7, #11]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	f7fa fa2b 	bl	8001e58 <HAL_PCD_EP_Transmit>
 8007a02:	4603      	mov	r3, r0
 8007a04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f853 	bl	8007ab4 <USBD_Get_USB_Status>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007a3a:	7af9      	ldrb	r1, [r7, #11]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	f7fa f9b7 	bl	8001db2 <HAL_PCD_EP_Receive>
 8007a44:	4603      	mov	r3, r0
 8007a46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f832 	bl	8007ab4 <USBD_Get_USB_Status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a70:	78fa      	ldrb	r2, [r7, #3]
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fa f9d7 	bl	8001e28 <HAL_PCD_EP_GetRxCount>
 8007a7a:	4603      	mov	r3, r0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a8c:	4b03      	ldr	r3, [pc, #12]	@ (8007a9c <USBD_static_malloc+0x18>)
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20002120 	.word	0x20002120

08007aa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d817      	bhi.n	8007af8 <USBD_Get_USB_Status+0x44>
 8007ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad0 <USBD_Get_USB_Status+0x1c>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007ae7 	.word	0x08007ae7
 8007ad8:	08007aed 	.word	0x08007aed
 8007adc:	08007af3 	.word	0x08007af3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae4:	e00b      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aea:	e008      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
    break;
 8007af0:	e005      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007af2:	2303      	movs	r3, #3
 8007af4:	73fb      	strb	r3, [r7, #15]
    break;
 8007af6:	e002      	b.n	8007afe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	73fb      	strb	r3, [r7, #15]
    break;
 8007afc:	bf00      	nop
  }
  return usb_status;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <memset>:
 8007b0c:	4402      	add	r2, r0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d100      	bne.n	8007b16 <memset+0xa>
 8007b14:	4770      	bx	lr
 8007b16:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1a:	e7f9      	b.n	8007b10 <memset+0x4>

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	@ (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007b60 <__libc_init_array+0x44>)
 8007b30:	f000 f826 	bl	8007b80 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	08007bf8 	.word	0x08007bf8
 8007b58:	08007bf8 	.word	0x08007bf8
 8007b5c:	08007bf8 	.word	0x08007bf8
 8007b60:	08007bfc 	.word	0x08007bfc

08007b64 <memcpy>:
 8007b64:	440a      	add	r2, r1
 8007b66:	4291      	cmp	r1, r2
 8007b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	4770      	bx	lr
 8007b70:	b510      	push	{r4, lr}
 8007b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	d1f9      	bne.n	8007b72 <memcpy+0xe>
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <_init>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr

08007b8c <_fini>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr
